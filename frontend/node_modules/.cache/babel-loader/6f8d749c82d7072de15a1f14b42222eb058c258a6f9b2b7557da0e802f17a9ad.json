{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Node, { addNodeClass } from './Node.js';\nimport { assign } from '../math/OperatorNode.js';\nimport { bypass } from '../core/BypassNode.js';\nimport { expression } from '../code/ExpressionNode.js';\nimport { cond } from '../math/CondNode.js';\nimport { loop } from '../utils/LoopNode.js';\nimport { ShaderNode, nodeProxy } from '../shadernode/ShaderNode.js';\nclass StackNode extends Node {\n  constructor(parent = null) {\n    super();\n    this.nodes = [];\n    this.outputNode = null;\n    this.parent = parent;\n    this._currentCond = null;\n    this.isStackNode = true;\n  }\n  getNodeType(builder) {\n    return this.outputNode ? this.outputNode.getNodeType(builder) : 'void';\n  }\n  add(node) {\n    this.nodes.push(bypass(expression(), node));\n    return this;\n  }\n  if(boolNode, method) {\n    const methodNode = new ShaderNode(method);\n    this._currentCond = cond(boolNode, methodNode);\n    return this.add(this._currentCond);\n  }\n  elseif(boolNode, method) {\n    const methodNode = new ShaderNode(method);\n    const ifNode = cond(boolNode, methodNode);\n    this._currentCond.elseNode = ifNode;\n    this._currentCond = ifNode;\n    return this;\n  }\n  else(method) {\n    this._currentCond.elseNode = new ShaderNode(method);\n    return this;\n  }\n  assign(targetNode, sourceValue) {\n    return this.add(assign(targetNode, sourceValue));\n  }\n  loop(...params) {\n    return this.add(loop(...params));\n  }\n  build(builder, ...params) {\n    for (const node of this.nodes) {\n      node.build(builder, 'void');\n    }\n    return this.outputNode ? this.outputNode.build(builder, ...params) : super.build(builder, ...params);\n  }\n}\nexport default StackNode;\nexport const stack = nodeProxy(StackNode);\naddNodeClass('StackNode', StackNode);","map":{"version":3,"names":["Node","addNodeClass","assign","bypass","expression","cond","loop","ShaderNode","nodeProxy","StackNode","constructor","parent","nodes","outputNode","_currentCond","isStackNode","getNodeType","builder","add","node","push","if","boolNode","method","methodNode","elseif","ifNode","elseNode","else","targetNode","sourceValue","params","build","stack"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/nodes/core/StackNode.js"],"sourcesContent":["import Node, { addNodeClass } from './Node.js';\nimport { assign } from '../math/OperatorNode.js';\nimport { bypass } from '../core/BypassNode.js';\nimport { expression } from '../code/ExpressionNode.js';\nimport { cond } from '../math/CondNode.js';\nimport { loop } from '../utils/LoopNode.js';\nimport { ShaderNode, nodeProxy } from '../shadernode/ShaderNode.js';\n\nclass StackNode extends Node {\n\n\tconstructor( parent = null ) {\n\n\t\tsuper();\n\n\t\tthis.nodes = [];\n\t\tthis.outputNode = null;\n\n\t\tthis.parent = parent;\n\n\t\tthis._currentCond = null;\n\n\t\tthis.isStackNode = true;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.outputNode ? this.outputNode.getNodeType( builder ) : 'void';\n\n\t}\n\n\tadd( node ) {\n\n\t\tthis.nodes.push( bypass( expression(), node ) );\n\n\t\treturn this;\n\n\t}\n\n\tif( boolNode, method ) {\n\n\t\tconst methodNode = new ShaderNode( method );\n\t\tthis._currentCond = cond( boolNode, methodNode );\n\n\t\treturn this.add( this._currentCond );\n\n\t}\n\n\telseif( boolNode, method ) {\n\n\t\tconst methodNode = new ShaderNode( method );\n\t\tconst ifNode = cond( boolNode, methodNode );\n\n\t\tthis._currentCond.elseNode = ifNode;\n\t\tthis._currentCond = ifNode;\n\n\t\treturn this;\n\n\t}\n\n\telse( method ) {\n\n\t\tthis._currentCond.elseNode = new ShaderNode( method );\n\n\t\treturn this;\n\n\t}\n\n\tassign( targetNode, sourceValue ) {\n\n\t\treturn this.add( assign( targetNode, sourceValue ) );\n\n\t}\n\n\tloop( ...params ) {\n\n\t\treturn this.add( loop( ...params ) );\n\n\t}\n\n\tbuild( builder, ...params ) {\n\n\t\tfor ( const node of this.nodes ) {\n\n\t\t\tnode.build( builder, 'void' );\n\n\t\t}\n\n\t\treturn this.outputNode ? this.outputNode.build( builder, ...params ) : super.build( builder, ...params );\n\n\t}\n\n}\n\nexport default StackNode;\n\nexport const stack = nodeProxy( StackNode );\n\naddNodeClass( 'StackNode', StackNode );\n"],"mappings":";AAAA,OAAOA,IAAI,IAAIC,YAAY,QAAQ,WAAW;AAC9C,SAASC,MAAM,QAAQ,yBAAyB;AAChD,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,IAAI,QAAQ,qBAAqB;AAC1C,SAASC,IAAI,QAAQ,sBAAsB;AAC3C,SAASC,UAAU,EAAEC,SAAS,QAAQ,6BAA6B;AAEnE,MAAMC,SAAS,SAAST,IAAI,CAAC;EAE5BU,WAAWA,CAAEC,MAAM,GAAG,IAAI,EAAG;IAE5B,KAAK,CAAC,CAAC;IAEP,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,UAAU,GAAG,IAAI;IAEtB,IAAI,CAACF,MAAM,GAAGA,MAAM;IAEpB,IAAI,CAACG,YAAY,GAAG,IAAI;IAExB,IAAI,CAACC,WAAW,GAAG,IAAI;EAExB;EAEAC,WAAWA,CAAEC,OAAO,EAAG;IAEtB,OAAO,IAAI,CAACJ,UAAU,GAAG,IAAI,CAACA,UAAU,CAACG,WAAW,CAAEC,OAAQ,CAAC,GAAG,MAAM;EAEzE;EAEAC,GAAGA,CAAEC,IAAI,EAAG;IAEX,IAAI,CAACP,KAAK,CAACQ,IAAI,CAAEjB,MAAM,CAAEC,UAAU,CAAC,CAAC,EAAEe,IAAK,CAAE,CAAC;IAE/C,OAAO,IAAI;EAEZ;EAEAE,EAAEA,CAAEC,QAAQ,EAAEC,MAAM,EAAG;IAEtB,MAAMC,UAAU,GAAG,IAAIjB,UAAU,CAAEgB,MAAO,CAAC;IAC3C,IAAI,CAACT,YAAY,GAAGT,IAAI,CAAEiB,QAAQ,EAAEE,UAAW,CAAC;IAEhD,OAAO,IAAI,CAACN,GAAG,CAAE,IAAI,CAACJ,YAAa,CAAC;EAErC;EAEAW,MAAMA,CAAEH,QAAQ,EAAEC,MAAM,EAAG;IAE1B,MAAMC,UAAU,GAAG,IAAIjB,UAAU,CAAEgB,MAAO,CAAC;IAC3C,MAAMG,MAAM,GAAGrB,IAAI,CAAEiB,QAAQ,EAAEE,UAAW,CAAC;IAE3C,IAAI,CAACV,YAAY,CAACa,QAAQ,GAAGD,MAAM;IACnC,IAAI,CAACZ,YAAY,GAAGY,MAAM;IAE1B,OAAO,IAAI;EAEZ;EAEAE,IAAIA,CAAEL,MAAM,EAAG;IAEd,IAAI,CAACT,YAAY,CAACa,QAAQ,GAAG,IAAIpB,UAAU,CAAEgB,MAAO,CAAC;IAErD,OAAO,IAAI;EAEZ;EAEArB,MAAMA,CAAE2B,UAAU,EAAEC,WAAW,EAAG;IAEjC,OAAO,IAAI,CAACZ,GAAG,CAAEhB,MAAM,CAAE2B,UAAU,EAAEC,WAAY,CAAE,CAAC;EAErD;EAEAxB,IAAIA,CAAE,GAAGyB,MAAM,EAAG;IAEjB,OAAO,IAAI,CAACb,GAAG,CAAEZ,IAAI,CAAE,GAAGyB,MAAO,CAAE,CAAC;EAErC;EAEAC,KAAKA,CAAEf,OAAO,EAAE,GAAGc,MAAM,EAAG;IAE3B,KAAM,MAAMZ,IAAI,IAAI,IAAI,CAACP,KAAK,EAAG;MAEhCO,IAAI,CAACa,KAAK,CAAEf,OAAO,EAAE,MAAO,CAAC;IAE9B;IAEA,OAAO,IAAI,CAACJ,UAAU,GAAG,IAAI,CAACA,UAAU,CAACmB,KAAK,CAAEf,OAAO,EAAE,GAAGc,MAAO,CAAC,GAAG,KAAK,CAACC,KAAK,CAAEf,OAAO,EAAE,GAAGc,MAAO,CAAC;EAEzG;AAED;AAEA,eAAetB,SAAS;AAExB,OAAO,MAAMwB,KAAK,GAAGzB,SAAS,CAAEC,SAAU,CAAC;AAE3CR,YAAY,CAAE,WAAW,EAAEQ,SAAU,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}