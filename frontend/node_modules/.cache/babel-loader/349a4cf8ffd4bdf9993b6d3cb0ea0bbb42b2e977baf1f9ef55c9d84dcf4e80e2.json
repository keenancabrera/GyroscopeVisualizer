{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import { pushScopeId } from 'vue'\nimport gyroscopeSimulator from './components/gyroscopeSimulator';\n// import { popScopeId } from 'vue'\n// import { ref, onMounted } from 'vue'\nexport default {\n  name: 'app',\n  components: {\n    gyroscopeSimulator\n  },\n  data: () => ({\n    parameters: {\n      \"l\": {\n        value: 5,\n        min: 0,\n        max: 20\n      },\n      \"a\": {\n        value: 0.2,\n        min: 0,\n        max: 10\n      },\n      \"h\": {\n        value: 0.2,\n        min: 0,\n        max: 10\n      },\n      \"g\": {\n        value: -9.8,\n        min: 0,\n        max: 10\n      }\n    },\n    solverParameters: {\n      \"stepSize\": {\n        value: 1 / 60\n      },\n      \"numSteps\": {\n        value: 2400\n      },\n      't0': {\n        value: 0\n      }\n    },\n    animationParameters: {\n      \"rstride\": 15,\n      \"cstride\": 5,\n      \"nSample\": 45,\n      \"dpi\": 300,\n      \"transparency\": 0.8\n    },\n    initialState: {\n      \"theta\": {\n        value: 0,\n        min: 0,\n        max: 6.28\n      },\n      \"phi\": {\n        value: 0.2,\n        min: 0,\n        max: 6.28\n      },\n      \"psi\": {\n        value: 0,\n        min: 0,\n        max: 6.28\n      },\n      \"thetaVel\": {\n        value: 0,\n        min: 0,\n        max: 12\n      },\n      \"phiVel\": {\n        value: 0,\n        min: 0,\n        max: 12\n      },\n      \"psiVel\": {\n        value: 0,\n        min: 0,\n        max: 200\n      },\n      \"pTheta\": {\n        value: null\n      },\n      \"pPhi\": {\n        value: null\n      },\n      \"pPsi\": {\n        value: null\n      }\n    },\n    solution: {\n      \"theta\": [],\n      \"phi\": [],\n      \"psi\": []\n    }\n  }),\n  mounted() {\n    console.log(this.parameters);\n    console.log(Object.entries(this.parameters));\n    console.log(Object.fromEntries(Object.entries(this.parameters).filter(x => x[0] != 'l' && x[0] != 'a')));\n  },\n  methods: {\n    gyroscope(t, stateVector) {\n      // returns dstateVector/dt\n      let [theta, phi, psi, pTheta, pPhi, pPsi] = stateVector;\n\n      // DON'T ANGER THE LINTER\n      theta = psi;\n      psi = theta;\n      let phiVel = pPhi / this.parameters.l.value ** 2;\n      let thetaVel = (pTheta - pPsi * Math.cos(phi)) / (this.parameters.a.value ** 2 * Math.sin(phi) ** 2);\n      let psiVel = pPsi / this.parameters.a.value ** 2 - thetaVel * Math.cos(phi);\n      let pThetaDot = 0;\n      let pPhiDot = (this.parameters.l.value ** 2 - this.parameters.a.value ** 2) * Math.sin(phi) * Math.cos(phi) * thetaVel ** 2 - (this.parameters.g.value * this.parameters.l.value - this.parameters.a.value ** 2 * psiVel * thetaVel) * Math.sin(phi);\n      let pPsiDot = 0;\n      return [thetaVel, phiVel, psiVel, pThetaDot, pPhiDot, pPsiDot];\n    },\n    getGeneralizedMomenta() {\n      this.initialState.pTheta.value = (this.parameters.l.value ** 2 * Math.sin(this.initialState.phi.value) ** 2 + this.parameters.a.value ** 2 * Math.cos(this.initialState.phi.value) ** 2) * this.initialState.thetaVel.value + this.parameters.a.value ** 2 * this.initialState.psiVel.value * Math.cos(this.initialState.phi.value);\n      this.initialState.pPhi.value = this.parameters.l.value ** 2 * this.initialState.phiVel.value;\n      this.initialState.pPsi.value = this.parameters.a.value ** 2 * (this.initialState.thetaVel.value * Math.cos(this.initialState.phi.value) + this.initialState.psiVel.value);\n    },\n    rungeKutta(engine, state, t0, stepSize, numSteps) {\n      // Helper functions for rungeKutta solver\n      function numericAdd(a, b) {\n        return a.map((ai, i) => ai + b[i]);\n      }\n      function numericMul(scalar, vector) {\n        return vector.map(vi => scalar * vi);\n      }\n\n      // Variable Instantiation\n      const result = [];\n      result.push({\n        t: t0,\n        state: state\n      });\n\n      // Solve\n      for (let i = 1; i <= numSteps; i++) {\n        if (i % 10 == 0) {\n          'SOLVING STEP: ' + i + \"/\" + numSteps;\n        }\n        const t = t0 + i * stepSize;\n        const k1 = numericMul(stepSize, engine(t0, state));\n        const k2 = numericMul(stepSize, engine(t0 + stepSize / 2, numericAdd(state, numericMul(0.5, k1))));\n        const k3 = numericMul(stepSize, engine(t0 + stepSize / 2, numericAdd(state, numericMul(0.5, k2))));\n        const k4 = numericMul(stepSize, engine(t0 + stepSize, numericAdd(state, k3)));\n        state = numericAdd(state, numericMul(1 / 6, numericAdd(k1, numericAdd(numericMul(2, k2), numericAdd(numericMul(2, k3), k4)))));\n        t0 = t;\n        result.push({\n          t,\n          state: state\n        });\n      }\n      return result;\n    },\n    runSolver() {\n      this.getGeneralizedMomenta();\n      let solution = this.rungeKutta(this.gyroscope, [this.initialState.theta.value, this.initialState.phi.value, this.initialState.psi.value, this.initialState.pTheta.value, this.initialState.pPhi.value, this.initialState.pPsi.value], this.solverParameters.t0.value, this.solverParameters.stepSize.value, this.solverParameters.numSteps.value);\n      console.log(solution);\n      console.log(this.solution);\n      for (let elem of solution) {\n        this.solution.theta.push(elem.state[0]);\n        this.solution.phi.push(elem.state[1]);\n        this.solution.psi.push(elem.state[2]);\n      }\n    }\n  }\n};","map":{"version":3,"names":["gyroscopeSimulator","name","components","data","parameters","value","min","max","solverParameters","animationParameters","initialState","solution","mounted","console","log","Object","entries","fromEntries","filter","x","methods","gyroscope","t","stateVector","theta","phi","psi","pTheta","pPhi","pPsi","phiVel","l","thetaVel","Math","cos","a","sin","psiVel","pThetaDot","pPhiDot","g","pPsiDot","getGeneralizedMomenta","rungeKutta","engine","state","t0","stepSize","numSteps","numericAdd","b","map","ai","i","numericMul","scalar","vector","vi","result","push","k1","k2","k3","k4","runSolver","elem"],"sources":["/Users/cabrera/Documents/PortfolioWebiste/frontend/src/App.vue"],"sourcesContent":["<template>\n  <v-app id=\"gyro\">\n    <v-main class=\"bg-grey-lighten-3 \">\n      <v-container :fluid=\"true\" class=\"ma-0 pa-2 v-flex full-width\">\n        <v-row>\n          <v-col cols=\"4\">\n            <v-card rounded=\"lg\">\n\n              <v-card-item class=\"mb-5\">\n                <v-card-title>Parameters</v-card-title>\n                <v-card-subtitle>Set dimensions of gyroscope and strength of gravity</v-card-subtitle>\n              </v-card-item>\n\n              <v-card-text>\n                <v-slider \n                  v-for=\"(parameter, key) in parameters\" \n                  :min=\"parameter.min\" \n                  :max=\"parameter.max\" \n                  :thumb-label=\"'always'\"\n                  :label = 'key + \":\"'\n                  v-model=\"parameter.value\" \n                  :key=\"key\"\n                  class=\"mt-2\"\n                  >\n                </v-slider>                \n              </v-card-text>\n            </v-card>\n\n            <v-card rounded=\"lg\" class=\"mt-2\">\n              \n              <v-card-item class=\"mb-5\">\n                <v-card-title>Initial State</v-card-title>\n                <v-card-subtitle>Set initial state of gyroscope</v-card-subtitle>\n              </v-card-item>\n\n              <v-card-text>\n                <v-slider \n                  v-for = \"(key, stateVariable) in Object.fromEntries(Object.entries(this.parameters).filter(x => (x[0] != 'l') && (x[0] != 'a')))\"\n                  :min=\"stateVariable.min\" \n                  :max=\"stateVariable.max\" \n                  :thumb-label=\"'always'\"\n                  :label = 'key + \":\"'\n                  v-model=\"stateVariable.value\" \n                  :key=\"key\"\n                  class=\"mt-2\"\n                  >\n                </v-slider>                \n              </v-card-text>\n            </v-card>\n\n            <v-btn variant=\"outlined\" class=\"align-self-center\" @click=\"runSolver()\">\n              Simulate\n            </v-btn>\n\n          </v-col>\n\n          <v-col cols=\"8\">\n            <v-sheet rounded=\"lg\">\n              <gyroscopeSimulator :solution=\"solution\" :parameters=\"parameters\"></gyroscopeSimulator>\n            </v-sheet>\n          </v-col>\n        </v-row>\n      </v-container>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\n// import { pushScopeId } from 'vue'\nimport gyroscopeSimulator from './components/gyroscopeSimulator'\n// import { popScopeId } from 'vue'\n// import { ref, onMounted } from 'vue'\n  export default {\n    name: 'app',\n    components: {\n      gyroscopeSimulator\n    },\n    data: () => ({\n      parameters : {\n        \"l\" : {value: 5, min: 0, max: 20},\n        \"a\" : {value: 0.2, min: 0, max: 10},\n        \"h\" : {value: 0.2, min: 0, max: 10},\n        \"g\" : {value: -9.8, min: 0, max: 10},\n      },\n      solverParameters : {\n          \"stepSize\" : {value: 1/60},\n          \"numSteps\" : {value: 2400},\n          't0' : {value: 0}\n      },\n      animationParameters : {\n          \"rstride\" : 15,\n          \"cstride\" : 5,\n          \"nSample\" : 45,\n          \"dpi\" : 300,\n          \"transparency\" : 0.8\n      },\n      initialState : {\n          \"theta\" : {value: 0, min: 0, max: 6.28},\n          \"phi\" : {value: 0.2, min: 0, max: 6.28},\n          \"psi\" : {value: 0, min: 0, max: 6.28},\n          \"thetaVel\": {value: 0, min: 0, max: 12},\n          \"phiVel\": {value: 0, min: 0, max: 12},\n          \"psiVel\": {value: 0, min: 0, max: 200},\n          \"pTheta\" : {value : null},\n          \"pPhi\" : {value: null},\n          \"pPsi\" : {value: null}\n      },\n      solution: {\n        \"theta\" : [],\n        \"phi\" : [],\n        \"psi\" : []\n      }\n    }),\n    mounted(){\n        console.log(this.parameters)\n        console.log(Object.entries(this.parameters))\n        console.log(Object.fromEntries(Object.entries(this.parameters).filter(x => (x[0] != 'l') && (x[0] != 'a'))))\n      },\n    methods : {\n      gyroscope(t, stateVector) { // returns dstateVector/dt\n          let [theta, phi, psi, pTheta, pPhi, pPsi] = stateVector\n\n          // DON'T ANGER THE LINTER\n          theta = psi\n          psi = theta\n          \n          let phiVel = pPhi / this.parameters.l.value**2 \n          let thetaVel = (pTheta - (pPsi * Math.cos(phi)))/(this.parameters.a.value**2 * Math.sin(phi)**2) \n          let psiVel = (pPsi/this.parameters.a.value**2) - thetaVel * Math.cos(phi) \n\n          let pThetaDot = 0 \n          let pPhiDot = (this.parameters.l.value**2 - this.parameters.a.value**2)* Math.sin(phi) * Math.cos(phi) * thetaVel**2 - (this.parameters.g.value*this.parameters.l.value - this.parameters.a.value**2 * psiVel * thetaVel) * Math.sin(phi)\n          let pPsiDot = 0\n          return [thetaVel, phiVel, psiVel, pThetaDot, pPhiDot, pPsiDot];\n      },\n      getGeneralizedMomenta(){\n        this.initialState.pTheta.value = (this.parameters.l.value**2 * Math.sin(this.initialState.phi.value)**2 + this.parameters.a.value**2 * Math.cos(this.initialState.phi.value)**2)*this.initialState.thetaVel.value + this.parameters.a.value**2 * this.initialState.psiVel.value * Math.cos(this.initialState.phi.value)\n        this.initialState.pPhi.value = this.parameters.l.value**2 * this.initialState.phiVel.value\n        this.initialState.pPsi.value = this.parameters.a.value**2 * (this.initialState.thetaVel.value * Math.cos(this.initialState.phi.value) + this.initialState.psiVel.value)\n      },\n      rungeKutta(engine, state, t0, stepSize, numSteps) {\n          // Helper functions for rungeKutta solver\n          function numericAdd(a, b) {\n            return a.map((ai, i) => ai + b[i]);\n          }\n          function numericMul(scalar, vector) {\n              return vector.map(vi => scalar * vi);\n          }\n\n          // Variable Instantiation\n          const result = [];\n          result.push({ t: t0, state: state });\n\n          // Solve\n          for (let i = 1; i <= numSteps; i++) {\n              if((i % 10) == 0){('SOLVING STEP: ' + i + \"/\" + numSteps)}\n              const t = t0 + i * stepSize;\n              const k1 = numericMul(stepSize, engine(t0, state));\n              const k2 = numericMul(stepSize, engine(t0 + stepSize / 2, numericAdd(state, numericMul(0.5, k1))));\n              const k3 = numericMul(stepSize, engine(t0 + stepSize / 2, numericAdd(state, numericMul(0.5, k2))));\n              const k4 = numericMul(stepSize, engine(t0 + stepSize, numericAdd(state, k3)));\n\n              state = numericAdd(state, numericMul(1 / 6, numericAdd(k1, numericAdd(numericMul(2, k2), numericAdd(numericMul(2, k3), k4)))));\n              t0 = t;\n              result.push({ t, state: state });\n          }\n          return result;\n      },\n      runSolver(){\n        this.getGeneralizedMomenta()\n\n        let solution = this.rungeKutta(\n          this.gyroscope,\n          [this.initialState.theta.value, this.initialState.phi.value, this.initialState.psi.value, this.initialState.pTheta.value, this.initialState.pPhi.value, this.initialState.pPsi.value],\n          this.solverParameters.t0.value,\n          this.solverParameters.stepSize.value,\n          this.solverParameters.numSteps.value\n        )\n        console.log(solution)\n        console.log(this.solution)\n        for(let elem of solution){\n          this.solution.theta.push(elem.state[0])\n          this.solution.phi.push(elem.state[1])\n          this.solution.psi.push(elem.state[2])\n        }\n\n      }\n    }\n  }\n</script>\n\n<style>\n#app{\n  width: 100%;\n  height: 100%;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}