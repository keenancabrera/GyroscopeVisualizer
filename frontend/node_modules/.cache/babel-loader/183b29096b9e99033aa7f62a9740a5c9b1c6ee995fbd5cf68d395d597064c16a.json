{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { WebGLCoordinateSystem } from 'three';\nimport GLSLNodeBuilder from './nodes/GLSLNodeBuilder.js';\nimport Backend from '../common/Backend.js';\nimport WebGLAttributeUtils from './utils/WebGLAttributeUtils.js';\nimport WebGLState from './utils/WebGLState.js';\nimport WebGLUtils from './utils/WebGLUtils.js';\nimport WebGLTextureUtils from './utils/WebGLTextureUtils.js';\nimport WebGLExtensions from './utils/WebGLExtensions.js';\n\n//\n\nclass WebGLBackend extends Backend {\n  constructor(parameters = {}) {\n    super(parameters);\n  }\n  async init(renderer) {\n    await super.init(renderer);\n\n    //\n\n    const parameters = this.parameters;\n    const glContext = parameters.context !== undefined ? parameters.context : renderer.domElement.getContext('webgl2');\n    this.gl = glContext;\n    this.extensions = new WebGLExtensions(this);\n    this.attributeUtils = new WebGLAttributeUtils(this);\n    this.textureUtils = new WebGLTextureUtils(this);\n    this.state = new WebGLState(this);\n    this.utils = new WebGLUtils(this);\n    this.defaultTextures = {};\n    this.extensions.get('EXT_color_buffer_float');\n  }\n  get coordinateSystem() {\n    return WebGLCoordinateSystem;\n  }\n  beginRender(renderContext) {\n    const {\n      gl\n    } = this;\n\n    //\n\n    this._setFramebuffer(renderContext);\n    let clear = 0;\n    if (renderContext.clearColor) clear |= gl.COLOR_BUFFER_BIT;\n    if (renderContext.clearDepth) clear |= gl.DEPTH_BUFFER_BIT;\n    if (renderContext.clearStencil) clear |= gl.STENCIL_BUFFER_BIT;\n    const clearColor = renderContext.clearColorValue;\n    if (clear !== 0) {\n      if (renderContext.textures === null) {\n        gl.clearColor(clearColor.r, clearColor.g, clearColor.b, clearColor.a);\n        gl.clear(clear);\n      } else {\n        for (let i = 0; i < renderContext.textures.length; i++) {\n          gl.clearBufferfv(gl.COLOR, i, [clearColor.r, clearColor.g, clearColor.b, clearColor.a]);\n        }\n        gl.clearBufferfi(gl.DEPTH_STENCIL, 0, 1, 1);\n      }\n    }\n\n    //\n\n    if (renderContext.viewport) {\n      this.updateViewport(renderContext);\n    } else {\n      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n  }\n  finishRender( /*renderContext*/\n  ) {\n\n    //console.warn( 'Abstract class.' );\n  }\n  updateViewport(renderContext) {\n    const gl = this.gl;\n    const {\n      x,\n      y,\n      width,\n      height\n    } = renderContext.viewportValue;\n    gl.viewport(x, y, width, height);\n  }\n  clear( /*renderContext, color, depth, stencil*/\n  ) {\n    console.warn('Abstract class.');\n  }\n  beginCompute( /*computeGroup*/\n  ) {\n    console.warn('Abstract class.');\n  }\n  compute( /*computeGroup, computeNode, bindings, pipeline*/\n  ) {\n    console.warn('Abstract class.');\n  }\n  finishCompute( /*computeGroup*/\n  ) {\n    console.warn('Abstract class.');\n  }\n  draw(renderObject, info) {\n    const {\n      pipeline,\n      material\n    } = renderObject;\n    const {\n      programGPU,\n      vaoGPU\n    } = this.get(pipeline);\n    const {\n      gl,\n      state\n    } = this;\n\n    //\n\n    const bindings = renderObject.getBindings();\n    for (const binding of bindings) {\n      const bindingData = this.get(binding);\n      const index = bindingData.index;\n      if (binding.isUniformsGroup) {\n        gl.bindBufferBase(gl.UNIFORM_BUFFER, index, bindingData.bufferGPU);\n      } else if (binding.isSampledTexture) {\n        gl.activeTexture(gl.TEXTURE0 + index);\n        gl.bindTexture(bindingData.glTextureType, bindingData.textureGPU);\n      }\n    }\n    state.setMaterial(material);\n    gl.useProgram(programGPU);\n    gl.bindVertexArray(vaoGPU);\n\n    //\n\n    const index = renderObject.getIndex();\n    const object = renderObject.object;\n    const geometry = renderObject.geometry;\n    const drawRange = geometry.drawRange;\n    const firstVertex = drawRange.start;\n\n    //\n\n    let mode;\n    if (object.isPoints) mode = gl.POINTS;else if (object.isLine) mode = gl.LINES;else if (object.isLineLoop) mode = gl.LINE_LOOP;else if (object.isLineSegments) mode = gl.LINES;else mode = gl.TRIANGLES;\n\n    //\n\n    if (index !== null) {\n      const indexData = this.get(index);\n      const indexCount = drawRange.count !== Infinity ? drawRange.count : index.count;\n      gl.drawElements(mode, index.count, indexData.type, firstVertex);\n      info.update(object, indexCount, 1);\n    } else {\n      const positionAttribute = geometry.attributes.position;\n      const vertexCount = drawRange.count !== Infinity ? drawRange.count : positionAttribute.count;\n      gl.drawArrays(mode, 0, vertexCount);\n      //gl.drawArrays( mode, vertexCount, gl.UNSIGNED_SHORT, firstVertex );\n\n      info.update(object, vertexCount, 1);\n    }\n\n    //\n\n    gl.bindVertexArray(null);\n  }\n  needsUpdate(renderObject) {\n    return false;\n  }\n  getCacheKey(renderObject) {\n    return '';\n  }\n\n  // textures\n\n  createSampler( /*texture*/\n  ) {\n\n    //console.warn( 'Abstract class.' );\n  }\n  destroySampler( /*texture*/\n  ) {\n    console.warn('Abstract class.');\n  }\n  createDefaultTexture(texture) {\n    const {\n      gl,\n      textureUtils,\n      defaultTextures\n    } = this;\n    const glTextureType = textureUtils.getGLTextureType(texture);\n    let textureGPU = defaultTextures[glTextureType];\n    if (textureGPU === undefined) {\n      textureGPU = gl.createTexture();\n      gl.bindTexture(glTextureType, textureGPU);\n      gl.texParameteri(glTextureType, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(glTextureType, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n      //gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n      defaultTextures[glTextureType] = textureGPU;\n    }\n    this.set(texture, {\n      textureGPU,\n      glTextureType,\n      isDefault: true\n    });\n  }\n  createTexture(texture, options) {\n    const {\n      gl,\n      utils,\n      textureUtils\n    } = this;\n    const {\n      levels,\n      width,\n      height\n    } = options;\n    const glFormat = utils.convert(texture.format, texture.colorSpace);\n    const glType = utils.convert(texture.type);\n    const glInternalFormat = textureUtils.getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture);\n    const textureGPU = gl.createTexture();\n    const glTextureType = textureUtils.getGLTextureType(texture);\n    gl.bindTexture(glTextureType, textureGPU);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\n    textureUtils.setTextureParameters(glTextureType, texture);\n    gl.bindTexture(glTextureType, textureGPU);\n    if (!texture.isVideoTexture) {\n      gl.texStorage2D(glTextureType, levels, glInternalFormat, width, height);\n    }\n    this.set(texture, {\n      textureGPU,\n      glTextureType,\n      glFormat,\n      glType,\n      glInternalFormat\n    });\n  }\n  updateTexture(texture, options) {\n    const {\n      gl\n    } = this;\n    const {\n      width,\n      height\n    } = options;\n    const {\n      textureGPU,\n      glTextureType,\n      glFormat,\n      glType,\n      glInternalFormat\n    } = this.get(texture);\n    const getImage = source => {\n      if (source.isDataTexture) {\n        return source.image.data;\n      } else if (source instanceof ImageBitmap || source instanceof OffscreenCanvas) {\n        return source;\n      }\n      return source.data;\n    };\n    gl.bindTexture(glTextureType, textureGPU);\n    if (texture.isCubeTexture) {\n      const images = options.images;\n      for (let i = 0; i < 6; i++) {\n        const image = getImage(images[i]);\n        gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, width, height, glFormat, glType, image);\n      }\n    } else if (texture.isVideoTexture) {\n      texture.update();\n      gl.texImage2D(glTextureType, 0, glInternalFormat, glFormat, glType, options.image);\n    } else {\n      const image = getImage(options.image);\n      gl.texSubImage2D(glTextureType, 0, 0, 0, width, height, glFormat, glType, image);\n    }\n  }\n  generateMipmaps(texture) {\n    const {\n      gl\n    } = this;\n    const {\n      textureGPU,\n      glTextureType\n    } = this.get(texture);\n    gl.bindTexture(glTextureType, textureGPU);\n    gl.generateMipmap(glTextureType);\n  }\n  destroyTexture( /*texture*/\n  ) {\n    console.warn('Abstract class.');\n  }\n  copyTextureToBuffer( /*texture, x, y, width, height*/\n  ) {\n    console.warn('Abstract class.');\n  }\n\n  // node builder\n\n  createNodeBuilder(object, renderer, scene = null) {\n    return new GLSLNodeBuilder(object, renderer, scene);\n  }\n\n  // program\n\n  createProgram(program) {\n    const gl = this.gl;\n    const {\n      stage,\n      code\n    } = program;\n    const shader = stage === 'vertex' ? gl.createShader(gl.VERTEX_SHADER) : gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(shader, code);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      console.error('THREE.WebGLBackend:', gl.getShaderInfoLog(shader));\n    }\n    this.set(program, {\n      shaderGPU: shader\n    });\n  }\n  destroyProgram( /*program*/\n  ) {\n    console.warn('Abstract class.');\n  }\n  createRenderPipeline(renderObject) {\n    const gl = this.gl;\n    const pipeline = renderObject.pipeline;\n\n    // Program\n\n    const {\n      fragmentProgram,\n      vertexProgram\n    } = pipeline;\n    const programGPU = gl.createProgram();\n    gl.attachShader(programGPU, this.get(fragmentProgram).shaderGPU);\n    gl.attachShader(programGPU, this.get(vertexProgram).shaderGPU);\n    gl.linkProgram(programGPU);\n    if (gl.getProgramParameter(programGPU, gl.LINK_STATUS) === false) {\n      console.error('THREE.WebGLBackend:', gl.getProgramInfoLog(programGPU));\n    }\n    gl.useProgram(programGPU);\n\n    // Bindings\n\n    const bindings = renderObject.getBindings();\n    for (const binding of bindings) {\n      const bindingData = this.get(binding);\n      const index = bindingData.index;\n      if (binding.isUniformsGroup) {\n        const location = gl.getUniformBlockIndex(programGPU, binding.name);\n        gl.uniformBlockBinding(programGPU, location, index);\n      } else if (binding.isSampledTexture) {\n        const location = gl.getUniformLocation(programGPU, binding.name);\n        gl.uniform1i(location, index);\n      }\n    }\n\n    // VAO\n\n    const vaoGPU = gl.createVertexArray();\n    const index = renderObject.getIndex();\n    const vertexBuffers = renderObject.getVertexBuffers();\n    gl.bindVertexArray(vaoGPU);\n    if (index !== null) {\n      const indexData = this.get(index);\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexData.bufferGPU);\n    }\n    for (let i = 0; i < vertexBuffers.length; i++) {\n      const attribute = vertexBuffers[i];\n      const attributeData = this.get(attribute);\n      gl.bindBuffer(gl.ARRAY_BUFFER, attributeData.bufferGPU);\n      gl.enableVertexAttribArray(i);\n      gl.vertexAttribPointer(i, attribute.itemSize, attributeData.type, false, 0, 0);\n    }\n    gl.bindVertexArray(null);\n\n    //\n\n    this.set(pipeline, {\n      programGPU,\n      vaoGPU\n    });\n  }\n  createComputePipeline( /*computePipeline, bindings*/\n  ) {\n    console.warn('Abstract class.');\n  }\n  createBindings(bindings) {\n    this.updateBindings(bindings);\n  }\n  updateBindings(bindings) {\n    const {\n      gl\n    } = this;\n    let groupIndex = 0;\n    let textureIndex = 0;\n    for (const binding of bindings) {\n      if (binding.isUniformsGroup) {\n        const bufferGPU = gl.createBuffer();\n        const data = binding.buffer;\n        gl.bindBuffer(gl.UNIFORM_BUFFER, bufferGPU);\n        gl.bufferData(gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW);\n        gl.bindBufferBase(gl.UNIFORM_BUFFER, groupIndex, bufferGPU);\n        this.set(binding, {\n          index: groupIndex++,\n          bufferGPU\n        });\n      } else if (binding.isSampledTexture) {\n        const {\n          textureGPU,\n          glTextureType\n        } = this.get(binding.texture);\n        this.set(binding, {\n          index: textureIndex++,\n          textureGPU,\n          glTextureType\n        });\n      }\n    }\n  }\n  updateBinding(binding) {\n    const gl = this.gl;\n    if (binding.isUniformsGroup) {\n      const bindingData = this.get(binding);\n      const bufferGPU = bindingData.bufferGPU;\n      const data = binding.buffer;\n      gl.bindBuffer(gl.UNIFORM_BUFFER, bufferGPU);\n      gl.bufferData(gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW);\n    }\n  }\n\n  // attributes\n\n  createIndexAttribute(attribute) {\n    const gl = this.gl;\n    this.attributeUtils.createAttribute(attribute, gl.ELEMENT_ARRAY_BUFFER);\n  }\n  createAttribute(attribute) {\n    const gl = this.gl;\n    this.attributeUtils.createAttribute(attribute, gl.ARRAY_BUFFER);\n  }\n  createStorageAttribute( /*attribute*/\n  ) {\n    console.warn('Abstract class.');\n  }\n  updateAttribute( /*attribute*/\n  ) {\n    console.warn('Abstract class.');\n  }\n  destroyAttribute( /*attribute*/\n  ) {\n    console.warn('Abstract class.');\n  }\n  updateSize() {\n\n    //console.warn( 'Abstract class.' );\n  }\n  hasFeature(name) {\n    return true;\n  }\n  copyFramebufferToTexture( /*texture, renderContext*/\n  ) {\n    console.warn('Abstract class.');\n  }\n  _setFramebuffer(renderContext) {\n    const {\n      gl\n    } = this;\n    if (renderContext.textures !== null) {\n      const renderContextData = this.get(renderContext);\n      let fb = renderContextData.framebuffer;\n      if (fb === undefined) {\n        fb = gl.createFramebuffer();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n        const textures = renderContext.textures;\n        const drawBuffers = [];\n        for (let i = 0; i < textures.length; i++) {\n          const texture = textures[i];\n          const {\n            textureGPU\n          } = this.get(texture);\n          const attachment = gl.COLOR_ATTACHMENT0 + i;\n          gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.TEXTURE_2D, textureGPU, 0);\n          drawBuffers.push(attachment);\n        }\n        gl.drawBuffers(drawBuffers);\n        if (renderContext.depthTexture !== null) {\n          const {\n            textureGPU\n          } = this.get(renderContext.depthTexture);\n          gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, textureGPU, 0);\n        }\n        renderContextData.framebuffer = fb;\n      } else {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n      }\n    } else {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    }\n  }\n}\nexport default WebGLBackend;","map":{"version":3,"names":["WebGLCoordinateSystem","GLSLNodeBuilder","Backend","WebGLAttributeUtils","WebGLState","WebGLUtils","WebGLTextureUtils","WebGLExtensions","WebGLBackend","constructor","parameters","init","renderer","glContext","context","undefined","domElement","getContext","gl","extensions","attributeUtils","textureUtils","state","utils","defaultTextures","get","coordinateSystem","beginRender","renderContext","_setFramebuffer","clear","clearColor","COLOR_BUFFER_BIT","clearDepth","DEPTH_BUFFER_BIT","clearStencil","STENCIL_BUFFER_BIT","clearColorValue","textures","r","g","b","a","i","length","clearBufferfv","COLOR","clearBufferfi","DEPTH_STENCIL","viewport","updateViewport","drawingBufferWidth","drawingBufferHeight","finishRender","x","y","width","height","viewportValue","console","warn","beginCompute","compute","finishCompute","draw","renderObject","info","pipeline","material","programGPU","vaoGPU","bindings","getBindings","binding","bindingData","index","isUniformsGroup","bindBufferBase","UNIFORM_BUFFER","bufferGPU","isSampledTexture","activeTexture","TEXTURE0","bindTexture","glTextureType","textureGPU","setMaterial","useProgram","bindVertexArray","getIndex","object","geometry","drawRange","firstVertex","start","mode","isPoints","POINTS","isLine","LINES","isLineLoop","LINE_LOOP","isLineSegments","TRIANGLES","indexData","indexCount","count","Infinity","drawElements","type","update","positionAttribute","attributes","position","vertexCount","drawArrays","needsUpdate","getCacheKey","createSampler","destroySampler","createDefaultTexture","texture","getGLTextureType","createTexture","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","set","isDefault","options","levels","glFormat","convert","format","colorSpace","glType","glInternalFormat","getInternalFormat","internalFormat","isVideoTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","flipY","UNPACK_PREMULTIPLY_ALPHA_WEBGL","premultiplyAlpha","UNPACK_ALIGNMENT","unpackAlignment","UNPACK_COLORSPACE_CONVERSION_WEBGL","NONE","setTextureParameters","texStorage2D","updateTexture","getImage","source","isDataTexture","image","data","ImageBitmap","OffscreenCanvas","isCubeTexture","images","texSubImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","texImage2D","generateMipmaps","generateMipmap","destroyTexture","copyTextureToBuffer","createNodeBuilder","scene","createProgram","program","stage","code","shader","createShader","VERTEX_SHADER","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","error","getShaderInfoLog","shaderGPU","destroyProgram","createRenderPipeline","fragmentProgram","vertexProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","location","getUniformBlockIndex","name","uniformBlockBinding","getUniformLocation","uniform1i","createVertexArray","vertexBuffers","getVertexBuffers","bindBuffer","ELEMENT_ARRAY_BUFFER","attribute","attributeData","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","itemSize","createComputePipeline","createBindings","updateBindings","groupIndex","textureIndex","createBuffer","buffer","bufferData","DYNAMIC_DRAW","updateBinding","createIndexAttribute","createAttribute","createStorageAttribute","updateAttribute","destroyAttribute","updateSize","hasFeature","copyFramebufferToTexture","renderContextData","fb","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","drawBuffers","attachment","COLOR_ATTACHMENT0","framebufferTexture2D","TEXTURE_2D","push","depthTexture","DEPTH_ATTACHMENT"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/renderers/webgl/WebGLBackend.js"],"sourcesContent":["import { WebGLCoordinateSystem } from 'three';\n\nimport GLSLNodeBuilder from './nodes/GLSLNodeBuilder.js';\nimport Backend from '../common/Backend.js';\n\nimport WebGLAttributeUtils from './utils/WebGLAttributeUtils.js';\nimport WebGLState from './utils/WebGLState.js';\nimport WebGLUtils from './utils/WebGLUtils.js';\nimport WebGLTextureUtils from './utils/WebGLTextureUtils.js';\nimport WebGLExtensions from './utils/WebGLExtensions.js';\n\n//\n\nclass WebGLBackend extends Backend {\n\n\tconstructor( parameters = {} ) {\n\n\t\tsuper( parameters );\n\n\t}\n\n\tasync init( renderer ) {\n\n\t\tawait super.init( renderer );\n\n\t\t//\n\n\t\tconst parameters = this.parameters;\n\n\t\tconst glContext = ( parameters.context !== undefined ) ? parameters.context : renderer.domElement.getContext( 'webgl2' );\n\n\t\tthis.gl = glContext;\n\n\t\tthis.extensions = new WebGLExtensions( this );\n\t\tthis.attributeUtils = new WebGLAttributeUtils( this );\n\t\tthis.textureUtils = new WebGLTextureUtils( this );\n\t\tthis.state = new WebGLState( this );\n\t\tthis.utils = new WebGLUtils( this );\n\t\tthis.defaultTextures = {};\n\n\t\tthis.extensions.get( 'EXT_color_buffer_float' );\n\n\t}\n\n\tget coordinateSystem() {\n\n\t\treturn WebGLCoordinateSystem;\n\n\t}\n\n\tbeginRender( renderContext ) {\n\n\t\tconst { gl } = this;\n\n\t\t//\n\n\t\tthis._setFramebuffer( renderContext );\n\n\t\tlet clear = 0;\n\n\t\tif ( renderContext.clearColor ) clear |= gl.COLOR_BUFFER_BIT;\n\t\tif ( renderContext.clearDepth ) clear |= gl.DEPTH_BUFFER_BIT;\n\t\tif ( renderContext.clearStencil ) clear |= gl.STENCIL_BUFFER_BIT;\n\n\t\tconst clearColor = renderContext.clearColorValue;\n\n\t\tif ( clear !== 0 ) {\n\n\t\t\tif ( renderContext.textures === null ) {\n\n\t\t\t\tgl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearColor.a );\n\t\t\t\tgl.clear( clear );\n\n\t\t\t} else {\n\n\t\t\t\tfor ( let i = 0; i < renderContext.textures.length; i ++ ) {\n\n\t\t\t\t\tgl.clearBufferfv( gl.COLOR, i, [ clearColor.r, clearColor.g, clearColor.b, clearColor.a ] );\n\n\t\t\t\t}\n\n\t\t\t\tgl.clearBufferfi( gl.DEPTH_STENCIL, 0, 1, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( renderContext.viewport ) {\n\n\t\t\tthis.updateViewport( renderContext );\n\n\t\t} else {\n\n\t\t\tgl.viewport( 0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight );\n\n\t\t}\n\n\t}\n\n\tfinishRender( /*renderContext*/ ) {\n\n\t\t//console.warn( 'Abstract class.' );\n\n\t}\n\n\tupdateViewport( renderContext ) {\n\n\t\tconst gl = this.gl;\n\t\tconst { x, y, width, height } = renderContext.viewportValue;\n\n\t\tgl.viewport( x, y, width, height );\n\n\t}\n\n\tclear( /*renderContext, color, depth, stencil*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\tbeginCompute( /*computeGroup*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\tcompute( /*computeGroup, computeNode, bindings, pipeline*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\tfinishCompute( /*computeGroup*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\tdraw( renderObject, info ) {\n\n\t\tconst { pipeline, material } = renderObject;\n\t\tconst { programGPU, vaoGPU } = this.get( pipeline );\n\n\t\tconst { gl, state } = this;\n\n\t\t//\n\n\t\tconst bindings = renderObject.getBindings();\n\n\t\tfor ( const binding of bindings ) {\n\n\t\t\tconst bindingData = this.get( binding );\n\t\t\tconst index = bindingData.index;\n\n\t\t\tif ( binding.isUniformsGroup ) {\n\n\t\t\t\tgl.bindBufferBase( gl.UNIFORM_BUFFER, index, bindingData.bufferGPU );\n\n\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\tgl.activeTexture( gl.TEXTURE0 + index );\n\t\t\t\tgl.bindTexture( bindingData.glTextureType, bindingData.textureGPU );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.setMaterial( material );\n\n\t\tgl.useProgram( programGPU );\n\t\tgl.bindVertexArray( vaoGPU );\n\n\t\t//\n\n\t\tconst index = renderObject.getIndex();\n\n\t\tconst object = renderObject.object;\n\t\tconst geometry = renderObject.geometry;\n\t\tconst drawRange = geometry.drawRange;\n\t\tconst firstVertex = drawRange.start;\n\n\t\t//\n\n\t\tlet mode;\n\t\tif ( object.isPoints ) mode = gl.POINTS;\n\t\telse if ( object.isLine ) mode = gl.LINES;\n\t\telse if ( object.isLineLoop ) mode = gl.LINE_LOOP;\n\t\telse if ( object.isLineSegments ) mode = gl.LINES;\n\t\telse mode = gl.TRIANGLES;\n\n\t\t//\n\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst indexData = this.get( index );\n\n\t\t\tconst indexCount = ( drawRange.count !== Infinity ) ? drawRange.count : index.count;\n\n\t\t\tgl.drawElements( mode, index.count, indexData.type, firstVertex );\n\n\t\t\tinfo.update( object, indexCount, 1 );\n\n\t\t} else {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst vertexCount = ( drawRange.count !== Infinity ) ? drawRange.count : positionAttribute.count;\n\n\n\t\t\tgl.drawArrays( mode, 0, vertexCount );\n\t\t\t//gl.drawArrays( mode, vertexCount, gl.UNSIGNED_SHORT, firstVertex );\n\n\t\t\tinfo.update( object, vertexCount, 1 );\n\n\t\t}\n\n\n\n\t\t//\n\n\t\tgl.bindVertexArray( null );\n\n\t}\n\n\tneedsUpdate( renderObject ) {\n\n\t\treturn false;\n\n\t}\n\n\tgetCacheKey( renderObject ) {\n\n\t\treturn '';\n\n\t}\n\n\t// textures\n\n\tcreateSampler( /*texture*/ ) {\n\n\t\t//console.warn( 'Abstract class.' );\n\n\t}\n\n\tdestroySampler( /*texture*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\tcreateDefaultTexture( texture ) {\n\n\t\tconst { gl, textureUtils, defaultTextures } = this;\n\n\t\tconst glTextureType = textureUtils.getGLTextureType( texture );\n\n\t\tlet textureGPU = defaultTextures[ glTextureType ];\n\n\t\tif ( textureGPU === undefined ) {\n\n\t\t\ttextureGPU = gl.createTexture();\n\n\t\t\tgl.bindTexture( glTextureType, textureGPU );\n\t\t\tgl.texParameteri( glTextureType, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( glTextureType, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\t\t//gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t\tdefaultTextures[ glTextureType ] = textureGPU;\n\n\t\t}\n\n\t\tthis.set( texture, {\n\t\t\ttextureGPU,\n\t\t\tglTextureType,\n\t\t\tisDefault: true\n\t\t} );\n\n\t}\n\n\tcreateTexture( texture, options ) {\n\n\t\tconst { gl, utils, textureUtils } = this;\n\t\tconst { levels, width, height } = options;\n\n\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\n\t\tconst glType = utils.convert( texture.type );\n\t\tconst glInternalFormat = textureUtils.getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture );\n\n\t\tconst textureGPU = gl.createTexture();\n\t\tconst glTextureType = textureUtils.getGLTextureType( texture );\n\n\t\tgl.bindTexture( glTextureType, textureGPU );\n\n\t\tgl.pixelStorei( gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\tgl.pixelStorei( gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\tgl.pixelStorei( gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\tgl.pixelStorei( gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE );\n\n\t\ttextureUtils.setTextureParameters( glTextureType, texture );\n\n\t\tgl.bindTexture( glTextureType, textureGPU );\n\n\t\tif ( ! texture.isVideoTexture ) {\n\n\t\t\tgl.texStorage2D( glTextureType, levels, glInternalFormat, width, height );\n\n\t\t}\n\n\t\tthis.set( texture, {\n\t\t\ttextureGPU,\n\t\t\tglTextureType,\n\t\t\tglFormat,\n\t\t\tglType,\n\t\t\tglInternalFormat\n\t\t} );\n\n\t}\n\n\tupdateTexture( texture, options ) {\n\n\t\tconst { gl } = this;\n\t\tconst { width, height } = options;\n\t\tconst { textureGPU, glTextureType, glFormat, glType, glInternalFormat } = this.get( texture );\n\n\t\tconst getImage = ( source ) => {\n\n\t\t\tif ( source.isDataTexture ) {\n\n\t\t\t\treturn source.image.data;\n\n\t\t\t} else if ( source instanceof ImageBitmap || source instanceof OffscreenCanvas ) {\n\n\t\t\t\treturn source;\n\n\t\t\t}\n\n\t\t\treturn source.data;\n\n\t\t};\n\n\t\tgl.bindTexture( glTextureType, textureGPU );\n\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\tconst images = options.images;\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tconst image = getImage( images[ i ] );\n\n\t\t\t\tgl.texSubImage2D( gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, width, height, glFormat, glType, image );\n\n\t\t\t}\n\n\t\t} else if ( texture.isVideoTexture ) {\n\n\t\t\ttexture.update();\n\n\t\t\tgl.texImage2D( glTextureType, 0, glInternalFormat, glFormat, glType, options.image );\n\n\n\t\t} else {\n\n\t\t\tconst image = getImage( options.image );\n\n\t\t\tgl.texSubImage2D( glTextureType, 0, 0, 0, width, height, glFormat, glType, image );\n\n\t\t}\n\n\t}\n\n\tgenerateMipmaps( texture ) {\n\n\t\tconst { gl } = this;\n\t\tconst { textureGPU, glTextureType } = this.get( texture );\n\n\t\tgl.bindTexture( glTextureType, textureGPU );\n\t\tgl.generateMipmap( glTextureType );\n\n\t}\n\n\tdestroyTexture( /*texture*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\tcopyTextureToBuffer( /*texture, x, y, width, height*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\t// node builder\n\n\tcreateNodeBuilder( object, renderer, scene = null ) {\n\n\t\treturn new GLSLNodeBuilder( object, renderer, scene );\n\n\t}\n\n\t// program\n\n\tcreateProgram( program ) {\n\n\t\tconst gl = this.gl;\n\t\tconst { stage, code } = program;\n\n\t\tconst shader = stage === 'vertex' ? gl.createShader( gl.VERTEX_SHADER ) : gl.createShader( gl.FRAGMENT_SHADER );\n\n\t\tgl.shaderSource( shader, code );\n\t\tgl.compileShader( shader );\n\n\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLBackend:', gl.getShaderInfoLog( shader ) );\n\n\t\t}\n\n\t\tthis.set( program, {\n\t\t\tshaderGPU: shader\n\t\t} );\n\n\t}\n\n\tdestroyProgram( /*program*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\tcreateRenderPipeline( renderObject ) {\n\n\t\tconst gl = this.gl;\n\t\tconst pipeline = renderObject.pipeline;\n\n\t\t// Program\n\n\t\tconst { fragmentProgram, vertexProgram } = pipeline;\n\n\t\tconst programGPU = gl.createProgram();\n\t\tgl.attachShader( programGPU, this.get( fragmentProgram ).shaderGPU );\n\t\tgl.attachShader( programGPU, this.get( vertexProgram ).shaderGPU );\n\t\tgl.linkProgram( programGPU );\n\n\t\tif ( gl.getProgramParameter( programGPU, gl.LINK_STATUS ) === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLBackend:', gl.getProgramInfoLog( programGPU ) );\n\n\t\t}\n\n\t\tgl.useProgram( programGPU );\n\n\t\t// Bindings\n\n\t\tconst bindings = renderObject.getBindings();\n\n\t\tfor ( const binding of bindings ) {\n\n\t\t\tconst bindingData = this.get( binding );\n\t\t\tconst index = bindingData.index;\n\n\t\t\tif ( binding.isUniformsGroup ) {\n\n\t\t\t\tconst location = gl.getUniformBlockIndex( programGPU, binding.name );\n\t\t\t\tgl.uniformBlockBinding( programGPU, location, index );\n\n\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\tconst location = gl.getUniformLocation( programGPU, binding.name );\n\t\t\t\tgl.uniform1i( location, index );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// VAO\n\n\t\tconst vaoGPU = gl.createVertexArray();\n\n\t\tconst index = renderObject.getIndex();\n\t\tconst vertexBuffers = renderObject.getVertexBuffers();\n\n\t\tgl.bindVertexArray( vaoGPU );\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst indexData = this.get( index );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, indexData.bufferGPU );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < vertexBuffers.length; i ++ ) {\n\n\t\t\tconst attribute = vertexBuffers[ i ];\n\t\t\tconst attributeData = this.get( attribute );\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, attributeData.bufferGPU );\n\t\t\tgl.enableVertexAttribArray( i );\n\t\t\tgl.vertexAttribPointer( i, attribute.itemSize, attributeData.type, false, 0, 0 );\n\n\t\t}\n\n\t\tgl.bindVertexArray( null );\n\n\t\t//\n\n\t\tthis.set( pipeline, {\n\t\t\tprogramGPU,\n\t\t\tvaoGPU\n\t\t} );\n\n\t}\n\n\tcreateComputePipeline( /*computePipeline, bindings*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\tcreateBindings( bindings ) {\n\n\t\tthis.updateBindings( bindings );\n\n\t}\n\n\tupdateBindings( bindings ) {\n\n\t\tconst { gl } = this;\n\n\t\tlet groupIndex = 0;\n\t\tlet textureIndex = 0;\n\n\t\tfor ( const binding of bindings ) {\n\n\t\t\tif ( binding.isUniformsGroup ) {\n\n\t\t\t\tconst bufferGPU = gl.createBuffer();\n\t\t\t\tconst data = binding.buffer;\n\n\t\t\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, bufferGPU );\n\t\t\t\tgl.bufferData( gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW );\n\t\t\t\tgl.bindBufferBase( gl.UNIFORM_BUFFER, groupIndex, bufferGPU );\n\n\t\t\t\tthis.set( binding, {\n\t\t\t\t\tindex: groupIndex ++,\n\t\t\t\t\tbufferGPU\n\t\t\t\t} );\n\n\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\tconst { textureGPU, glTextureType } = this.get( binding.texture );\n\n\t\t\t\tthis.set( binding, {\n\t\t\t\t\tindex: textureIndex ++,\n\t\t\t\t\ttextureGPU,\n\t\t\t\t\tglTextureType\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdateBinding( binding ) {\n\n\t\tconst gl = this.gl;\n\n\t\tif ( binding.isUniformsGroup ) {\n\n\t\t\tconst bindingData = this.get( binding );\n\t\t\tconst bufferGPU = bindingData.bufferGPU;\n\t\t\tconst data = binding.buffer;\n\n\t\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, bufferGPU );\n\t\t\tgl.bufferData( gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW );\n\n\t\t}\n\n\t}\n\n\t// attributes\n\n\tcreateIndexAttribute( attribute ) {\n\n\t\tconst gl = this.gl;\n\n\t\tthis.attributeUtils.createAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n\t}\n\n\tcreateAttribute( attribute ) {\n\n\t\tconst gl = this.gl;\n\n\t\tthis.attributeUtils.createAttribute( attribute, gl.ARRAY_BUFFER );\n\n\t}\n\n\tcreateStorageAttribute( /*attribute*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\tupdateAttribute( /*attribute*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\tdestroyAttribute( /*attribute*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\tupdateSize() {\n\n\t\t//console.warn( 'Abstract class.' );\n\n\t}\n\n\thasFeature( name ) {\n\n\t\treturn true;\n\n\t}\n\n\tcopyFramebufferToTexture( /*texture, renderContext*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\t_setFramebuffer( renderContext ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\tconst renderContextData = this.get( renderContext );\n\n\t\t\tlet fb = renderContextData.framebuffer;\n\n\t\t\tif ( fb === undefined ) {\n\n\t\t\t\tfb = gl.createFramebuffer();\n\n\t\t\t\tgl.bindFramebuffer( gl.FRAMEBUFFER, fb );\n\n\t\t\t\tconst textures = renderContext.textures;\n\n\t\t\t\tconst drawBuffers = [];\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i++ ) {\n\n\t\t\t\t\tconst texture = textures[ i ];\n\t\t\t\t\tconst { textureGPU } = this.get( texture );\n\n\t\t\t\t\tconst attachment = gl.COLOR_ATTACHMENT0 + i;\n\n\t\t\t\t\tgl.framebufferTexture2D( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.TEXTURE_2D, textureGPU, 0 );\n\n\t\t\t\t\tdrawBuffers.push( attachment );\n\n\t\t\t\t}\n\n\t\t\t\tgl.drawBuffers( drawBuffers );\n\n\t\t\t\tif ( renderContext.depthTexture !== null ) {\n\n\t\t\t\t\tconst { textureGPU } = this.get( renderContext.depthTexture );\n\n\t\t\t\t\tgl.framebufferTexture2D( gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, textureGPU, 0 );\n\n\t\t\t\t}\n\n\t\t\t\trenderContextData.framebuffer = fb;\n\n\t\t\t} else {\n\n\t\t\t\tgl.bindFramebuffer( gl.FRAMEBUFFER, fb );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl.bindFramebuffer( gl.FRAMEBUFFER, null );\n\n\t\t}\n\n\t}\n\n}\n\nexport default WebGLBackend;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}