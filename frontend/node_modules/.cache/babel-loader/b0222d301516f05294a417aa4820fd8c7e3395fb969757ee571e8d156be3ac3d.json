{"ast":null,"code":"import TempNode from '../core/TempNode.js';\nimport { add } from '../math/OperatorNode.js';\nimport { bitangentView } from '../accessors/BitangentNode.js';\nimport { modelNormalMatrix } from '../accessors/ModelNode.js';\nimport { normalView } from '../accessors/NormalNode.js';\nimport { positionView } from '../accessors/PositionNode.js';\nimport { tangentView } from '../accessors/TangentNode.js';\nimport { uv } from '../accessors/UVNode.js';\nimport { faceDirection } from './FrontFacingNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { tslFn, nodeProxy, vec3, mat3 } from '../shadernode/ShaderNode.js';\nimport { TangentSpaceNormalMap, ObjectSpaceNormalMap } from 'three';\n\n// Normal Mapping Without Precomputed Tangents\n// http://www.thetenthplanet.de/archives/1180\n\nconst perturbNormal2Arb = tslFn(inputs => {\n  const {\n    eye_pos,\n    surf_norm,\n    mapN,\n    uv\n  } = inputs;\n  const q0 = eye_pos.dFdx();\n  const q1 = eye_pos.dFdy();\n  const st0 = uv.dFdx();\n  const st1 = uv.dFdy();\n  const N = surf_norm; // normalized\n\n  const q1perp = q1.cross(N);\n  const q0perp = N.cross(q0);\n  const T = q1perp.mul(st0.x).add(q0perp.mul(st1.x));\n  const B = q1perp.mul(st0.y).add(q0perp.mul(st1.y));\n  const det = T.dot(T).max(B.dot(B));\n  const scale = faceDirection.mul(det.inverseSqrt());\n  return add(T.mul(mapN.x, scale), B.mul(mapN.y, scale), N.mul(mapN.z)).normalize();\n});\nclass NormalMapNode extends TempNode {\n  constructor(node, scaleNode = null) {\n    super('vec3');\n    this.node = node;\n    this.scaleNode = scaleNode;\n    this.normalMapType = TangentSpaceNormalMap;\n  }\n  setup(builder) {\n    const {\n      normalMapType,\n      scaleNode\n    } = this;\n    let normalMap = this.node.mul(2.0).sub(1.0);\n    if (scaleNode !== null) {\n      normalMap = vec3(normalMap.xy.mul(scaleNode), normalMap.z);\n    }\n    let outputNode = null;\n    if (normalMapType === ObjectSpaceNormalMap) {\n      outputNode = modelNormalMatrix.mul(normalMap).normalize();\n    } else if (normalMapType === TangentSpaceNormalMap) {\n      const tangent = builder.hasGeometryAttribute('tangent');\n      if (tangent === true) {\n        outputNode = TBNViewMatrix.mul(normalMap).normalize();\n      } else {\n        outputNode = perturbNormal2Arb({\n          eye_pos: positionView,\n          surf_norm: normalView,\n          mapN: normalMap,\n          uv: uv()\n        });\n      }\n    }\n    return outputNode;\n  }\n}\nexport default NormalMapNode;\nexport const normalMap = nodeProxy(NormalMapNode);\nexport const TBNViewMatrix = mat3(tangentView, bitangentView, normalView);\naddNodeClass('NormalMapNode', NormalMapNode);","map":{"version":3,"names":["TempNode","add","bitangentView","modelNormalMatrix","normalView","positionView","tangentView","uv","faceDirection","addNodeClass","tslFn","nodeProxy","vec3","mat3","TangentSpaceNormalMap","ObjectSpaceNormalMap","perturbNormal2Arb","inputs","eye_pos","surf_norm","mapN","q0","dFdx","q1","dFdy","st0","st1","N","q1perp","cross","q0perp","T","mul","x","B","y","det","dot","max","scale","inverseSqrt","z","normalize","NormalMapNode","constructor","node","scaleNode","normalMapType","setup","builder","normalMap","sub","xy","outputNode","tangent","hasGeometryAttribute","TBNViewMatrix"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/nodes/display/NormalMapNode.js"],"sourcesContent":["import TempNode from '../core/TempNode.js';\nimport { add } from '../math/OperatorNode.js';\nimport { bitangentView } from '../accessors/BitangentNode.js';\nimport { modelNormalMatrix } from '../accessors/ModelNode.js';\nimport { normalView } from '../accessors/NormalNode.js';\nimport { positionView } from '../accessors/PositionNode.js';\nimport { tangentView } from '../accessors/TangentNode.js';\nimport { uv } from '../accessors/UVNode.js';\nimport { faceDirection } from './FrontFacingNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { tslFn, nodeProxy, vec3, mat3 } from '../shadernode/ShaderNode.js';\n\nimport { TangentSpaceNormalMap, ObjectSpaceNormalMap } from 'three';\n\n// Normal Mapping Without Precomputed Tangents\n// http://www.thetenthplanet.de/archives/1180\n\nconst perturbNormal2Arb = tslFn( ( inputs ) => {\n\n\tconst { eye_pos, surf_norm, mapN, uv } = inputs;\n\n\tconst q0 = eye_pos.dFdx();\n\tconst q1 = eye_pos.dFdy();\n\tconst st0 = uv.dFdx();\n\tconst st1 = uv.dFdy();\n\n\tconst N = surf_norm; // normalized\n\n\tconst q1perp = q1.cross( N );\n\tconst q0perp = N.cross( q0 );\n\n\tconst T = q1perp.mul( st0.x ).add( q0perp.mul( st1.x ) );\n\tconst B = q1perp.mul( st0.y ).add( q0perp.mul( st1.y ) );\n\n\tconst det = T.dot( T ).max( B.dot( B ) );\n\tconst scale = faceDirection.mul( det.inverseSqrt() );\n\n\treturn add( T.mul( mapN.x, scale ), B.mul( mapN.y, scale ), N.mul( mapN.z ) ).normalize();\n\n} );\n\nclass NormalMapNode extends TempNode {\n\n\tconstructor( node, scaleNode = null ) {\n\n\t\tsuper( 'vec3' );\n\n\t\tthis.node = node;\n\t\tthis.scaleNode = scaleNode;\n\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst { normalMapType, scaleNode } = this;\n\n\t\tlet normalMap = this.node.mul( 2.0 ).sub( 1.0 );\n\n\t\tif ( scaleNode !== null ) {\n\n\t\t\tnormalMap = vec3( normalMap.xy.mul( scaleNode ), normalMap.z );\n\n\t\t}\n\n\t\tlet outputNode = null;\n\n\t\tif ( normalMapType === ObjectSpaceNormalMap ) {\n\n\t\t\toutputNode = modelNormalMatrix.mul( normalMap ).normalize();\n\n\t\t} else if ( normalMapType === TangentSpaceNormalMap ) {\n\n\t\t\tconst tangent = builder.hasGeometryAttribute( 'tangent' );\n\n\t\t\tif ( tangent === true ) {\n\n\t\t\t\toutputNode = TBNViewMatrix.mul( normalMap ).normalize();\n\n\t\t\t} else {\n\n\t\t\t\toutputNode = perturbNormal2Arb( {\n\t\t\t\t\teye_pos: positionView,\n\t\t\t\t\tsurf_norm: normalView,\n\t\t\t\t\tmapN: normalMap,\n\t\t\t\t\tuv: uv()\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn outputNode;\n\n\t}\n\n}\n\nexport default NormalMapNode;\n\nexport const normalMap = nodeProxy( NormalMapNode );\n\nexport const TBNViewMatrix = mat3( tangentView, bitangentView, normalView );\n\naddNodeClass( 'NormalMapNode', NormalMapNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}