{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { EventDispatcher } from 'three';\nimport { NodeUpdateType } from './constants.js';\nimport { getNodeChildren, getCacheKey } from './NodeUtils.js';\nimport { MathUtils } from 'three';\nconst NodeClasses = new Map();\nlet _nodeId = 0;\nclass Node extends EventDispatcher {\n  constructor(nodeType = null) {\n    super();\n    this.nodeType = nodeType;\n    this.updateType = NodeUpdateType.NONE;\n    this.updateBeforeType = NodeUpdateType.NONE;\n    this.uuid = MathUtils.generateUUID();\n    this.isNode = true;\n    Object.defineProperty(this, 'id', {\n      value: _nodeId++\n    });\n  }\n  get type() {\n    return this.constructor.type;\n  }\n  getSelf() {\n    // Returns non-node object.\n\n    return this.self || this;\n  }\n  updateReference() {\n    return this;\n  }\n  isGlobal( /*builder*/\n  ) {\n    return false;\n  }\n  *getChildren() {\n    const self = this;\n    for (const {\n      property,\n      index,\n      childNode\n    } of getNodeChildren(this)) {\n      yield {\n        childNode,\n        replaceNode(node) {\n          if (index === undefined) self[property] = node;else self[property][index] = node;\n        }\n      };\n    }\n  }\n  dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n  traverse(callback, replaceNode = null) {\n    callback(this, replaceNode);\n    for (const {\n      childNode,\n      replaceNode\n    } of this.getChildren()) {\n      childNode.traverse(callback, replaceNode);\n    }\n  }\n  getCacheKey() {\n    return getCacheKey(this);\n  }\n  getHash( /*builder*/\n  ) {\n    return this.uuid;\n  }\n  getUpdateType() {\n    return this.updateType;\n  }\n  getUpdateBeforeType() {\n    return this.updateBeforeType;\n  }\n  getNodeType(builder) {\n    const nodeProperties = builder.getNodeProperties(this);\n    if (nodeProperties.outputNode) {\n      return nodeProperties.outputNode.getNodeType(builder);\n    }\n    return this.nodeType;\n  }\n  getShared(builder) {\n    const hash = this.getHash(builder);\n    const nodeFromHash = builder.getNodeFromHash(hash);\n    return nodeFromHash || this;\n  }\n  setup(builder) {\n    const nodeProperties = builder.getNodeProperties(this);\n    for (const {\n      childNode\n    } of this.getChildren()) {\n      nodeProperties['_node' + childNode.id] = childNode;\n    }\n\n    // return a outputNode if exists\n    return null;\n  }\n  construct(builder) {\n    // @deprecated, r157\n\n    console.warn('THREE.Node: construct() is deprecated. Use setup() instead.');\n    return this.setup(builder);\n  }\n  analyze(builder) {\n    const nodeData = builder.getDataFromNode(this);\n    nodeData.dependenciesCount = nodeData.dependenciesCount === undefined ? 1 : nodeData.dependenciesCount + 1;\n    if (nodeData.dependenciesCount === 1) {\n      // node flow children\n\n      const nodeProperties = builder.getNodeProperties(this);\n      for (const childNode of Object.values(nodeProperties)) {\n        if (childNode && childNode.isNode === true) {\n          childNode.build(builder);\n        }\n      }\n    }\n  }\n  generate(builder, output) {\n    const {\n      outputNode\n    } = builder.getNodeProperties(this);\n    if (outputNode && outputNode.isNode === true) {\n      return outputNode.build(builder, output);\n    }\n  }\n  updateBefore( /*frame*/\n  ) {\n    console.warn('Abstract function.');\n  }\n  update( /*frame*/\n  ) {\n    console.warn('Abstract function.');\n  }\n  build(builder, output = null) {\n    const refNode = this.getShared(builder);\n    if (this !== refNode) {\n      return refNode.build(builder, output);\n    }\n    builder.addNode(this);\n    builder.addChain(this);\n\n    /* Build stages expected results:\n    \t- \"setup\"\t\t-> Node\n    \t- \"analyze\"\t\t-> null\n    \t- \"generate\"\t-> String\n    */\n    let result = null;\n    const buildStage = builder.getBuildStage();\n    if (buildStage === 'setup') {\n      const properties = builder.getNodeProperties(this);\n      if (properties.initialized !== true || builder.context.tempRead === false) {\n        const stackNodesBeforeSetup = builder.stack.nodes.length;\n        properties.initialized = true;\n        properties.outputNode = this.setup(builder);\n        if (properties.outputNode !== null && builder.stack.nodes.length !== stackNodesBeforeSetup) {\n          properties.outputNode = builder.stack;\n        }\n        for (const childNode of Object.values(properties)) {\n          if (childNode && childNode.isNode === true) {\n            childNode.build(builder);\n          }\n        }\n      }\n    } else if (buildStage === 'analyze') {\n      this.analyze(builder);\n    } else if (buildStage === 'generate') {\n      const isGenerateOnce = this.generate.length === 1;\n      if (isGenerateOnce) {\n        const type = this.getNodeType(builder);\n        const nodeData = builder.getDataFromNode(this);\n        result = nodeData.snippet;\n        if (result === undefined /*|| builder.context.tempRead === false*/) {\n          result = this.generate(builder) || '';\n          nodeData.snippet = result;\n        }\n        result = builder.format(result, type, output);\n      } else {\n        result = this.generate(builder, output) || '';\n      }\n    }\n    builder.removeChain(this);\n    return result;\n  }\n  getSerializeChildren() {\n    return getNodeChildren(this);\n  }\n  serialize(json) {\n    const nodeChildren = this.getSerializeChildren();\n    const inputNodes = {};\n    for (const {\n      property,\n      index,\n      childNode\n    } of nodeChildren) {\n      if (index !== undefined) {\n        if (inputNodes[property] === undefined) {\n          inputNodes[property] = Number.isInteger(index) ? [] : {};\n        }\n        inputNodes[property][index] = childNode.toJSON(json.meta).uuid;\n      } else {\n        inputNodes[property] = childNode.toJSON(json.meta).uuid;\n      }\n    }\n    if (Object.keys(inputNodes).length > 0) {\n      json.inputNodes = inputNodes;\n    }\n  }\n  deserialize(json) {\n    if (json.inputNodes !== undefined) {\n      const nodes = json.meta.nodes;\n      for (const property in json.inputNodes) {\n        if (Array.isArray(json.inputNodes[property])) {\n          const inputArray = [];\n          for (const uuid of json.inputNodes[property]) {\n            inputArray.push(nodes[uuid]);\n          }\n          this[property] = inputArray;\n        } else if (typeof json.inputNodes[property] === 'object') {\n          const inputObject = {};\n          for (const subProperty in json.inputNodes[property]) {\n            const uuid = json.inputNodes[property][subProperty];\n            inputObject[subProperty] = nodes[uuid];\n          }\n          this[property] = inputObject;\n        } else {\n          const uuid = json.inputNodes[property];\n          this[property] = nodes[uuid];\n        }\n      }\n    }\n  }\n  toJSON(meta) {\n    const {\n      uuid,\n      type\n    } = this;\n    const isRoot = meta === undefined || typeof meta === 'string';\n    if (isRoot) {\n      meta = {\n        textures: {},\n        images: {},\n        nodes: {}\n      };\n    }\n\n    // serialize\n\n    let data = meta.nodes[uuid];\n    if (data === undefined) {\n      data = {\n        uuid,\n        type,\n        meta,\n        metadata: {\n          version: 4.6,\n          type: 'Node',\n          generator: 'Node.toJSON'\n        }\n      };\n      if (isRoot !== true) meta.nodes[data.uuid] = data;\n      this.serialize(data);\n      delete data.meta;\n    }\n\n    // TODO: Copied from Object3D.toJSON\n\n    function extractFromCache(cache) {\n      const values = [];\n      for (const key in cache) {\n        const data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n      return values;\n    }\n    if (isRoot) {\n      const textures = extractFromCache(meta.textures);\n      const images = extractFromCache(meta.images);\n      const nodes = extractFromCache(meta.nodes);\n      if (textures.length > 0) data.textures = textures;\n      if (images.length > 0) data.images = images;\n      if (nodes.length > 0) data.nodes = nodes;\n    }\n    return data;\n  }\n}\nexport default Node;\nexport function addNodeClass(type, nodeClass) {\n  if (typeof nodeClass !== 'function' || !type) throw new Error(`Node class ${type} is not a class`);\n  if (NodeClasses.has(type)) throw new Error(`Redefinition of node class ${type}`);\n  NodeClasses.set(type, nodeClass);\n  nodeClass.type = type;\n}\nexport function createNodeFromType(type) {\n  const Class = NodeClasses.get(type);\n  if (Class !== undefined) {\n    return new Class();\n  }\n}","map":{"version":3,"names":["EventDispatcher","NodeUpdateType","getNodeChildren","getCacheKey","MathUtils","NodeClasses","Map","_nodeId","Node","constructor","nodeType","updateType","NONE","updateBeforeType","uuid","generateUUID","isNode","Object","defineProperty","value","type","getSelf","self","updateReference","isGlobal","getChildren","property","index","childNode","replaceNode","node","undefined","dispose","dispatchEvent","traverse","callback","getHash","getUpdateType","getUpdateBeforeType","getNodeType","builder","nodeProperties","getNodeProperties","outputNode","getShared","hash","nodeFromHash","getNodeFromHash","setup","id","construct","console","warn","analyze","nodeData","getDataFromNode","dependenciesCount","values","build","generate","output","updateBefore","update","refNode","addNode","addChain","result","buildStage","getBuildStage","properties","initialized","context","tempRead","stackNodesBeforeSetup","stack","nodes","length","isGenerateOnce","snippet","format","removeChain","getSerializeChildren","serialize","json","nodeChildren","inputNodes","Number","isInteger","toJSON","meta","keys","deserialize","Array","isArray","inputArray","push","inputObject","subProperty","isRoot","textures","images","data","metadata","version","generator","extractFromCache","cache","key","addNodeClass","nodeClass","Error","has","set","createNodeFromType","Class","get"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/nodes/core/Node.js"],"sourcesContent":["import { EventDispatcher } from 'three';\nimport { NodeUpdateType } from './constants.js';\nimport { getNodeChildren, getCacheKey } from './NodeUtils.js';\nimport { MathUtils } from 'three';\n\nconst NodeClasses = new Map();\n\nlet _nodeId = 0;\n\nclass Node extends EventDispatcher {\n\n\tconstructor( nodeType = null ) {\n\n\t\tsuper();\n\n\t\tthis.nodeType = nodeType;\n\n\t\tthis.updateType = NodeUpdateType.NONE;\n\t\tthis.updateBeforeType = NodeUpdateType.NONE;\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.isNode = true;\n\n\t\tObject.defineProperty( this, 'id', { value: _nodeId ++ } );\n\n\t}\n\n\tget type() {\n\n\t\treturn this.constructor.type;\n\n\t}\n\n\tgetSelf() {\n\n\t\t// Returns non-node object.\n\n\t\treturn this.self || this;\n\n\t}\n\n\tupdateReference() {\n\n\t\treturn this;\n\n\t}\n\n\tisGlobal( /*builder*/ ) {\n\n\t\treturn false;\n\n\t}\n\n\t* getChildren() {\n\n\t\tconst self = this;\n\n\t\tfor ( const { property, index, childNode } of getNodeChildren( this ) ) {\n\n\t\t\tyield { childNode, replaceNode( node ) {\n\n\t\t\t\tif ( index === undefined ) self[ property ] = node;\n\t\t\t\telse self[ property ][ index ] = node;\n\n\t\t\t} };\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\ttraverse( callback, replaceNode = null ) {\n\n\t\tcallback( this, replaceNode );\n\n\t\tfor ( const { childNode, replaceNode } of this.getChildren() ) {\n\n\t\t\tchildNode.traverse( callback, replaceNode );\n\n\t\t}\n\n\t}\n\n\tgetCacheKey() {\n\n\t\treturn getCacheKey( this );\n\n\t}\n\n\tgetHash( /*builder*/ ) {\n\n\t\treturn this.uuid;\n\n\t}\n\n\tgetUpdateType() {\n\n\t\treturn this.updateType;\n\n\t}\n\n\tgetUpdateBeforeType() {\n\n\t\treturn this.updateBeforeType;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tconst nodeProperties = builder.getNodeProperties( this );\n\n\t\tif ( nodeProperties.outputNode ) {\n\n\t\t\treturn nodeProperties.outputNode.getNodeType( builder );\n\n\t\t}\n\n\t\treturn this.nodeType;\n\n\t}\n\n\tgetShared( builder ) {\n\n\t\tconst hash = this.getHash( builder );\n\t\tconst nodeFromHash = builder.getNodeFromHash( hash );\n\n\t\treturn nodeFromHash || this;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst nodeProperties = builder.getNodeProperties( this );\n\n\t\tfor ( const { childNode } of this.getChildren() ) {\n\n\t\t\tnodeProperties[ '_node' + childNode.id ] = childNode;\n\n\t\t}\n\n\t\t// return a outputNode if exists\n\t\treturn null;\n\n\t}\n\n\tconstruct( builder ) { // @deprecated, r157\n\n\t\tconsole.warn( 'THREE.Node: construct() is deprecated. Use setup() instead.' );\n\n\t\treturn this.setup( builder );\n\n\t}\n\n\tanalyze( builder ) {\n\n\t\tconst nodeData = builder.getDataFromNode( this );\n\t\tnodeData.dependenciesCount = nodeData.dependenciesCount === undefined ? 1 : nodeData.dependenciesCount + 1;\n\n\t\tif ( nodeData.dependenciesCount === 1 ) {\n\n\t\t\t// node flow children\n\n\t\t\tconst nodeProperties = builder.getNodeProperties( this );\n\n\t\t\tfor ( const childNode of Object.values( nodeProperties ) ) {\n\n\t\t\t\tif ( childNode && childNode.isNode === true ) {\n\n\t\t\t\t\tchildNode.build( builder );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst { outputNode } = builder.getNodeProperties( this );\n\n\t\tif ( outputNode && outputNode.isNode === true ) {\n\n\t\t\treturn outputNode.build( builder, output );\n\n\t\t}\n\n\t}\n\n\tupdateBefore( /*frame*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tupdate( /*frame*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tbuild( builder, output = null ) {\n\n\t\tconst refNode = this.getShared( builder );\n\n\t\tif ( this !== refNode ) {\n\n\t\t\treturn refNode.build( builder, output );\n\n\t\t}\n\n\t\tbuilder.addNode( this );\n\t\tbuilder.addChain( this );\n\n\t\t/* Build stages expected results:\n\t\t\t- \"setup\"\t\t-> Node\n\t\t\t- \"analyze\"\t\t-> null\n\t\t\t- \"generate\"\t-> String\n\t\t*/\n\t\tlet result = null;\n\n\t\tconst buildStage = builder.getBuildStage();\n\n\t\tif ( buildStage === 'setup' ) {\n\n\t\t\tconst properties = builder.getNodeProperties( this );\n\n\t\t\tif ( properties.initialized !== true || builder.context.tempRead === false ) {\n\n\t\t\t\tconst stackNodesBeforeSetup = builder.stack.nodes.length;\n\n\t\t\t\tproperties.initialized = true;\n\t\t\t\tproperties.outputNode = this.setup( builder );\n\n\t\t\t\tif ( properties.outputNode !== null && builder.stack.nodes.length !== stackNodesBeforeSetup ) {\n\n\t\t\t\t\tproperties.outputNode = builder.stack;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( const childNode of Object.values( properties ) ) {\n\n\t\t\t\t\tif ( childNode && childNode.isNode === true ) {\n\n\t\t\t\t\t\tchildNode.build( builder );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( buildStage === 'analyze' ) {\n\n\t\t\tthis.analyze( builder );\n\n\t\t} else if ( buildStage === 'generate' ) {\n\n\t\t\tconst isGenerateOnce = this.generate.length === 1;\n\n\t\t\tif ( isGenerateOnce ) {\n\n\t\t\t\tconst type = this.getNodeType( builder );\n\t\t\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\t\t\tresult = nodeData.snippet;\n\n\t\t\t\tif ( result === undefined /*|| builder.context.tempRead === false*/ ) {\n\n\t\t\t\t\tresult = this.generate( builder ) || '';\n\n\t\t\t\t\tnodeData.snippet = result;\n\n\t\t\t\t}\n\n\t\t\t\tresult = builder.format( result, type, output );\n\n\t\t\t} else {\n\n\t\t\t\tresult = this.generate( builder, output ) || '';\n\n\t\t\t}\n\n\t\t}\n\n\t\tbuilder.removeChain( this );\n\n\t\treturn result;\n\n\t}\n\n\tgetSerializeChildren() {\n\n\t\treturn getNodeChildren( this );\n\n\t}\n\n\tserialize( json ) {\n\n\t\tconst nodeChildren = this.getSerializeChildren();\n\n\t\tconst inputNodes = {};\n\n\t\tfor ( const { property, index, childNode } of nodeChildren ) {\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tif ( inputNodes[ property ] === undefined ) {\n\n\t\t\t\t\tinputNodes[ property ] = Number.isInteger( index ) ? [] : {};\n\n\t\t\t\t}\n\n\t\t\t\tinputNodes[ property ][ index ] = childNode.toJSON( json.meta ).uuid;\n\n\t\t\t} else {\n\n\t\t\t\tinputNodes[ property ] = childNode.toJSON( json.meta ).uuid;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( inputNodes ).length > 0 ) {\n\n\t\t\tjson.inputNodes = inputNodes;\n\n\t\t}\n\n\t}\n\n\tdeserialize( json ) {\n\n\t\tif ( json.inputNodes !== undefined ) {\n\n\t\t\tconst nodes = json.meta.nodes;\n\n\t\t\tfor ( const property in json.inputNodes ) {\n\n\t\t\t\tif ( Array.isArray( json.inputNodes[ property ] ) ) {\n\n\t\t\t\t\tconst inputArray = [];\n\n\t\t\t\t\tfor ( const uuid of json.inputNodes[ property ] ) {\n\n\t\t\t\t\t\tinputArray.push( nodes[ uuid ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis[ property ] = inputArray;\n\n\t\t\t\t} else if ( typeof json.inputNodes[ property ] === 'object' ) {\n\n\t\t\t\t\tconst inputObject = {};\n\n\t\t\t\t\tfor ( const subProperty in json.inputNodes[ property ] ) {\n\n\t\t\t\t\t\tconst uuid = json.inputNodes[ property ][ subProperty ];\n\n\t\t\t\t\t\tinputObject[ subProperty ] = nodes[ uuid ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis[ property ] = inputObject;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst uuid = json.inputNodes[ property ];\n\n\t\t\t\t\tthis[ property ] = nodes[ uuid ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst { uuid, type } = this;\n\t\tconst isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRoot ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tnodes: {}\n\t\t\t};\n\n\t\t}\n\n\t\t// serialize\n\n\t\tlet data = meta.nodes[ uuid ];\n\n\t\tif ( data === undefined ) {\n\n\t\t\tdata = {\n\t\t\t\tuuid,\n\t\t\t\ttype,\n\t\t\t\tmeta,\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.6,\n\t\t\t\t\ttype: 'Node',\n\t\t\t\t\tgenerator: 'Node.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif ( isRoot !== true ) meta.nodes[ data.uuid ] = data;\n\n\t\t\tthis.serialize( data );\n\n\t\t\tdelete data.meta;\n\n\t\t}\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRoot ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\t\t\tconst nodes = extractFromCache( meta.nodes );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\t\t\tif ( nodes.length > 0 ) data.nodes = nodes;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nexport default Node;\n\nexport function addNodeClass( type, nodeClass ) {\n\n\tif ( typeof nodeClass !== 'function' || ! type ) throw new Error( `Node class ${ type } is not a class` );\n\tif ( NodeClasses.has( type ) ) throw new Error( `Redefinition of node class ${ type }` );\n\n\tNodeClasses.set( type, nodeClass );\n\tnodeClass.type = type;\n\n}\n\nexport function createNodeFromType( type ) {\n\n\tconst Class = NodeClasses.get( type );\n\n\tif ( Class !== undefined ) {\n\n\t\treturn new Class();\n\n\t}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}