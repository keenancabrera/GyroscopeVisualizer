{"ast":null,"code":"import MaterialNode from './MaterialNode.js';\nimport { materialReference } from './MaterialReferenceNode.js';\nimport { normalView } from './NormalNode.js';\nimport { normalMap } from '../display/NormalMapNode.js';\nimport { bumpMap } from '../display/BumpMapNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\nclass ExtendedMaterialNode extends MaterialNode {\n  constructor(scope) {\n    super(scope);\n  }\n  getNodeType(builder) {\n    const scope = this.scope;\n    let type = null;\n    if (scope === ExtendedMaterialNode.NORMAL || scope === ExtendedMaterialNode.CLEARCOAT_NORMAL) {\n      type = 'vec3';\n    }\n    return type || super.getNodeType(builder);\n  }\n  setup(builder) {\n    const material = builder.material;\n    const scope = this.scope;\n    let node = null;\n    if (scope === ExtendedMaterialNode.NORMAL) {\n      if (material.normalMap) {\n        node = normalMap(this.getTexture('normalMap'), materialReference('normalScale', 'vec2'));\n      } else if (material.bumpMap) {\n        // @TODO: Replace material.bumpMap to this.getTexture( 'bumpMap' )\n        node = bumpMap(material.bumpMap, materialReference('bumpScale', 'float'));\n      } else {\n        node = normalView;\n      }\n    } else if (scope === ExtendedMaterialNode.CLEARCOAT_NORMAL) {\n      node = material.clearcoatNormalMap ? normalMap(this.getTexture('clearcoatNormalMap'), materialReference('clearcoatNormalScale', 'vec2')) : normalView;\n    }\n    return node || super.setup(builder);\n  }\n}\nExtendedMaterialNode.NORMAL = 'normal';\nExtendedMaterialNode.CLEARCOAT_NORMAL = 'clearcoatNormal';\nexport default ExtendedMaterialNode;\nexport const materialNormal = nodeImmutable(ExtendedMaterialNode, ExtendedMaterialNode.NORMAL);\nexport const materialClearcoatNormal = nodeImmutable(ExtendedMaterialNode, ExtendedMaterialNode.CLEARCOAT_NORMAL);\naddNodeClass('ExtendedMaterialNode', ExtendedMaterialNode);","map":{"version":3,"names":["MaterialNode","materialReference","normalView","normalMap","bumpMap","addNodeClass","nodeImmutable","ExtendedMaterialNode","constructor","scope","getNodeType","builder","type","NORMAL","CLEARCOAT_NORMAL","setup","material","node","getTexture","clearcoatNormalMap","materialNormal","materialClearcoatNormal"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/nodes/accessors/ExtendedMaterialNode.js"],"sourcesContent":["import MaterialNode from './MaterialNode.js';\nimport { materialReference } from './MaterialReferenceNode.js';\nimport { normalView } from './NormalNode.js';\nimport { normalMap } from '../display/NormalMapNode.js';\nimport { bumpMap } from '../display/BumpMapNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\n\nclass ExtendedMaterialNode extends MaterialNode {\n\n\tconstructor( scope ) {\n\n\t\tsuper( scope );\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tconst scope = this.scope;\n\t\tlet type = null;\n\n\t\tif ( scope === ExtendedMaterialNode.NORMAL || scope === ExtendedMaterialNode.CLEARCOAT_NORMAL ) {\n\n\t\t\ttype = 'vec3';\n\n\t\t}\n\n\t\treturn type || super.getNodeType( builder );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst material = builder.material;\n\t\tconst scope = this.scope;\n\n\t\tlet node = null;\n\n\t\tif ( scope === ExtendedMaterialNode.NORMAL ) {\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tnode = normalMap( this.getTexture( 'normalMap' ), materialReference( 'normalScale', 'vec2' ) );\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\t// @TODO: Replace material.bumpMap to this.getTexture( 'bumpMap' )\n\t\t\t\tnode = bumpMap( material.bumpMap, materialReference( 'bumpScale', 'float' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = normalView;\n\n\t\t\t}\n\n\t\t} else if ( scope === ExtendedMaterialNode.CLEARCOAT_NORMAL ) {\n\n\t\t\tnode = material.clearcoatNormalMap ? normalMap( this.getTexture( 'clearcoatNormalMap' ), materialReference( 'clearcoatNormalScale', 'vec2' ) ) : normalView;\n\n\t\t}\n\n\t\treturn node || super.setup( builder );\n\n\t}\n\n}\n\nExtendedMaterialNode.NORMAL = 'normal';\nExtendedMaterialNode.CLEARCOAT_NORMAL = 'clearcoatNormal';\n\nexport default ExtendedMaterialNode;\n\nexport const materialNormal = nodeImmutable( ExtendedMaterialNode, ExtendedMaterialNode.NORMAL );\nexport const materialClearcoatNormal = nodeImmutable( ExtendedMaterialNode, ExtendedMaterialNode.CLEARCOAT_NORMAL );\n\naddNodeClass( 'ExtendedMaterialNode', ExtendedMaterialNode );\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,mBAAmB;AAC5C,SAASC,iBAAiB,QAAQ,4BAA4B;AAC9D,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,aAAa,QAAQ,6BAA6B;AAE3D,MAAMC,oBAAoB,SAASP,YAAY,CAAC;EAE/CQ,WAAWA,CAAEC,KAAK,EAAG;IAEpB,KAAK,CAAEA,KAAM,CAAC;EAEf;EAEAC,WAAWA,CAAEC,OAAO,EAAG;IAEtB,MAAMF,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAIG,IAAI,GAAG,IAAI;IAEf,IAAKH,KAAK,KAAKF,oBAAoB,CAACM,MAAM,IAAIJ,KAAK,KAAKF,oBAAoB,CAACO,gBAAgB,EAAG;MAE/FF,IAAI,GAAG,MAAM;IAEd;IAEA,OAAOA,IAAI,IAAI,KAAK,CAACF,WAAW,CAAEC,OAAQ,CAAC;EAE5C;EAEAI,KAAKA,CAAEJ,OAAO,EAAG;IAEhB,MAAMK,QAAQ,GAAGL,OAAO,CAACK,QAAQ;IACjC,MAAMP,KAAK,GAAG,IAAI,CAACA,KAAK;IAExB,IAAIQ,IAAI,GAAG,IAAI;IAEf,IAAKR,KAAK,KAAKF,oBAAoB,CAACM,MAAM,EAAG;MAE5C,IAAKG,QAAQ,CAACb,SAAS,EAAG;QAEzBc,IAAI,GAAGd,SAAS,CAAE,IAAI,CAACe,UAAU,CAAE,WAAY,CAAC,EAAEjB,iBAAiB,CAAE,aAAa,EAAE,MAAO,CAAE,CAAC;MAE/F,CAAC,MAAM,IAAKe,QAAQ,CAACZ,OAAO,EAAG;QAE9B;QACAa,IAAI,GAAGb,OAAO,CAAEY,QAAQ,CAACZ,OAAO,EAAEH,iBAAiB,CAAE,WAAW,EAAE,OAAQ,CAAE,CAAC;MAE9E,CAAC,MAAM;QAENgB,IAAI,GAAGf,UAAU;MAElB;IAED,CAAC,MAAM,IAAKO,KAAK,KAAKF,oBAAoB,CAACO,gBAAgB,EAAG;MAE7DG,IAAI,GAAGD,QAAQ,CAACG,kBAAkB,GAAGhB,SAAS,CAAE,IAAI,CAACe,UAAU,CAAE,oBAAqB,CAAC,EAAEjB,iBAAiB,CAAE,sBAAsB,EAAE,MAAO,CAAE,CAAC,GAAGC,UAAU;IAE5J;IAEA,OAAOe,IAAI,IAAI,KAAK,CAACF,KAAK,CAAEJ,OAAQ,CAAC;EAEtC;AAED;AAEAJ,oBAAoB,CAACM,MAAM,GAAG,QAAQ;AACtCN,oBAAoB,CAACO,gBAAgB,GAAG,iBAAiB;AAEzD,eAAeP,oBAAoB;AAEnC,OAAO,MAAMa,cAAc,GAAGd,aAAa,CAAEC,oBAAoB,EAAEA,oBAAoB,CAACM,MAAO,CAAC;AAChG,OAAO,MAAMQ,uBAAuB,GAAGf,aAAa,CAAEC,oBAAoB,EAAEA,oBAAoB,CAACO,gBAAiB,CAAC;AAEnHT,YAAY,CAAE,sBAAsB,EAAEE,oBAAqB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}