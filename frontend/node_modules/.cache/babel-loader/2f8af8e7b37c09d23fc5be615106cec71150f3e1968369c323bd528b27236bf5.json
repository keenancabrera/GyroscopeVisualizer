{"ast":null,"code":"import { createCamera } from './components/camera.js';\nimport { createCylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\nimport { createRod } from './components/rod.js';\nimport { createRenderer } from './systems/renderer.js';\nimport { AxesHelper } from 'three';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters;\n    this.state = state;\n    this.solution = {};\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n    renderer = createRenderer();\n    renderer.setSize(container.clientWidth, container.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    container.append(renderer.domElement);\n\n    // Add elements\n    this.cylinder = createCylinder(this.getCartesian());\n    [this.verticies, this.line] = createRod(this.getCartesian());\n    this.axesHelper = new AxesHelper(3 / 2 * this.parameters.l.value);\n    scene.add(this.cylinder, this.line, this.axesHelper);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  render() {\n    // used to render a single frame\n    renderer.render(scene, camera);\n  }\n  updateState(state) {\n    this.state = state;\n  }\n  getCartesian() {\n    let x = this.parameters.l.value * Math.cos(this.state.theta) * Math.sin(this.state.phi);\n    let y = this.parameters.l.value * Math.sin(this.state.theta) * Math.sin(this.state.phi);\n    let z = this.parameters.l.value * Math.cos(this.state.phi);\n    return [x, y, z];\n  }\n  updateSolution(solution) {\n    this.solution = solution;\n  }\n}\nexport { gyroscopeAnimation };","map":{"version":3,"names":["createCamera","createCylinder","createScene","createRod","createRenderer","AxesHelper","camera","renderer","scene","gyroscopeAnimation","constructor","container","parameters","state","solution","setSize","clientWidth","clientHeight","setPixelRatio","window","devicePixelRatio","append","domElement","cylinder","getCartesian","verticies","line","axesHelper","l","value","add","render","updateState","x","Math","cos","theta","sin","phi","y","z","updateSolution"],"sources":["/Users/cabrera/Documents/PortfolioWebiste/frontend/src/gyroscopeRenderer/gyroscopeAnimation.js"],"sourcesContent":["import { createCamera } from './components/camera.js';\nimport { createCylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\nimport { createRod } from './components/rod.js'\n\nimport { createRenderer } from './systems/renderer.js';\nimport { AxesHelper } from 'three';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\n\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters\n    this.state = state\n    this.solution = {}\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n\n    renderer = createRenderer();\n    renderer.setSize(container.clientWidth, container.clientHeight)\n    renderer.setPixelRatio(window.devicePixelRatio)\n\n    container.append(renderer.domElement);\n\n    // Add elements\n    this.cylinder = createCylinder(this.getCartesian());\n    [this.verticies, this.line] = createRod(this.getCartesian())\n    this.axesHelper = new AxesHelper(3/2 * this.parameters.l.value)\n\n\n    scene.add(this.cylinder, this.line, this.axesHelper);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  \n  render() { // used to render a single frame\n    renderer.render(scene, camera);\n  }\n\n  updateState(state){\n    this.state = state\n  }\n\n  getCartesian(){\n    let x = this.parameters.l.value * Math.cos(this.state.theta) * Math.sin(this.state.phi)\n    let y = this.parameters.l.value * Math.sin(this.state.theta) * Math.sin(this.state.phi)\n    let z = this.parameters.l.value * Math.cos(this.state.phi)\n\n    return [x,y,z]\n  }\n\n  updateSolution(solution){\n    this.solution = solution\n  }\n\n}\n\nexport { gyroscopeAnimation };"],"mappings":"AAAA,SAASA,YAAY,QAAQ,wBAAwB;AACrD,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,SAAS,QAAQ,qBAAqB;AAE/C,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,UAAU,QAAQ,OAAO;AAClC;;AAEA;AACA;AACA,IAAIC,MAAM;AACV,IAAIC,QAAQ;AACZ,IAAIC,KAAK;AAET,MAAMC,kBAAkB,CAAC;EACvBC,WAAWA,CAACC,SAAS,EAAEC,UAAU,EAAEC,KAAK,EAAE;IACxC,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;;IAElB;IACAR,MAAM,GAAGN,YAAY,CAACW,SAAS,EAAE,IAAI,CAACC,UAAU,CAAC;IACjDJ,KAAK,GAAGN,WAAW,CAAC,CAAC;IAErBK,QAAQ,GAAGH,cAAc,CAAC,CAAC;IAC3BG,QAAQ,CAACQ,OAAO,CAACJ,SAAS,CAACK,WAAW,EAAEL,SAAS,CAACM,YAAY,CAAC;IAC/DV,QAAQ,CAACW,aAAa,CAACC,MAAM,CAACC,gBAAgB,CAAC;IAE/CT,SAAS,CAACU,MAAM,CAACd,QAAQ,CAACe,UAAU,CAAC;;IAErC;IACA,IAAI,CAACC,QAAQ,GAAGtB,cAAc,CAAC,IAAI,CAACuB,YAAY,CAAC,CAAC,CAAC;IACnD,CAAC,IAAI,CAACC,SAAS,EAAE,IAAI,CAACC,IAAI,CAAC,GAAGvB,SAAS,CAAC,IAAI,CAACqB,YAAY,CAAC,CAAC,CAAC;IAC5D,IAAI,CAACG,UAAU,GAAG,IAAItB,UAAU,CAAC,CAAC,GAAC,CAAC,GAAG,IAAI,CAACO,UAAU,CAACgB,CAAC,CAACC,KAAK,CAAC;IAG/DrB,KAAK,CAACsB,GAAG,CAAC,IAAI,CAACP,QAAQ,EAAE,IAAI,CAACG,IAAI,EAAE,IAAI,CAACC,UAAU,CAAC;;IAEpD;EACF;;EAGAI,MAAMA,CAAA,EAAG;IAAE;IACTxB,QAAQ,CAACwB,MAAM,CAACvB,KAAK,EAAEF,MAAM,CAAC;EAChC;EAEA0B,WAAWA,CAACnB,KAAK,EAAC;IAChB,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EAEAW,YAAYA,CAAA,EAAE;IACZ,IAAIS,CAAC,GAAG,IAAI,CAACrB,UAAU,CAACgB,CAAC,CAACC,KAAK,GAAGK,IAAI,CAACC,GAAG,CAAC,IAAI,CAACtB,KAAK,CAACuB,KAAK,CAAC,GAAGF,IAAI,CAACG,GAAG,CAAC,IAAI,CAACxB,KAAK,CAACyB,GAAG,CAAC;IACvF,IAAIC,CAAC,GAAG,IAAI,CAAC3B,UAAU,CAACgB,CAAC,CAACC,KAAK,GAAGK,IAAI,CAACG,GAAG,CAAC,IAAI,CAACxB,KAAK,CAACuB,KAAK,CAAC,GAAGF,IAAI,CAACG,GAAG,CAAC,IAAI,CAACxB,KAAK,CAACyB,GAAG,CAAC;IACvF,IAAIE,CAAC,GAAG,IAAI,CAAC5B,UAAU,CAACgB,CAAC,CAACC,KAAK,GAAGK,IAAI,CAACC,GAAG,CAAC,IAAI,CAACtB,KAAK,CAACyB,GAAG,CAAC;IAE1D,OAAO,CAACL,CAAC,EAACM,CAAC,EAACC,CAAC,CAAC;EAChB;EAEAC,cAAcA,CAAC3B,QAAQ,EAAC;IACtB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC1B;AAEF;AAEA,SAASL,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}