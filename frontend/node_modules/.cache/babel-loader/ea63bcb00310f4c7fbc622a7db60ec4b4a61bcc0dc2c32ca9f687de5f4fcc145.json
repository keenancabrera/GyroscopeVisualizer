{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { varying } from '../core/VaryingNode.js';\nimport { normalize } from '../math/MathNode.js';\nimport { cameraViewMatrix } from './CameraNode.js';\nimport { normalGeometry, normalLocal, normalView, normalWorld, transformedNormalView } from './NormalNode.js';\nimport { tangentGeometry, tangentLocal, tangentView, tangentWorld, transformedTangentView } from './TangentNode.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\nclass BitangentNode extends Node {\n  constructor(scope = BitangentNode.LOCAL) {\n    super('vec3');\n    this.scope = scope;\n  }\n  getHash( /*builder*/\n  ) {\n    return `bitangent-${this.scope}`;\n  }\n  generate(builder) {\n    const scope = this.scope;\n    let crossNormalTangent;\n    if (scope === BitangentNode.GEOMETRY) {\n      crossNormalTangent = normalGeometry.cross(tangentGeometry);\n    } else if (scope === BitangentNode.LOCAL) {\n      crossNormalTangent = normalLocal.cross(tangentLocal);\n    } else if (scope === BitangentNode.VIEW) {\n      crossNormalTangent = normalView.cross(tangentView);\n    } else if (scope === BitangentNode.WORLD) {\n      crossNormalTangent = normalWorld.cross(tangentWorld);\n    }\n    const vertexNode = crossNormalTangent.mul(tangentGeometry.w).xyz;\n    const outputNode = normalize(varying(vertexNode));\n    return outputNode.build(builder, this.getNodeType(builder));\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.scope = this.scope;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.scope = data.scope;\n  }\n}\nBitangentNode.GEOMETRY = 'geometry';\nBitangentNode.LOCAL = 'local';\nBitangentNode.VIEW = 'view';\nBitangentNode.WORLD = 'world';\nexport default BitangentNode;\nexport const bitangentGeometry = nodeImmutable(BitangentNode, BitangentNode.GEOMETRY);\nexport const bitangentLocal = nodeImmutable(BitangentNode, BitangentNode.LOCAL);\nexport const bitangentView = nodeImmutable(BitangentNode, BitangentNode.VIEW);\nexport const bitangentWorld = nodeImmutable(BitangentNode, BitangentNode.WORLD);\nexport const transformedBitangentView = normalize(transformedNormalView.cross(transformedTangentView).mul(tangentGeometry.w));\nexport const transformedBitangentWorld = normalize(transformedBitangentView.transformDirection(cameraViewMatrix));\naddNodeClass('BitangentNode', BitangentNode);","map":{"version":3,"names":["Node","addNodeClass","varying","normalize","cameraViewMatrix","normalGeometry","normalLocal","normalView","normalWorld","transformedNormalView","tangentGeometry","tangentLocal","tangentView","tangentWorld","transformedTangentView","nodeImmutable","BitangentNode","constructor","scope","LOCAL","getHash","generate","builder","crossNormalTangent","GEOMETRY","cross","VIEW","WORLD","vertexNode","mul","w","xyz","outputNode","build","getNodeType","serialize","data","deserialize","bitangentGeometry","bitangentLocal","bitangentView","bitangentWorld","transformedBitangentView","transformedBitangentWorld","transformDirection"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/nodes/accessors/BitangentNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { varying } from '../core/VaryingNode.js';\nimport { normalize } from '../math/MathNode.js';\nimport { cameraViewMatrix } from './CameraNode.js';\nimport { normalGeometry, normalLocal, normalView, normalWorld, transformedNormalView } from './NormalNode.js';\nimport { tangentGeometry, tangentLocal, tangentView, tangentWorld, transformedTangentView } from './TangentNode.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\n\nclass BitangentNode extends Node {\n\n\tconstructor( scope = BitangentNode.LOCAL ) {\n\n\t\tsuper( 'vec3' );\n\n\t\tthis.scope = scope;\n\n\t}\n\n\tgetHash( /*builder*/ ) {\n\n\t\treturn `bitangent-${this.scope}`;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst scope = this.scope;\n\n\t\tlet crossNormalTangent;\n\n\t\tif ( scope === BitangentNode.GEOMETRY ) {\n\n\t\t\tcrossNormalTangent = normalGeometry.cross( tangentGeometry );\n\n\t\t} else if ( scope === BitangentNode.LOCAL ) {\n\n\t\t\tcrossNormalTangent = normalLocal.cross( tangentLocal );\n\n\t\t} else if ( scope === BitangentNode.VIEW ) {\n\n\t\t\tcrossNormalTangent = normalView.cross( tangentView );\n\n\t\t} else if ( scope === BitangentNode.WORLD ) {\n\n\t\t\tcrossNormalTangent = normalWorld.cross( tangentWorld );\n\n\t\t}\n\n\t\tconst vertexNode = crossNormalTangent.mul( tangentGeometry.w ).xyz;\n\n\t\tconst outputNode = normalize( varying( vertexNode ) );\n\n\t\treturn outputNode.build( builder, this.getNodeType( builder ) );\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.scope = this.scope;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.scope = data.scope;\n\n\t}\n\n}\n\nBitangentNode.GEOMETRY = 'geometry';\nBitangentNode.LOCAL = 'local';\nBitangentNode.VIEW = 'view';\nBitangentNode.WORLD = 'world';\n\nexport default BitangentNode;\n\nexport const bitangentGeometry = nodeImmutable( BitangentNode, BitangentNode.GEOMETRY );\nexport const bitangentLocal = nodeImmutable( BitangentNode, BitangentNode.LOCAL );\nexport const bitangentView = nodeImmutable( BitangentNode, BitangentNode.VIEW );\nexport const bitangentWorld = nodeImmutable( BitangentNode, BitangentNode.WORLD );\nexport const transformedBitangentView = normalize( transformedNormalView.cross( transformedTangentView ).mul( tangentGeometry.w ) );\nexport const transformedBitangentWorld = normalize( transformedBitangentView.transformDirection( cameraViewMatrix ) );\n\naddNodeClass( 'BitangentNode', BitangentNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}