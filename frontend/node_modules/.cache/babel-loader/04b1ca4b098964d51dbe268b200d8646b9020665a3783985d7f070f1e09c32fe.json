{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport DataMap from './DataMap.js';\nimport { Vector3, DepthTexture, DepthStencilFormat, UnsignedInt248Type, LinearFilter, NearestFilter, EquirectangularReflectionMapping, EquirectangularRefractionMapping, CubeReflectionMapping, CubeRefractionMapping } from 'three';\nconst _size = new Vector3();\nclass Textures extends DataMap {\n  constructor(backend, info) {\n    super();\n    this.backend = backend;\n    this.info = info;\n  }\n  updateRenderTarget(renderTarget, activeMipmapLevel = 0) {\n    const renderTargetData = this.get(renderTarget);\n    const sampleCount = renderTarget.samples === 0 ? 1 : renderTarget.samples;\n    const depthTextureMips = renderTargetData.depthTextureMips || (renderTargetData.depthTextureMips = {});\n    let texture, textures;\n    if (renderTarget.isWebGLMultipleRenderTargets) {\n      textures = renderTarget.texture;\n      texture = renderTarget.texture[0];\n    } else {\n      textures = [renderTarget.texture];\n      texture = renderTarget.texture;\n    }\n    const size = this.getSize(texture);\n    const mipWidth = size.width >> activeMipmapLevel;\n    const mipHeight = size.height >> activeMipmapLevel;\n    let depthTexture = renderTarget.depthTexture || depthTextureMips[activeMipmapLevel];\n    let textureNeedsUpdate = false;\n    if (depthTexture === undefined) {\n      depthTexture = new DepthTexture();\n      depthTexture.format = DepthStencilFormat;\n      depthTexture.type = UnsignedInt248Type;\n      depthTexture.image.width = mipWidth;\n      depthTexture.image.height = mipHeight;\n      depthTextureMips[activeMipmapLevel] = depthTexture;\n    }\n    if (renderTargetData.width !== size.width || size.height !== renderTargetData.height) {\n      textureNeedsUpdate = true;\n      depthTexture.needsUpdate = true;\n      depthTexture.image.width = mipWidth;\n      depthTexture.image.height = mipHeight;\n    }\n    renderTargetData.width = size.width;\n    renderTargetData.height = size.height;\n    renderTargetData.textures = textures;\n    renderTargetData.depthTexture = depthTexture;\n    if (renderTargetData.sampleCount !== sampleCount) {\n      textureNeedsUpdate = true;\n      depthTexture.needsUpdate = true;\n      renderTargetData.sampleCount = sampleCount;\n    }\n    const options = {\n      sampleCount\n    };\n    for (let i = 0; i < textures.length; i++) {\n      const texture = textures[i];\n      if (textureNeedsUpdate) texture.needsUpdate = true;\n      this.updateTexture(texture, options);\n    }\n    this.updateTexture(depthTexture, options);\n\n    // dispose handler\n\n    if (renderTargetData.initialized !== true) {\n      renderTargetData.initialized = true;\n\n      // dispose\n\n      const onDispose = () => {\n        renderTarget.removeEventListener('dispose', onDispose);\n        if (textures !== undefined) {\n          for (let i = 0; i < textures.length; i++) {\n            this._destroyTexture(textures[i]);\n          }\n        } else {\n          this._destroyTexture(texture);\n        }\n        this._destroyTexture(depthTexture);\n      };\n      renderTarget.addEventListener('dispose', onDispose);\n    }\n  }\n  updateTexture(texture, options = {}) {\n    const textureData = this.get(texture);\n    if (textureData.initialized === true && textureData.version === texture.version) return;\n    const isRenderTarget = texture.isRenderTargetTexture || texture.isDepthTexture || texture.isFramebufferTexture;\n    const backend = this.backend;\n    if (isRenderTarget && textureData.initialized === true) {\n      // it's an update\n\n      backend.destroySampler(texture);\n      backend.destroyTexture(texture);\n    }\n\n    //\n\n    const {\n      width,\n      height,\n      depth\n    } = this.getSize(texture);\n    options.width = width;\n    options.height = height;\n    options.depth = depth;\n    options.needsMipmaps = this.needsMipmaps(texture);\n    options.levels = options.needsMipmaps ? this.getMipLevels(texture, width, height) : 1;\n\n    //\n\n    if (isRenderTarget || texture.isStorageTexture === true) {\n      backend.createSampler(texture);\n      backend.createTexture(texture, options);\n    } else {\n      const needsCreate = textureData.initialized !== true;\n      if (needsCreate) backend.createSampler(texture);\n      if (texture.version > 0) {\n        const image = texture.image;\n        if (image === undefined) {\n          console.warn('THREE.Renderer: Texture marked for update but image is undefined.');\n        } else if (image.complete === false) {\n          console.warn('THREE.Renderer: Texture marked for update but image is incomplete.');\n        } else {\n          if (texture.images) {\n            const images = [];\n            for (const image of texture.images) {\n              images.push(this._getUploadImage(image));\n            }\n            options.images = images;\n          } else {\n            options.image = this._getUploadImage(image);\n          }\n          if (textureData.isDefaultTexture === undefined || textureData.isDefaultTexture === true) {\n            backend.createTexture(texture, options);\n            textureData.isDefaultTexture = false;\n          }\n          backend.updateTexture(texture, options);\n          if (options.needsMipmaps) backend.generateMipmaps(texture);\n        }\n      } else {\n        // async update\n\n        backend.createDefaultTexture(texture);\n        textureData.isDefaultTexture = true;\n      }\n    }\n\n    // dispose handler\n\n    if (textureData.initialized !== true) {\n      textureData.initialized = true;\n\n      //\n\n      this.info.memory.textures++;\n\n      // dispose\n\n      const onDispose = () => {\n        texture.removeEventListener('dispose', onDispose);\n        this._destroyTexture(texture);\n        this.info.memory.textures--;\n      };\n      texture.addEventListener('dispose', onDispose);\n    }\n\n    //\n\n    textureData.version = texture.version;\n  }\n  getSize(texture, target = _size) {\n    let image = texture.images ? texture.images[0] : texture.image;\n    if (image) {\n      if (image.image !== undefined) image = image.image;\n      target.width = image.width;\n      target.height = image.height;\n      target.depth = texture.isCubeTexture ? 6 : image.depth || 1;\n    } else {\n      target.width = target.height = target.depth = 1;\n    }\n    return target;\n  }\n  getMipLevels(texture, width, height) {\n    let mipLevelCount;\n    if (texture.isCompressedTexture) {\n      mipLevelCount = texture.mipmaps.length;\n    } else {\n      mipLevelCount = Math.floor(Math.log2(Math.max(width, height))) + 1;\n    }\n    return mipLevelCount;\n  }\n  needsMipmaps(texture) {\n    if (this.isEnvironmentTexture(texture)) return true;\n    return texture.isCompressedTexture !== true /*&& ( texture.generateMipmaps === true )*/ && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n  }\n  isEnvironmentTexture(texture) {\n    const mapping = texture.mapping;\n    return mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping || mapping === CubeReflectionMapping || mapping === CubeRefractionMapping;\n  }\n  _getUploadImage(image) {\n    if (this._isHTMLImage(image)) {\n      return this._imageToCanvas(image);\n    }\n    return image;\n  }\n  _imageToCanvas(image) {\n    const {\n      width,\n      height\n    } = image;\n\n    // eslint-disable-next-line compat/compat\n    const canvas = new OffscreenCanvas(width, height);\n    const context = canvas.getContext('2d');\n    context.drawImage(image, 0, 0, width, height);\n    return canvas;\n  }\n  _isHTMLImage(image) {\n    return typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement;\n  }\n  _destroyTexture(texture) {\n    this.backend.destroySampler(texture);\n    this.backend.destroyTexture(texture);\n    this.delete(texture);\n  }\n}\nexport default Textures;","map":{"version":3,"names":["DataMap","Vector3","DepthTexture","DepthStencilFormat","UnsignedInt248Type","LinearFilter","NearestFilter","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeReflectionMapping","CubeRefractionMapping","_size","Textures","constructor","backend","info","updateRenderTarget","renderTarget","activeMipmapLevel","renderTargetData","get","sampleCount","samples","depthTextureMips","texture","textures","isWebGLMultipleRenderTargets","size","getSize","mipWidth","width","mipHeight","height","depthTexture","textureNeedsUpdate","undefined","format","type","image","needsUpdate","options","i","length","updateTexture","initialized","onDispose","removeEventListener","_destroyTexture","addEventListener","textureData","version","isRenderTarget","isRenderTargetTexture","isDepthTexture","isFramebufferTexture","destroySampler","destroyTexture","depth","needsMipmaps","levels","getMipLevels","isStorageTexture","createSampler","createTexture","needsCreate","console","warn","complete","images","push","_getUploadImage","isDefaultTexture","generateMipmaps","createDefaultTexture","memory","target","isCubeTexture","mipLevelCount","isCompressedTexture","mipmaps","Math","floor","log2","max","isEnvironmentTexture","minFilter","mapping","_isHTMLImage","_imageToCanvas","canvas","OffscreenCanvas","context","getContext","drawImage","HTMLImageElement","HTMLCanvasElement","delete"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/renderers/common/Textures.js"],"sourcesContent":["import DataMap from './DataMap.js';\n\nimport { Vector3, DepthTexture, DepthStencilFormat, UnsignedInt248Type, LinearFilter, NearestFilter, EquirectangularReflectionMapping, EquirectangularRefractionMapping, CubeReflectionMapping, CubeRefractionMapping } from 'three';\n\nconst _size = new Vector3();\n\nclass Textures extends DataMap {\n\n\tconstructor( backend, info ) {\n\n\t\tsuper();\n\n\t\tthis.backend = backend;\n\t\tthis.info = info;\n\n\t}\n\n\tupdateRenderTarget( renderTarget, activeMipmapLevel = 0 ) {\n\n\t\tconst renderTargetData = this.get( renderTarget );\n\n\t\tconst sampleCount = renderTarget.samples === 0 ? 1 : renderTarget.samples;\n\t\tconst depthTextureMips = renderTargetData.depthTextureMips || ( renderTargetData.depthTextureMips = {} );\n\n\t\tlet texture, textures;\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\ttextures = renderTarget.texture;\n\t\t\ttexture = renderTarget.texture[ 0 ];\n\n\t\t} else {\n\n\t\t\ttextures = [ renderTarget.texture ];\n\t\t\ttexture = renderTarget.texture;\n\n\t\t}\n\n\t\tconst size = this.getSize( texture );\n\n\t\tconst mipWidth = size.width >> activeMipmapLevel;\n\t\tconst mipHeight = size.height >> activeMipmapLevel;\n\n\t\tlet depthTexture = renderTarget.depthTexture || depthTextureMips[ activeMipmapLevel ];\n\t\tlet textureNeedsUpdate = false;\n\n\t\tif ( depthTexture === undefined ) {\n\n\t\t\tdepthTexture = new DepthTexture();\n\t\t\tdepthTexture.format = DepthStencilFormat;\n\t\t\tdepthTexture.type = UnsignedInt248Type;\n\t\t\tdepthTexture.image.width = mipWidth;\n\t\t\tdepthTexture.image.height = mipHeight;\n\n\t\t\tdepthTextureMips[ activeMipmapLevel ] = depthTexture;\n\n\t\t}\n\n\t\tif ( renderTargetData.width !== size.width || size.height !== renderTargetData.height ) {\n\n\t\t\ttextureNeedsUpdate = true;\n\t\t\tdepthTexture.needsUpdate = true;\n\n\t\t\tdepthTexture.image.width = mipWidth;\n\t\t\tdepthTexture.image.height = mipHeight;\n\n\t\t}\n\n\t\trenderTargetData.width = size.width;\n\t\trenderTargetData.height = size.height;\n\t\trenderTargetData.textures = textures;\n\t\trenderTargetData.depthTexture = depthTexture;\n\n\t\tif ( renderTargetData.sampleCount !== sampleCount ) {\n\n\t\t\ttextureNeedsUpdate = true;\n\t\t\tdepthTexture.needsUpdate = true;\n\n\t\t\trenderTargetData.sampleCount = sampleCount;\n\n\t\t}\n\n\t\tconst options = { sampleCount };\n\n\n\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\tconst texture = textures[ i ];\n\n\t\t\tif ( textureNeedsUpdate ) texture.needsUpdate = true;\n\n\t\t\tthis.updateTexture( texture, options );\n\n\t\t}\n\n\t\tthis.updateTexture( depthTexture, options );\n\n\t\t// dispose handler\n\n\t\tif ( renderTargetData.initialized !== true ) {\n\n\t\t\trenderTargetData.initialized = true;\n\n\t\t\t// dispose\n\n\t\t\tconst onDispose = () => {\n\n\t\t\t\trenderTarget.removeEventListener( 'dispose', onDispose );\n\n\t\t\t\tif ( textures !== undefined ) {\n\n\t\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\t\tthis._destroyTexture( textures[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._destroyTexture( texture );\n\n\t\t\t\t}\n\n\t\t\t\tthis._destroyTexture( depthTexture );\n\n\t\t\t};\n\n\t\t\trenderTarget.addEventListener( 'dispose', onDispose );\n\n\t\t}\n\n\t}\n\n\tupdateTexture( texture, options = {} ) {\n\n\t\tconst textureData = this.get( texture );\n\t\tif ( textureData.initialized === true && textureData.version === texture.version ) return;\n\n\t\tconst isRenderTarget = texture.isRenderTargetTexture || texture.isDepthTexture || texture.isFramebufferTexture;\n\t\tconst backend = this.backend;\n\n\t\tif ( isRenderTarget && textureData.initialized === true ) {\n\n\t\t\t// it's an update\n\n\t\t\tbackend.destroySampler( texture );\n\t\t\tbackend.destroyTexture( texture );\n\n\t\t}\n\n\t\t//\n\n\t\tconst { width, height, depth } = this.getSize( texture );\n\n\t\toptions.width = width;\n\t\toptions.height = height;\n\t\toptions.depth = depth;\n\t\toptions.needsMipmaps = this.needsMipmaps( texture );\n\t\toptions.levels = options.needsMipmaps ? this.getMipLevels( texture, width, height ) : 1;\n\n\t\t//\n\n\t\tif ( isRenderTarget || texture.isStorageTexture === true ) {\n\n\t\t\tbackend.createSampler( texture );\n\t\t\tbackend.createTexture( texture, options );\n\n\t\t} else {\n\n\t\t\tconst needsCreate = textureData.initialized !== true;\n\n\t\t\tif ( needsCreate ) backend.createSampler( texture );\n\n\t\t\tif ( texture.version > 0 ) {\n\n\t\t\t\tconst image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Renderer: Texture marked for update but image is undefined.' );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Renderer: Texture marked for update but image is incomplete.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( texture.images ) {\n\n\t\t\t\t\t\tconst images = [];\n\n\t\t\t\t\t\tfor ( const image of texture.images ) {\n\n\t\t\t\t\t\t\timages.push( this._getUploadImage( image ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toptions.images = images;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\toptions.image = this._getUploadImage( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureData.isDefaultTexture === undefined || textureData.isDefaultTexture === true ) {\n\n\t\t\t\t\t\tbackend.createTexture( texture, options );\n\n\t\t\t\t\t\ttextureData.isDefaultTexture = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbackend.updateTexture( texture, options );\n\n\t\t\t\t\tif ( options.needsMipmaps ) backend.generateMipmaps( texture );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// async update\n\n\t\t\t\tbackend.createDefaultTexture( texture );\n\n\t\t\t\ttextureData.isDefaultTexture = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// dispose handler\n\n\t\tif ( textureData.initialized !== true ) {\n\n\t\t\ttextureData.initialized = true;\n\n\t\t\t//\n\n\t\t\tthis.info.memory.textures ++;\n\n\t\t\t// dispose\n\n\t\t\tconst onDispose = () => {\n\n\t\t\t\ttexture.removeEventListener( 'dispose', onDispose );\n\n\t\t\t\tthis._destroyTexture( texture );\n\n\t\t\t\tthis.info.memory.textures --;\n\n\t\t\t};\n\n\t\t\ttexture.addEventListener( 'dispose', onDispose );\n\n\t\t}\n\n\t\t//\n\n\t\ttextureData.version = texture.version;\n\n\t}\n\n\tgetSize( texture, target = _size ) {\n\n\t\tlet image = texture.images ? texture.images[ 0 ] : texture.image;\n\n\t\tif ( image ) {\n\n\t\t\tif ( image.image !== undefined ) image = image.image;\n\n\t\t\ttarget.width = image.width;\n\t\t\ttarget.height = image.height;\n\t\t\ttarget.depth = texture.isCubeTexture ? 6 : ( image.depth || 1 );\n\n\t\t} else {\n\n\t\t\ttarget.width = target.height = target.depth = 1;\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tgetMipLevels( texture, width, height ) {\n\n\t\tlet mipLevelCount;\n\n\t\tif ( texture.isCompressedTexture ) {\n\n\t\t\tmipLevelCount = texture.mipmaps.length;\n\n\t\t} else {\n\n\t\t\tmipLevelCount = Math.floor( Math.log2( Math.max( width, height ) ) ) + 1;\n\n\t\t}\n\n\t\treturn mipLevelCount;\n\n\t}\n\n\tneedsMipmaps( texture ) {\n\n\t\tif ( this.isEnvironmentTexture( texture ) ) return true;\n\n\t\treturn ( texture.isCompressedTexture !== true ) /*&& ( texture.generateMipmaps === true )*/ && ( texture.minFilter !== NearestFilter ) && ( texture.minFilter !== LinearFilter );\n\n\t}\n\n\tisEnvironmentTexture( texture ) {\n\n\t\tconst mapping = texture.mapping;\n\n\t\treturn ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) || ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );\n\n\t}\n\n\t_getUploadImage( image ) {\n\n\t\tif ( this._isHTMLImage( image ) ) {\n\n\t\t\treturn this._imageToCanvas( image );\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\t_imageToCanvas( image ) {\n\n\t\tconst { width, height } = image;\n\n\t\t// eslint-disable-next-line compat/compat\n\t\tconst canvas = new OffscreenCanvas( width, height );\n\n\t\tconst context = canvas.getContext( '2d' );\n\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\treturn canvas;\n\n\t}\n\n\t_isHTMLImage( image ) {\n\n\t\treturn ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) || ( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement );\n\n\t}\n\n\t_destroyTexture( texture ) {\n\n\t\tthis.backend.destroySampler( texture );\n\t\tthis.backend.destroyTexture( texture );\n\n\t\tthis.delete( texture );\n\n\t}\n\n}\n\nexport default Textures;\n"],"mappings":";AAAA,OAAOA,OAAO,MAAM,cAAc;AAElC,SAASC,OAAO,EAAEC,YAAY,EAAEC,kBAAkB,EAAEC,kBAAkB,EAAEC,YAAY,EAAEC,aAAa,EAAEC,gCAAgC,EAAEC,gCAAgC,EAAEC,qBAAqB,EAAEC,qBAAqB,QAAQ,OAAO;AAEpO,MAAMC,KAAK,GAAG,IAAIV,OAAO,CAAC,CAAC;AAE3B,MAAMW,QAAQ,SAASZ,OAAO,CAAC;EAE9Ba,WAAWA,CAAEC,OAAO,EAAEC,IAAI,EAAG;IAE5B,KAAK,CAAC,CAAC;IAEP,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,IAAI,GAAGA,IAAI;EAEjB;EAEAC,kBAAkBA,CAAEC,YAAY,EAAEC,iBAAiB,GAAG,CAAC,EAAG;IAEzD,MAAMC,gBAAgB,GAAG,IAAI,CAACC,GAAG,CAAEH,YAAa,CAAC;IAEjD,MAAMI,WAAW,GAAGJ,YAAY,CAACK,OAAO,KAAK,CAAC,GAAG,CAAC,GAAGL,YAAY,CAACK,OAAO;IACzE,MAAMC,gBAAgB,GAAGJ,gBAAgB,CAACI,gBAAgB,KAAMJ,gBAAgB,CAACI,gBAAgB,GAAG,CAAC,CAAC,CAAE;IAExG,IAAIC,OAAO,EAAEC,QAAQ;IAErB,IAAKR,YAAY,CAACS,4BAA4B,EAAG;MAEhDD,QAAQ,GAAGR,YAAY,CAACO,OAAO;MAC/BA,OAAO,GAAGP,YAAY,CAACO,OAAO,CAAE,CAAC,CAAE;IAEpC,CAAC,MAAM;MAENC,QAAQ,GAAG,CAAER,YAAY,CAACO,OAAO,CAAE;MACnCA,OAAO,GAAGP,YAAY,CAACO,OAAO;IAE/B;IAEA,MAAMG,IAAI,GAAG,IAAI,CAACC,OAAO,CAAEJ,OAAQ,CAAC;IAEpC,MAAMK,QAAQ,GAAGF,IAAI,CAACG,KAAK,IAAIZ,iBAAiB;IAChD,MAAMa,SAAS,GAAGJ,IAAI,CAACK,MAAM,IAAId,iBAAiB;IAElD,IAAIe,YAAY,GAAGhB,YAAY,CAACgB,YAAY,IAAIV,gBAAgB,CAAEL,iBAAiB,CAAE;IACrF,IAAIgB,kBAAkB,GAAG,KAAK;IAE9B,IAAKD,YAAY,KAAKE,SAAS,EAAG;MAEjCF,YAAY,GAAG,IAAI/B,YAAY,CAAC,CAAC;MACjC+B,YAAY,CAACG,MAAM,GAAGjC,kBAAkB;MACxC8B,YAAY,CAACI,IAAI,GAAGjC,kBAAkB;MACtC6B,YAAY,CAACK,KAAK,CAACR,KAAK,GAAGD,QAAQ;MACnCI,YAAY,CAACK,KAAK,CAACN,MAAM,GAAGD,SAAS;MAErCR,gBAAgB,CAAEL,iBAAiB,CAAE,GAAGe,YAAY;IAErD;IAEA,IAAKd,gBAAgB,CAACW,KAAK,KAAKH,IAAI,CAACG,KAAK,IAAIH,IAAI,CAACK,MAAM,KAAKb,gBAAgB,CAACa,MAAM,EAAG;MAEvFE,kBAAkB,GAAG,IAAI;MACzBD,YAAY,CAACM,WAAW,GAAG,IAAI;MAE/BN,YAAY,CAACK,KAAK,CAACR,KAAK,GAAGD,QAAQ;MACnCI,YAAY,CAACK,KAAK,CAACN,MAAM,GAAGD,SAAS;IAEtC;IAEAZ,gBAAgB,CAACW,KAAK,GAAGH,IAAI,CAACG,KAAK;IACnCX,gBAAgB,CAACa,MAAM,GAAGL,IAAI,CAACK,MAAM;IACrCb,gBAAgB,CAACM,QAAQ,GAAGA,QAAQ;IACpCN,gBAAgB,CAACc,YAAY,GAAGA,YAAY;IAE5C,IAAKd,gBAAgB,CAACE,WAAW,KAAKA,WAAW,EAAG;MAEnDa,kBAAkB,GAAG,IAAI;MACzBD,YAAY,CAACM,WAAW,GAAG,IAAI;MAE/BpB,gBAAgB,CAACE,WAAW,GAAGA,WAAW;IAE3C;IAEA,MAAMmB,OAAO,GAAG;MAAEnB;IAAY,CAAC;IAG/B,KAAM,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,QAAQ,CAACiB,MAAM,EAAED,CAAC,EAAG,EAAG;MAE5C,MAAMjB,OAAO,GAAGC,QAAQ,CAAEgB,CAAC,CAAE;MAE7B,IAAKP,kBAAkB,EAAGV,OAAO,CAACe,WAAW,GAAG,IAAI;MAEpD,IAAI,CAACI,aAAa,CAAEnB,OAAO,EAAEgB,OAAQ,CAAC;IAEvC;IAEA,IAAI,CAACG,aAAa,CAAEV,YAAY,EAAEO,OAAQ,CAAC;;IAE3C;;IAEA,IAAKrB,gBAAgB,CAACyB,WAAW,KAAK,IAAI,EAAG;MAE5CzB,gBAAgB,CAACyB,WAAW,GAAG,IAAI;;MAEnC;;MAEA,MAAMC,SAAS,GAAGA,CAAA,KAAM;QAEvB5B,YAAY,CAAC6B,mBAAmB,CAAE,SAAS,EAAED,SAAU,CAAC;QAExD,IAAKpB,QAAQ,KAAKU,SAAS,EAAG;UAE7B,KAAM,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,QAAQ,CAACiB,MAAM,EAAED,CAAC,EAAG,EAAG;YAE5C,IAAI,CAACM,eAAe,CAAEtB,QAAQ,CAAEgB,CAAC,CAAG,CAAC;UAEtC;QAED,CAAC,MAAM;UAEN,IAAI,CAACM,eAAe,CAAEvB,OAAQ,CAAC;QAEhC;QAEA,IAAI,CAACuB,eAAe,CAAEd,YAAa,CAAC;MAErC,CAAC;MAEDhB,YAAY,CAAC+B,gBAAgB,CAAE,SAAS,EAAEH,SAAU,CAAC;IAEtD;EAED;EAEAF,aAAaA,CAAEnB,OAAO,EAAEgB,OAAO,GAAG,CAAC,CAAC,EAAG;IAEtC,MAAMS,WAAW,GAAG,IAAI,CAAC7B,GAAG,CAAEI,OAAQ,CAAC;IACvC,IAAKyB,WAAW,CAACL,WAAW,KAAK,IAAI,IAAIK,WAAW,CAACC,OAAO,KAAK1B,OAAO,CAAC0B,OAAO,EAAG;IAEnF,MAAMC,cAAc,GAAG3B,OAAO,CAAC4B,qBAAqB,IAAI5B,OAAO,CAAC6B,cAAc,IAAI7B,OAAO,CAAC8B,oBAAoB;IAC9G,MAAMxC,OAAO,GAAG,IAAI,CAACA,OAAO;IAE5B,IAAKqC,cAAc,IAAIF,WAAW,CAACL,WAAW,KAAK,IAAI,EAAG;MAEzD;;MAEA9B,OAAO,CAACyC,cAAc,CAAE/B,OAAQ,CAAC;MACjCV,OAAO,CAAC0C,cAAc,CAAEhC,OAAQ,CAAC;IAElC;;IAEA;;IAEA,MAAM;MAAEM,KAAK;MAAEE,MAAM;MAAEyB;IAAM,CAAC,GAAG,IAAI,CAAC7B,OAAO,CAAEJ,OAAQ,CAAC;IAExDgB,OAAO,CAACV,KAAK,GAAGA,KAAK;IACrBU,OAAO,CAACR,MAAM,GAAGA,MAAM;IACvBQ,OAAO,CAACiB,KAAK,GAAGA,KAAK;IACrBjB,OAAO,CAACkB,YAAY,GAAG,IAAI,CAACA,YAAY,CAAElC,OAAQ,CAAC;IACnDgB,OAAO,CAACmB,MAAM,GAAGnB,OAAO,CAACkB,YAAY,GAAG,IAAI,CAACE,YAAY,CAAEpC,OAAO,EAAEM,KAAK,EAAEE,MAAO,CAAC,GAAG,CAAC;;IAEvF;;IAEA,IAAKmB,cAAc,IAAI3B,OAAO,CAACqC,gBAAgB,KAAK,IAAI,EAAG;MAE1D/C,OAAO,CAACgD,aAAa,CAAEtC,OAAQ,CAAC;MAChCV,OAAO,CAACiD,aAAa,CAAEvC,OAAO,EAAEgB,OAAQ,CAAC;IAE1C,CAAC,MAAM;MAEN,MAAMwB,WAAW,GAAGf,WAAW,CAACL,WAAW,KAAK,IAAI;MAEpD,IAAKoB,WAAW,EAAGlD,OAAO,CAACgD,aAAa,CAAEtC,OAAQ,CAAC;MAEnD,IAAKA,OAAO,CAAC0B,OAAO,GAAG,CAAC,EAAG;QAE1B,MAAMZ,KAAK,GAAGd,OAAO,CAACc,KAAK;QAE3B,IAAKA,KAAK,KAAKH,SAAS,EAAG;UAE1B8B,OAAO,CAACC,IAAI,CAAE,mEAAoE,CAAC;QAEpF,CAAC,MAAM,IAAK5B,KAAK,CAAC6B,QAAQ,KAAK,KAAK,EAAG;UAEtCF,OAAO,CAACC,IAAI,CAAE,oEAAqE,CAAC;QAErF,CAAC,MAAM;UAEN,IAAK1C,OAAO,CAAC4C,MAAM,EAAG;YAErB,MAAMA,MAAM,GAAG,EAAE;YAEjB,KAAM,MAAM9B,KAAK,IAAId,OAAO,CAAC4C,MAAM,EAAG;cAErCA,MAAM,CAACC,IAAI,CAAE,IAAI,CAACC,eAAe,CAAEhC,KAAM,CAAE,CAAC;YAE7C;YAEAE,OAAO,CAAC4B,MAAM,GAAGA,MAAM;UAExB,CAAC,MAAM;YAEN5B,OAAO,CAACF,KAAK,GAAG,IAAI,CAACgC,eAAe,CAAEhC,KAAM,CAAC;UAE9C;UAEA,IAAKW,WAAW,CAACsB,gBAAgB,KAAKpC,SAAS,IAAIc,WAAW,CAACsB,gBAAgB,KAAK,IAAI,EAAG;YAE1FzD,OAAO,CAACiD,aAAa,CAAEvC,OAAO,EAAEgB,OAAQ,CAAC;YAEzCS,WAAW,CAACsB,gBAAgB,GAAG,KAAK;UAErC;UAEAzD,OAAO,CAAC6B,aAAa,CAAEnB,OAAO,EAAEgB,OAAQ,CAAC;UAEzC,IAAKA,OAAO,CAACkB,YAAY,EAAG5C,OAAO,CAAC0D,eAAe,CAAEhD,OAAQ,CAAC;QAE/D;MAED,CAAC,MAAM;QAEN;;QAEAV,OAAO,CAAC2D,oBAAoB,CAAEjD,OAAQ,CAAC;QAEvCyB,WAAW,CAACsB,gBAAgB,GAAG,IAAI;MAEpC;IAED;;IAEA;;IAEA,IAAKtB,WAAW,CAACL,WAAW,KAAK,IAAI,EAAG;MAEvCK,WAAW,CAACL,WAAW,GAAG,IAAI;;MAE9B;;MAEA,IAAI,CAAC7B,IAAI,CAAC2D,MAAM,CAACjD,QAAQ,EAAG;;MAE5B;;MAEA,MAAMoB,SAAS,GAAGA,CAAA,KAAM;QAEvBrB,OAAO,CAACsB,mBAAmB,CAAE,SAAS,EAAED,SAAU,CAAC;QAEnD,IAAI,CAACE,eAAe,CAAEvB,OAAQ,CAAC;QAE/B,IAAI,CAACT,IAAI,CAAC2D,MAAM,CAACjD,QAAQ,EAAG;MAE7B,CAAC;MAEDD,OAAO,CAACwB,gBAAgB,CAAE,SAAS,EAAEH,SAAU,CAAC;IAEjD;;IAEA;;IAEAI,WAAW,CAACC,OAAO,GAAG1B,OAAO,CAAC0B,OAAO;EAEtC;EAEAtB,OAAOA,CAAEJ,OAAO,EAAEmD,MAAM,GAAGhE,KAAK,EAAG;IAElC,IAAI2B,KAAK,GAAGd,OAAO,CAAC4C,MAAM,GAAG5C,OAAO,CAAC4C,MAAM,CAAE,CAAC,CAAE,GAAG5C,OAAO,CAACc,KAAK;IAEhE,IAAKA,KAAK,EAAG;MAEZ,IAAKA,KAAK,CAACA,KAAK,KAAKH,SAAS,EAAGG,KAAK,GAAGA,KAAK,CAACA,KAAK;MAEpDqC,MAAM,CAAC7C,KAAK,GAAGQ,KAAK,CAACR,KAAK;MAC1B6C,MAAM,CAAC3C,MAAM,GAAGM,KAAK,CAACN,MAAM;MAC5B2C,MAAM,CAAClB,KAAK,GAAGjC,OAAO,CAACoD,aAAa,GAAG,CAAC,GAAKtC,KAAK,CAACmB,KAAK,IAAI,CAAG;IAEhE,CAAC,MAAM;MAENkB,MAAM,CAAC7C,KAAK,GAAG6C,MAAM,CAAC3C,MAAM,GAAG2C,MAAM,CAAClB,KAAK,GAAG,CAAC;IAEhD;IAEA,OAAOkB,MAAM;EAEd;EAEAf,YAAYA,CAAEpC,OAAO,EAAEM,KAAK,EAAEE,MAAM,EAAG;IAEtC,IAAI6C,aAAa;IAEjB,IAAKrD,OAAO,CAACsD,mBAAmB,EAAG;MAElCD,aAAa,GAAGrD,OAAO,CAACuD,OAAO,CAACrC,MAAM;IAEvC,CAAC,MAAM;MAENmC,aAAa,GAAGG,IAAI,CAACC,KAAK,CAAED,IAAI,CAACE,IAAI,CAAEF,IAAI,CAACG,GAAG,CAAErD,KAAK,EAAEE,MAAO,CAAE,CAAE,CAAC,GAAG,CAAC;IAEzE;IAEA,OAAO6C,aAAa;EAErB;EAEAnB,YAAYA,CAAElC,OAAO,EAAG;IAEvB,IAAK,IAAI,CAAC4D,oBAAoB,CAAE5D,OAAQ,CAAC,EAAG,OAAO,IAAI;IAEvD,OAASA,OAAO,CAACsD,mBAAmB,KAAK,IAAI,CAAG,+CAAiDtD,OAAO,CAAC6D,SAAS,KAAK/E,aAAe,IAAMkB,OAAO,CAAC6D,SAAS,KAAKhF,YAAc;EAEjL;EAEA+E,oBAAoBA,CAAE5D,OAAO,EAAG;IAE/B,MAAM8D,OAAO,GAAG9D,OAAO,CAAC8D,OAAO;IAE/B,OAASA,OAAO,KAAK/E,gCAAgC,IAAI+E,OAAO,KAAK9E,gCAAgC,IAAQ8E,OAAO,KAAK7E,qBAAqB,IAAI6E,OAAO,KAAK5E,qBAAuB;EAEtL;EAEA4D,eAAeA,CAAEhC,KAAK,EAAG;IAExB,IAAK,IAAI,CAACiD,YAAY,CAAEjD,KAAM,CAAC,EAAG;MAEjC,OAAO,IAAI,CAACkD,cAAc,CAAElD,KAAM,CAAC;IAEpC;IAEA,OAAOA,KAAK;EAEb;EAEAkD,cAAcA,CAAElD,KAAK,EAAG;IAEvB,MAAM;MAAER,KAAK;MAAEE;IAAO,CAAC,GAAGM,KAAK;;IAE/B;IACA,MAAMmD,MAAM,GAAG,IAAIC,eAAe,CAAE5D,KAAK,EAAEE,MAAO,CAAC;IAEnD,MAAM2D,OAAO,GAAGF,MAAM,CAACG,UAAU,CAAE,IAAK,CAAC;IACzCD,OAAO,CAACE,SAAS,CAAEvD,KAAK,EAAE,CAAC,EAAE,CAAC,EAAER,KAAK,EAAEE,MAAO,CAAC;IAE/C,OAAOyD,MAAM;EAEd;EAEAF,YAAYA,CAAEjD,KAAK,EAAG;IAErB,OAAS,OAAOwD,gBAAgB,KAAK,WAAW,IAAIxD,KAAK,YAAYwD,gBAAgB,IAAQ,OAAOC,iBAAiB,KAAK,WAAW,IAAIzD,KAAK,YAAYyD,iBAAmB;EAE9K;EAEAhD,eAAeA,CAAEvB,OAAO,EAAG;IAE1B,IAAI,CAACV,OAAO,CAACyC,cAAc,CAAE/B,OAAQ,CAAC;IACtC,IAAI,CAACV,OAAO,CAAC0C,cAAc,CAAEhC,OAAQ,CAAC;IAEtC,IAAI,CAACwE,MAAM,CAAExE,OAAQ,CAAC;EAEvB;AAED;AAEA,eAAeZ,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}