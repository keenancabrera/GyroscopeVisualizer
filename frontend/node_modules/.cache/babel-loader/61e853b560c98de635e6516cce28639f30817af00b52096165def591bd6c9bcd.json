{"ast":null,"code":"import { createCamera } from './components/camera.js';\nimport { createCylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\nimport { createRod } from './components/rod.js';\nimport { createRenderer } from './systems/renderer.js';\nimport * as THREE from 'three';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters;\n    this.state = state;\n    this.solution = {};\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n    renderer = createRenderer();\n    renderer.setSize(container.clientWidth, container.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    container.append(renderer.domElement);\n\n    // Add elements\n    this.cylinder = createCylinder(parameters);\n    [this.verticies, this.line] = createRod(this.getCartesian());\n    this.axesHelper = new THREE.AxesHelper(3 / 2 * this.parameters.l.value);\n\n    // Adjust their positions, initialize oldPosition vector which we will need to perform rotations.\n    this.oldPosition = new THREE.Vector3();\n    this.cylinder.getWorldPosition(this.oldPosition);\n\n    // Update cylinder position and orientation\n    this.updateCylinder();\n    scene.add(this.cylinder, this.line, this.axesHelper);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  render() {\n    // used to render a single frame\n    renderer.render(scene, camera);\n  }\n  updateState(state) {\n    this.cylinder.getWorldPosition(this.oldPosition);\n    this.state = state;\n  }\n  updateSolution(solution) {\n    this.solution = solution;\n  }\n  updateParameters(parameters) {\n    this.parameters = parameters;\n  }\n  getCartesian() {\n    // return cartesian coordinates from theta, phi, and psi\n    let x = this.parameters.l.value * Math.cos(this.state.theta.value) * Math.sin(this.state.phi.value);\n    let y = this.parameters.l.value * Math.sin(this.state.theta.value) * Math.sin(this.state.phi.value);\n    let z = this.parameters.l.value * Math.cos(this.state.phi.value);\n    return {\n      x: x,\n      y: y,\n      z: z\n    };\n  }\n  updateCylinder() {\n    let cartesian = this.getCartesian();\n    let currentPosition = new THREE.Vector3(cartesian['x'], cartesian['y'], cartesian['z']);\n    let angle = this.oldPosition.angleTo(currentPosition);\n    let difference = currentPosition.clone().sub(this.oldPosition);\n    let rotationVector = new THREE.Vector3().crossVectors(difference, this.oldPosition);\n    this.cylinder.position.set(cartesian['x'], cartesian['y'], cartesian['z']);\n    this.cylinder.rotateOnWorldAxis(rotationVector.normalize(), angle);\n    this.oldPosition = currentPosition.clone();\n  }\n}\nexport { gyroscopeAnimation };","map":{"version":3,"names":["createCamera","createCylinder","createScene","createRod","createRenderer","THREE","camera","renderer","scene","gyroscopeAnimation","constructor","container","parameters","state","solution","setSize","clientWidth","clientHeight","setPixelRatio","window","devicePixelRatio","append","domElement","cylinder","verticies","line","getCartesian","axesHelper","AxesHelper","l","value","oldPosition","Vector3","getWorldPosition","updateCylinder","add","render","updateState","updateSolution","updateParameters","x","Math","cos","theta","sin","phi","y","z","cartesian","currentPosition","angle","angleTo","difference","clone","sub","rotationVector","crossVectors","position","set","rotateOnWorldAxis","normalize"],"sources":["/Users/cabrera/Documents/PortfolioWebiste/frontend/src/gyroscopeRenderer/gyroscopeAnimation.js"],"sourcesContent":["import { createCamera } from './components/camera.js';\nimport { createCylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\nimport { createRod } from './components/rod.js'\n\nimport { createRenderer } from './systems/renderer.js';\nimport * as THREE from 'three';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\n\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters\n    this.state = state\n    this.solution = {}\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n\n    renderer = createRenderer();\n    renderer.setSize(container.clientWidth, container.clientHeight)\n    renderer.setPixelRatio(window.devicePixelRatio)\n\n    container.append(renderer.domElement);\n\n    // Add elements\n    this.cylinder = createCylinder(parameters);\n    [this.verticies, this.line] = createRod(this.getCartesian())\n    this.axesHelper = new THREE.AxesHelper(3/2 * this.parameters.l.value)\n\n    // Adjust their positions, initialize oldPosition vector which we will need to perform rotations.\n    this.oldPosition = new THREE.Vector3()\n    this.cylinder.getWorldPosition(this.oldPosition)\n\n    // Update cylinder position and orientation\n    this.updateCylinder()\n    scene.add(this.cylinder, this.line, this.axesHelper);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  \n  render() { // used to render a single frame\n    renderer.render(scene, camera);\n  }\n\n  updateState(state){\n    this.cylinder.getWorldPosition(this.oldPosition)\n    this.state = state\n  }\n\n  updateSolution(solution){\n    this.solution = solution\n  }\n\n  updateParameters(parameters){\n    this.parameters = parameters\n  }\n\n  getCartesian(){ // return cartesian coordinates from theta, phi, and psi\n    let x = this.parameters.l.value * Math.cos(this.state.theta.value) * Math.sin(this.state.phi.value)\n    let y = this.parameters.l.value * Math.sin(this.state.theta.value) * Math.sin(this.state.phi.value)\n    let z = this.parameters.l.value * Math.cos(this.state.phi.value)\n\n    return {x:x, y:y, z:z}\n  }\n\n  updateCylinder(){\n    let cartesian = this.getCartesian()\n    let currentPosition = new THREE.Vector3(cartesian['x'], cartesian['y'], cartesian['z'])\n\n    let angle = this.oldPosition.angleTo(currentPosition)\n    let difference = currentPosition.clone().sub(this.oldPosition)\n    let rotationVector = new THREE.Vector3().crossVectors(difference, this.oldPosition)\n\n    this.cylinder.position.set(cartesian['x'], cartesian['y'], cartesian['z'])\n    this.cylinder.rotateOnWorldAxis(rotationVector.normalize(), angle)\n\n    this.oldPosition = currentPosition.clone()\n  }\n\n}\n\nexport { gyroscopeAnimation };"],"mappings":"AAAA,SAASA,YAAY,QAAQ,wBAAwB;AACrD,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,SAAS,QAAQ,qBAAqB;AAE/C,SAASC,cAAc,QAAQ,uBAAuB;AACtD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B;;AAEA;AACA;AACA,IAAIC,MAAM;AACV,IAAIC,QAAQ;AACZ,IAAIC,KAAK;AAET,MAAMC,kBAAkB,CAAC;EACvBC,WAAWA,CAACC,SAAS,EAAEC,UAAU,EAAEC,KAAK,EAAE;IACxC,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;;IAElB;IACAR,MAAM,GAAGN,YAAY,CAACW,SAAS,EAAE,IAAI,CAACC,UAAU,CAAC;IACjDJ,KAAK,GAAGN,WAAW,CAAC,CAAC;IAErBK,QAAQ,GAAGH,cAAc,CAAC,CAAC;IAC3BG,QAAQ,CAACQ,OAAO,CAACJ,SAAS,CAACK,WAAW,EAAEL,SAAS,CAACM,YAAY,CAAC;IAC/DV,QAAQ,CAACW,aAAa,CAACC,MAAM,CAACC,gBAAgB,CAAC;IAE/CT,SAAS,CAACU,MAAM,CAACd,QAAQ,CAACe,UAAU,CAAC;;IAErC;IACA,IAAI,CAACC,QAAQ,GAAGtB,cAAc,CAACW,UAAU,CAAC;IAC1C,CAAC,IAAI,CAACY,SAAS,EAAE,IAAI,CAACC,IAAI,CAAC,GAAGtB,SAAS,CAAC,IAAI,CAACuB,YAAY,CAAC,CAAC,CAAC;IAC5D,IAAI,CAACC,UAAU,GAAG,IAAItB,KAAK,CAACuB,UAAU,CAAC,CAAC,GAAC,CAAC,GAAG,IAAI,CAAChB,UAAU,CAACiB,CAAC,CAACC,KAAK,CAAC;;IAErE;IACA,IAAI,CAACC,WAAW,GAAG,IAAI1B,KAAK,CAAC2B,OAAO,CAAC,CAAC;IACtC,IAAI,CAACT,QAAQ,CAACU,gBAAgB,CAAC,IAAI,CAACF,WAAW,CAAC;;IAEhD;IACA,IAAI,CAACG,cAAc,CAAC,CAAC;IACrB1B,KAAK,CAAC2B,GAAG,CAAC,IAAI,CAACZ,QAAQ,EAAE,IAAI,CAACE,IAAI,EAAE,IAAI,CAACE,UAAU,CAAC;;IAEpD;EACF;;EAGAS,MAAMA,CAAA,EAAG;IAAE;IACT7B,QAAQ,CAAC6B,MAAM,CAAC5B,KAAK,EAAEF,MAAM,CAAC;EAChC;EAEA+B,WAAWA,CAACxB,KAAK,EAAC;IAChB,IAAI,CAACU,QAAQ,CAACU,gBAAgB,CAAC,IAAI,CAACF,WAAW,CAAC;IAChD,IAAI,CAAClB,KAAK,GAAGA,KAAK;EACpB;EAEAyB,cAAcA,CAACxB,QAAQ,EAAC;IACtB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC1B;EAEAyB,gBAAgBA,CAAC3B,UAAU,EAAC;IAC1B,IAAI,CAACA,UAAU,GAAGA,UAAU;EAC9B;EAEAc,YAAYA,CAAA,EAAE;IAAE;IACd,IAAIc,CAAC,GAAG,IAAI,CAAC5B,UAAU,CAACiB,CAAC,CAACC,KAAK,GAAGW,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC7B,KAAK,CAAC8B,KAAK,CAACb,KAAK,CAAC,GAAGW,IAAI,CAACG,GAAG,CAAC,IAAI,CAAC/B,KAAK,CAACgC,GAAG,CAACf,KAAK,CAAC;IACnG,IAAIgB,CAAC,GAAG,IAAI,CAAClC,UAAU,CAACiB,CAAC,CAACC,KAAK,GAAGW,IAAI,CAACG,GAAG,CAAC,IAAI,CAAC/B,KAAK,CAAC8B,KAAK,CAACb,KAAK,CAAC,GAAGW,IAAI,CAACG,GAAG,CAAC,IAAI,CAAC/B,KAAK,CAACgC,GAAG,CAACf,KAAK,CAAC;IACnG,IAAIiB,CAAC,GAAG,IAAI,CAACnC,UAAU,CAACiB,CAAC,CAACC,KAAK,GAAGW,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC7B,KAAK,CAACgC,GAAG,CAACf,KAAK,CAAC;IAEhE,OAAO;MAACU,CAAC,EAACA,CAAC;MAAEM,CAAC,EAACA,CAAC;MAAEC,CAAC,EAACA;IAAC,CAAC;EACxB;EAEAb,cAAcA,CAAA,EAAE;IACd,IAAIc,SAAS,GAAG,IAAI,CAACtB,YAAY,CAAC,CAAC;IACnC,IAAIuB,eAAe,GAAG,IAAI5C,KAAK,CAAC2B,OAAO,CAACgB,SAAS,CAAC,GAAG,CAAC,EAAEA,SAAS,CAAC,GAAG,CAAC,EAAEA,SAAS,CAAC,GAAG,CAAC,CAAC;IAEvF,IAAIE,KAAK,GAAG,IAAI,CAACnB,WAAW,CAACoB,OAAO,CAACF,eAAe,CAAC;IACrD,IAAIG,UAAU,GAAGH,eAAe,CAACI,KAAK,CAAC,CAAC,CAACC,GAAG,CAAC,IAAI,CAACvB,WAAW,CAAC;IAC9D,IAAIwB,cAAc,GAAG,IAAIlD,KAAK,CAAC2B,OAAO,CAAC,CAAC,CAACwB,YAAY,CAACJ,UAAU,EAAE,IAAI,CAACrB,WAAW,CAAC;IAEnF,IAAI,CAACR,QAAQ,CAACkC,QAAQ,CAACC,GAAG,CAACV,SAAS,CAAC,GAAG,CAAC,EAAEA,SAAS,CAAC,GAAG,CAAC,EAAEA,SAAS,CAAC,GAAG,CAAC,CAAC;IAC1E,IAAI,CAACzB,QAAQ,CAACoC,iBAAiB,CAACJ,cAAc,CAACK,SAAS,CAAC,CAAC,EAAEV,KAAK,CAAC;IAElE,IAAI,CAACnB,WAAW,GAAGkB,eAAe,CAACI,KAAK,CAAC,CAAC;EAC5C;AAEF;AAEA,SAAS5C,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}