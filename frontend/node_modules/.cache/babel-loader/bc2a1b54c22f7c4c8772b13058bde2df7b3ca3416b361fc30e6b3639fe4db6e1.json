{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\nimport ConvertNode from '../utils/ConvertNode.js';\nimport JoinNode from '../utils/JoinNode.js';\nimport SplitNode from '../utils/SplitNode.js';\nimport SetNode from '../utils/SetNode.js';\nimport ConstNode from '../core/ConstNode.js';\nimport { getValueFromType, getValueType } from '../core/NodeUtils.js';\nconst NodeElements = new Map(); // @TODO: Currently only a few nodes are added, probably also add others\n\nexport function addNodeElement(name, nodeElement) {\n  if (NodeElements.has(name)) throw new Error(`Redefinition of node element ${name}`);\n  if (typeof nodeElement !== 'function') throw new Error(`Node element ${name} is not a function`);\n  NodeElements.set(name, nodeElement);\n}\nconst parseSwizzle = props => props.replace(/r|s/g, 'x').replace(/g|t/g, 'y').replace(/b|p/g, 'z').replace(/a|q/g, 'w');\nconst shaderNodeHandler = {\n  setup(NodeClosure, params) {\n    const inputs = params.shift();\n    return NodeClosure(nodeObjects(inputs), ...params);\n  },\n  get: function (node, prop, nodeObj) {\n    if (typeof prop === 'string' && node[prop] === undefined) {\n      if (NodeElements.has(prop)) {\n        const nodeElement = NodeElements.get(prop);\n        return (...params) => nodeElement(nodeObj, ...params);\n      } else if (prop === 'self') {\n        return node;\n      } else if (prop.endsWith('Assign') && NodeElements.has(prop.slice(0, prop.length - 'Assign'.length))) {\n        const nodeElement = NodeElements.get(prop.slice(0, prop.length - 'Assign'.length));\n        return (...params) => nodeObj.assign(nodeElement(nodeObj, ...params));\n      } else if (/^[xyzwrgbastpq]{1,4}$/.test(prop) === true) {\n        // accessing properties ( swizzle )\n\n        prop = parseSwizzle(prop);\n        return nodeObject(new SplitNode(node, prop));\n      } else if (/^set[XYZWRGBASTPQ]{1,4}$/.test(prop) === true) {\n        // set properties ( swizzle )\n\n        prop = parseSwizzle(prop.slice(3).toLowerCase());\n\n        // sort to xyzw sequence\n\n        prop = prop.split('').sort().join('');\n        return value => nodeObject(new SetNode(node, prop, value));\n      } else if (prop === 'width' || prop === 'height' || prop === 'depth') {\n        // accessing property\n\n        if (prop === 'width') prop = 'x';else if (prop === 'height') prop = 'y';else if (prop === 'depth') prop = 'z';\n        return nodeObject(new SplitNode(node, prop));\n      } else if (/^\\d+$/.test(prop) === true) {\n        // accessing array\n\n        return nodeObject(new ArrayElementNode(node, new ConstNode(Number(prop), 'uint')));\n      }\n    }\n    return node[prop];\n  }\n};\nconst nodeObjectsCacheMap = new WeakMap();\nconst ShaderNodeObject = function (obj, altType = null) {\n  const type = getValueType(obj);\n  if (type === 'node') {\n    let nodeObject = nodeObjectsCacheMap.get(obj);\n    if (nodeObject === undefined) {\n      nodeObject = new Proxy(obj, shaderNodeHandler);\n      nodeObjectsCacheMap.set(obj, nodeObject);\n      nodeObjectsCacheMap.set(nodeObject, nodeObject);\n    }\n    return nodeObject;\n  } else if (altType === null && (type === 'float' || type === 'boolean') || type && type !== 'shader' && type !== 'string') {\n    return nodeObject(getConstNode(obj, altType));\n  } else if (type === 'shader') {\n    return tslFn(obj);\n  }\n  return obj;\n};\nconst ShaderNodeObjects = function (objects, altType = null) {\n  for (const name in objects) {\n    objects[name] = nodeObject(objects[name], altType);\n  }\n  return objects;\n};\nconst ShaderNodeArray = function (array, altType = null) {\n  const len = array.length;\n  for (let i = 0; i < len; i++) {\n    array[i] = nodeObject(array[i], altType);\n  }\n  return array;\n};\nconst ShaderNodeProxy = function (NodeClass, scope = null, factor = null, settings = null) {\n  const assignNode = node => nodeObject(settings !== null ? Object.assign(node, settings) : node);\n  if (scope === null) {\n    return (...params) => {\n      return assignNode(new NodeClass(...nodeArray(params)));\n    };\n  } else if (factor !== null) {\n    factor = nodeObject(factor);\n    return (...params) => {\n      return assignNode(new NodeClass(scope, ...nodeArray(params), factor));\n    };\n  } else {\n    return (...params) => {\n      return assignNode(new NodeClass(scope, ...nodeArray(params)));\n    };\n  }\n};\nconst ShaderNodeImmutable = function (NodeClass, ...params) {\n  return nodeObject(new NodeClass(...nodeArray(params)));\n};\nclass ShaderCallNodeInternal extends Node {\n  constructor(shaderNode, inputNodes) {\n    super();\n    this.shaderNode = shaderNode;\n    this.inputNodes = inputNodes;\n  }\n  getNodeType(builder) {\n    const {\n      outputNode\n    } = builder.getNodeProperties(this);\n    return outputNode ? outputNode.getNodeType(builder) : super.getNodeType(builder);\n  }\n  call(builder) {\n    const {\n      shaderNode,\n      inputNodes\n    } = this;\n    const jsFunc = shaderNode.jsFunc;\n    const outputNode = inputNodes !== null ? jsFunc(nodeObjects(inputNodes), builder.stack, builder) : jsFunc(builder.stack, builder);\n    return nodeObject(outputNode);\n  }\n  setup(builder) {\n    builder.addStack();\n    builder.stack.outputNode = this.call(builder);\n    return builder.removeStack();\n  }\n  generate(builder, output) {\n    const {\n      outputNode\n    } = builder.getNodeProperties(this);\n    if (outputNode === null) {\n      // TSL: It's recommended to use `tslFn` in setup() pass.\n\n      return this.call(builder).build(builder, output);\n    }\n    return super.generate(builder, output);\n  }\n}\nclass ShaderNodeInternal extends Node {\n  constructor(jsFunc) {\n    super();\n    this.jsFunc = jsFunc;\n  }\n  call(inputs = null) {\n    return nodeObject(new ShaderCallNodeInternal(this, inputs));\n  }\n  setup() {\n    return this.call();\n  }\n}\nconst bools = [false, true];\nconst uints = [0, 1, 2, 3];\nconst ints = [-1, -2];\nconst floats = [0.5, 1.5, 1 / 3, 1e-6, 1e6, Math.PI, Math.PI * 2, 1 / Math.PI, 2 / Math.PI, 1 / (Math.PI * 2), Math.PI / 2];\nconst boolsCacheMap = new Map();\nfor (const bool of bools) boolsCacheMap.set(bool, new ConstNode(bool));\nconst uintsCacheMap = new Map();\nfor (const uint of uints) uintsCacheMap.set(uint, new ConstNode(uint, 'uint'));\nconst intsCacheMap = new Map([...uintsCacheMap].map(el => new ConstNode(el.value, 'int')));\nfor (const int of ints) intsCacheMap.set(int, new ConstNode(int, 'int'));\nconst floatsCacheMap = new Map([...intsCacheMap].map(el => new ConstNode(el.value)));\nfor (const float of floats) floatsCacheMap.set(float, new ConstNode(float));\nfor (const float of floats) floatsCacheMap.set(-float, new ConstNode(-float));\nconst cacheMaps = {\n  bool: boolsCacheMap,\n  uint: uintsCacheMap,\n  ints: intsCacheMap,\n  float: floatsCacheMap\n};\nconst constNodesCacheMap = new Map([...boolsCacheMap, ...floatsCacheMap]);\nconst getConstNode = (value, type) => {\n  if (constNodesCacheMap.has(value)) {\n    return constNodesCacheMap.get(value);\n  } else if (value.isNode === true) {\n    return value;\n  } else {\n    return new ConstNode(value, type);\n  }\n};\nconst safeGetNodeType = node => {\n  try {\n    return node.getNodeType();\n  } catch (_) {\n    return undefined;\n  }\n};\nconst ConvertType = function (type, cacheMap = null) {\n  return (...params) => {\n    if (params.length === 0 || !['bool', 'float', 'int', 'uint'].includes(type) && params.every(param => typeof param !== 'object')) {\n      params = [getValueFromType(type, ...params)];\n    }\n    if (params.length === 1 && cacheMap !== null && cacheMap.has(params[0])) {\n      return nodeObject(cacheMap.get(params[0]));\n    }\n    if (params.length === 1) {\n      const node = getConstNode(params[0], type);\n      if (safeGetNodeType(node) === type) return nodeObject(node);\n      return nodeObject(new ConvertNode(node, type));\n    }\n    const nodes = params.map(param => getConstNode(param));\n    return nodeObject(new JoinNode(nodes, type));\n  };\n};\n\n// exports\n\n// utils\n\nexport const getConstNodeType = value => value !== undefined && value !== null ? value.nodeType || value.convertTo || (typeof value === 'string' ? value : null) : null;\n\n// shader node base\n\nexport function ShaderNode(jsFunc) {\n  return new Proxy(new ShaderNodeInternal(jsFunc), shaderNodeHandler);\n}\nexport const nodeObject = (val, altType = null) => /* new */ShaderNodeObject(val, altType);\nexport const nodeObjects = (val, altType = null) => new ShaderNodeObjects(val, altType);\nexport const nodeArray = (val, altType = null) => new ShaderNodeArray(val, altType);\nexport const nodeProxy = (...params) => new ShaderNodeProxy(...params);\nexport const nodeImmutable = (...params) => new ShaderNodeImmutable(...params);\nexport const shader = jsFunc => {\n  // @deprecated, r154\n\n  console.warn('TSL: shader() is deprecated. Use tslFn() instead.');\n  return new ShaderNode(jsFunc);\n};\nexport const tslFn = jsFunc => {\n  const shaderNode = new ShaderNode(jsFunc);\n  return inputs => shaderNode.call(inputs);\n};\naddNodeClass('ShaderNode', ShaderNode);\n\n// types\n// @TODO: Maybe export from ConstNode.js?\n\nexport const color = new ConvertType('color');\nexport const float = new ConvertType('float', cacheMaps.float);\nexport const int = new ConvertType('int', cacheMaps.int);\nexport const uint = new ConvertType('uint', cacheMaps.uint);\nexport const bool = new ConvertType('bool', cacheMaps.bool);\nexport const vec2 = new ConvertType('vec2');\nexport const ivec2 = new ConvertType('ivec2');\nexport const uvec2 = new ConvertType('uvec2');\nexport const bvec2 = new ConvertType('bvec2');\nexport const vec3 = new ConvertType('vec3');\nexport const ivec3 = new ConvertType('ivec3');\nexport const uvec3 = new ConvertType('uvec3');\nexport const bvec3 = new ConvertType('bvec3');\nexport const vec4 = new ConvertType('vec4');\nexport const ivec4 = new ConvertType('ivec4');\nexport const uvec4 = new ConvertType('uvec4');\nexport const bvec4 = new ConvertType('bvec4');\nexport const mat3 = new ConvertType('mat3');\nexport const imat3 = new ConvertType('imat3');\nexport const umat3 = new ConvertType('umat3');\nexport const bmat3 = new ConvertType('bmat3');\nexport const mat4 = new ConvertType('mat4');\nexport const imat4 = new ConvertType('imat4');\nexport const umat4 = new ConvertType('umat4');\nexport const bmat4 = new ConvertType('bmat4');\nexport const string = (value = '') => nodeObject(new ConstNode(value, 'string'));\nexport const arrayBuffer = value => nodeObject(new ConstNode(value, 'ArrayBuffer'));\naddNodeElement('color', color);\naddNodeElement('float', float);\naddNodeElement('int', int);\naddNodeElement('uint', uint);\naddNodeElement('bool', bool);\naddNodeElement('vec2', vec2);\naddNodeElement('ivec2', ivec2);\naddNodeElement('uvec2', uvec2);\naddNodeElement('bvec2', bvec2);\naddNodeElement('vec3', vec3);\naddNodeElement('ivec3', ivec3);\naddNodeElement('uvec3', uvec3);\naddNodeElement('bvec3', bvec3);\naddNodeElement('vec4', vec4);\naddNodeElement('ivec4', ivec4);\naddNodeElement('uvec4', uvec4);\naddNodeElement('bvec4', bvec4);\naddNodeElement('mat3', mat3);\naddNodeElement('imat3', imat3);\naddNodeElement('umat3', umat3);\naddNodeElement('bmat3', bmat3);\naddNodeElement('mat4', mat4);\naddNodeElement('imat4', imat4);\naddNodeElement('umat4', umat4);\naddNodeElement('bmat4', bmat4);\naddNodeElement('string', string);\naddNodeElement('arrayBuffer', arrayBuffer);\n\n// basic nodes\n// HACK - we cannot export them from the corresponding files because of the cyclic dependency\nexport const element = nodeProxy(ArrayElementNode);\nexport const convert = (node, types) => nodeObject(new ConvertNode(nodeObject(node), types));\nexport const split = (node, channels) => nodeObject(new SplitNode(nodeObject(node), channels));\naddNodeElement('element', element);\naddNodeElement('convert', convert);","map":{"version":3,"names":["Node","addNodeClass","ArrayElementNode","ConvertNode","JoinNode","SplitNode","SetNode","ConstNode","getValueFromType","getValueType","NodeElements","Map","addNodeElement","name","nodeElement","has","Error","set","parseSwizzle","props","replace","shaderNodeHandler","setup","NodeClosure","params","inputs","shift","nodeObjects","get","node","prop","nodeObj","undefined","endsWith","slice","length","assign","test","nodeObject","toLowerCase","split","sort","join","value","Number","nodeObjectsCacheMap","WeakMap","ShaderNodeObject","obj","altType","type","Proxy","getConstNode","tslFn","ShaderNodeObjects","objects","ShaderNodeArray","array","len","i","ShaderNodeProxy","NodeClass","scope","factor","settings","assignNode","Object","nodeArray","ShaderNodeImmutable","ShaderCallNodeInternal","constructor","shaderNode","inputNodes","getNodeType","builder","outputNode","getNodeProperties","call","jsFunc","stack","addStack","removeStack","generate","output","build","ShaderNodeInternal","bools","uints","ints","floats","Math","PI","boolsCacheMap","bool","uintsCacheMap","uint","intsCacheMap","map","el","int","floatsCacheMap","float","cacheMaps","constNodesCacheMap","isNode","safeGetNodeType","_","ConvertType","cacheMap","includes","every","param","nodes","getConstNodeType","nodeType","convertTo","ShaderNode","val","nodeProxy","nodeImmutable","shader","console","warn","color","vec2","ivec2","uvec2","bvec2","vec3","ivec3","uvec3","bvec3","vec4","ivec4","uvec4","bvec4","mat3","imat3","umat3","bmat3","mat4","imat4","umat4","bmat4","string","arrayBuffer","element","convert","types","channels"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/nodes/shadernode/ShaderNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\nimport ConvertNode from '../utils/ConvertNode.js';\nimport JoinNode from '../utils/JoinNode.js';\nimport SplitNode from '../utils/SplitNode.js';\nimport SetNode from '../utils/SetNode.js';\nimport ConstNode from '../core/ConstNode.js';\nimport { getValueFromType, getValueType } from '../core/NodeUtils.js';\n\nconst NodeElements = new Map(); // @TODO: Currently only a few nodes are added, probably also add others\n\nexport function addNodeElement( name, nodeElement ) {\n\n\tif ( NodeElements.has( name ) ) throw new Error( `Redefinition of node element ${ name }` );\n\tif ( typeof nodeElement !== 'function' ) throw new Error( `Node element ${ name } is not a function` );\n\n\tNodeElements.set( name, nodeElement );\n\n}\n\nconst parseSwizzle = ( props ) => props.replace( /r|s/g, 'x' ).replace( /g|t/g, 'y' ).replace( /b|p/g, 'z' ).replace( /a|q/g, 'w' );\n\nconst shaderNodeHandler = {\n\n\tsetup( NodeClosure, params ) {\n\n\t\tconst inputs = params.shift();\n\n\t\treturn NodeClosure( nodeObjects( inputs ), ...params );\n\n\t},\n\n\tget: function ( node, prop, nodeObj ) {\n\n\t\tif ( typeof prop === 'string' && node[ prop ] === undefined ) {\n\n\t\t\tif ( NodeElements.has( prop ) ) {\n\n\t\t\t\tconst nodeElement = NodeElements.get( prop );\n\n\t\t\t\treturn ( ...params ) => nodeElement( nodeObj, ...params );\n\n\t\t\t} else if ( prop === 'self' ) {\n\n\t\t\t\treturn node;\n\n\t\t\t} else if ( prop.endsWith( 'Assign' ) && NodeElements.has( prop.slice( 0, prop.length - 'Assign'.length ) ) ) {\n\n\t\t\t\tconst nodeElement = NodeElements.get( prop.slice( 0, prop.length - 'Assign'.length ) );\n\n\t\t\t\treturn ( ...params ) => nodeObj.assign( nodeElement( nodeObj, ...params ) );\n\n\t\t\t} else if ( /^[xyzwrgbastpq]{1,4}$/.test( prop ) === true ) {\n\n\t\t\t\t// accessing properties ( swizzle )\n\n\t\t\t\tprop = parseSwizzle( prop );\n\n\t\t\t\treturn nodeObject( new SplitNode( node, prop ) );\n\n\t\t\t} else if ( /^set[XYZWRGBASTPQ]{1,4}$/.test( prop ) === true ) {\n\n\t\t\t\t// set properties ( swizzle )\n\n\t\t\t\tprop = parseSwizzle( prop.slice( 3 ).toLowerCase() );\n\n\t\t\t\t// sort to xyzw sequence\n\n\t\t\t\tprop = prop.split( '' ).sort().join( '' );\n\n\t\t\t\treturn ( value ) => nodeObject( new SetNode( node, prop, value ) );\n\n\t\t\t} else if ( prop === 'width' || prop === 'height' || prop === 'depth' ) {\n\n\t\t\t\t// accessing property\n\n\t\t\t\tif ( prop === 'width' ) prop = 'x';\n\t\t\t\telse if ( prop === 'height' ) prop = 'y';\n\t\t\t\telse if ( prop === 'depth' ) prop = 'z';\n\n\t\t\t\treturn nodeObject( new SplitNode( node, prop ) );\n\n\t\t\t} else if ( /^\\d+$/.test( prop ) === true ) {\n\n\t\t\t\t// accessing array\n\n\t\t\t\treturn nodeObject( new ArrayElementNode( node, new ConstNode( Number( prop ), 'uint' ) ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn node[ prop ];\n\n\t}\n\n};\n\nconst nodeObjectsCacheMap = new WeakMap();\n\nconst ShaderNodeObject = function ( obj, altType = null ) {\n\n\tconst type = getValueType( obj );\n\n\tif ( type === 'node' ) {\n\n\t\tlet nodeObject = nodeObjectsCacheMap.get( obj );\n\n\t\tif ( nodeObject === undefined ) {\n\n\t\t\tnodeObject = new Proxy( obj, shaderNodeHandler );\n\t\t\tnodeObjectsCacheMap.set( obj, nodeObject );\n\t\t\tnodeObjectsCacheMap.set( nodeObject, nodeObject );\n\n\t\t}\n\n\t\treturn nodeObject;\n\n\t} else if ( ( altType === null && ( type === 'float' || type === 'boolean' ) ) || ( type && type !== 'shader' && type !== 'string' ) ) {\n\n\t\treturn nodeObject( getConstNode( obj, altType ) );\n\n\t} else if ( type === 'shader' ) {\n\n\t\treturn tslFn( obj );\n\n\t}\n\n\treturn obj;\n\n};\n\nconst ShaderNodeObjects = function ( objects, altType = null ) {\n\n\tfor ( const name in objects ) {\n\n\t\tobjects[ name ] = nodeObject( objects[ name ], altType );\n\n\t}\n\n\treturn objects;\n\n};\n\nconst ShaderNodeArray = function ( array, altType = null ) {\n\n\tconst len = array.length;\n\n\tfor ( let i = 0; i < len; i ++ ) {\n\n\t\tarray[ i ] = nodeObject( array[ i ], altType );\n\n\t}\n\n\treturn array;\n\n};\n\nconst ShaderNodeProxy = function ( NodeClass, scope = null, factor = null, settings = null ) {\n\n\tconst assignNode = ( node ) => nodeObject( settings !== null ? Object.assign( node, settings ) : node );\n\n\tif ( scope === null ) {\n\n\t\treturn ( ...params ) => {\n\n\t\t\treturn assignNode( new NodeClass( ...nodeArray( params ) ) );\n\n\t\t};\n\n\t} else if ( factor !== null ) {\n\n\t\tfactor = nodeObject( factor );\n\n\t\treturn ( ...params ) => {\n\n\t\t\treturn assignNode( new NodeClass( scope, ...nodeArray( params ), factor ) );\n\n\t\t};\n\n\t} else {\n\n\t\treturn ( ...params ) => {\n\n\t\t\treturn assignNode( new NodeClass( scope, ...nodeArray( params ) ) );\n\n\t\t};\n\n\t}\n\n};\n\nconst ShaderNodeImmutable = function ( NodeClass, ...params ) {\n\n\treturn nodeObject( new NodeClass( ...nodeArray( params ) ) );\n\n};\n\nclass ShaderCallNodeInternal extends Node {\n\n\tconstructor( shaderNode, inputNodes ) {\n\n\t\tsuper();\n\n\t\tthis.shaderNode = shaderNode;\n\t\tthis.inputNodes = inputNodes;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tconst { outputNode } = builder.getNodeProperties( this );\n\n\t\treturn outputNode ? outputNode.getNodeType( builder ) : super.getNodeType( builder );\n\n\t}\n\n\tcall( builder ) {\n\n\t\tconst { shaderNode, inputNodes } = this;\n\n\t\tconst jsFunc = shaderNode.jsFunc;\n\t\tconst outputNode = inputNodes !== null ? jsFunc( nodeObjects( inputNodes ), builder.stack, builder ) : jsFunc( builder.stack, builder );\n\n\t\treturn nodeObject( outputNode );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tbuilder.addStack();\n\n\t\tbuilder.stack.outputNode = this.call( builder );\n\n\t\treturn builder.removeStack();\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst { outputNode } = builder.getNodeProperties( this );\n\n\t\tif ( outputNode === null ) {\n\n\t\t\t// TSL: It's recommended to use `tslFn` in setup() pass.\n\n\t\t\treturn this.call( builder ).build( builder, output );\n\n\t\t}\n\n\t\treturn super.generate( builder, output );\n\n\t}\n\n}\n\nclass ShaderNodeInternal extends Node {\n\n\tconstructor( jsFunc ) {\n\n\t\tsuper();\n\n\t\tthis.jsFunc = jsFunc;\n\n\t}\n\n\tcall( inputs = null ) {\n\n\t\treturn nodeObject( new ShaderCallNodeInternal( this, inputs ) );\n\n\t}\n\n\tsetup() {\n\n\t\treturn this.call();\n\n\t}\n\n}\n\nconst bools = [ false, true ];\nconst uints = [ 0, 1, 2, 3 ];\nconst ints = [ - 1, - 2 ];\nconst floats = [ 0.5, 1.5, 1 / 3, 1e-6, 1e6, Math.PI, Math.PI * 2, 1 / Math.PI, 2 / Math.PI, 1 / ( Math.PI * 2 ), Math.PI / 2 ];\n\nconst boolsCacheMap = new Map();\nfor ( const bool of bools ) boolsCacheMap.set( bool, new ConstNode( bool ) );\n\nconst uintsCacheMap = new Map();\nfor ( const uint of uints ) uintsCacheMap.set( uint, new ConstNode( uint, 'uint' ) );\n\nconst intsCacheMap = new Map( [ ...uintsCacheMap ].map( el => new ConstNode( el.value, 'int' ) ) );\nfor ( const int of ints ) intsCacheMap.set( int, new ConstNode( int, 'int' ) );\n\nconst floatsCacheMap = new Map( [ ...intsCacheMap ].map( el => new ConstNode( el.value ) ) );\nfor ( const float of floats ) floatsCacheMap.set( float, new ConstNode( float ) );\nfor ( const float of floats ) floatsCacheMap.set( - float, new ConstNode( - float ) );\n\nconst cacheMaps = { bool: boolsCacheMap, uint: uintsCacheMap, ints: intsCacheMap, float: floatsCacheMap };\n\nconst constNodesCacheMap = new Map( [ ...boolsCacheMap, ...floatsCacheMap ] );\n\nconst getConstNode = ( value, type ) => {\n\n\tif ( constNodesCacheMap.has( value ) ) {\n\n\t\treturn constNodesCacheMap.get( value );\n\n\t} else if ( value.isNode === true ) {\n\n\t\treturn value;\n\n\t} else {\n\n\t\treturn new ConstNode( value, type );\n\n\t}\n\n};\n\nconst safeGetNodeType = ( node ) => {\n\n\ttry {\n\n\t\treturn node.getNodeType();\n\n\t} catch ( _ ) {\n\n\t\treturn undefined;\n\n\t}\n\n};\n\nconst ConvertType = function ( type, cacheMap = null ) {\n\n\treturn ( ...params ) => {\n\n\t\tif ( params.length === 0 || ( ! [ 'bool', 'float', 'int', 'uint' ].includes( type ) && params.every( param => typeof param !== 'object' ) ) ) {\n\n\t\t\tparams = [ getValueFromType( type, ...params ) ];\n\n\t\t}\n\n\t\tif ( params.length === 1 && cacheMap !== null && cacheMap.has( params[ 0 ] ) ) {\n\n\t\t\treturn nodeObject( cacheMap.get( params[ 0 ] ) );\n\n\t\t}\n\n\t\tif ( params.length === 1 ) {\n\n\t\t\tconst node = getConstNode( params[ 0 ], type );\n\t\t\tif ( safeGetNodeType( node ) === type ) return nodeObject( node );\n\t\t\treturn nodeObject( new ConvertNode( node, type ) );\n\n\t\t}\n\n\t\tconst nodes = params.map( param => getConstNode( param ) );\n\t\treturn nodeObject( new JoinNode( nodes, type ) );\n\n\t};\n\n};\n\n// exports\n\n// utils\n\nexport const getConstNodeType = ( value ) => ( value !== undefined && value !== null ) ? ( value.nodeType || value.convertTo || ( typeof value === 'string' ? value : null ) ) : null;\n\n// shader node base\n\nexport function ShaderNode( jsFunc ) {\n\n\treturn new Proxy( new ShaderNodeInternal( jsFunc ), shaderNodeHandler );\n\n}\n\nexport const nodeObject = ( val, altType = null ) => /* new */ ShaderNodeObject( val, altType );\nexport const nodeObjects = ( val, altType = null ) => new ShaderNodeObjects( val, altType );\nexport const nodeArray = ( val, altType = null ) => new ShaderNodeArray( val, altType );\nexport const nodeProxy = ( ...params ) => new ShaderNodeProxy( ...params );\nexport const nodeImmutable = ( ...params ) => new ShaderNodeImmutable( ...params );\n\nexport const shader = ( jsFunc ) => { // @deprecated, r154\n\n\tconsole.warn( 'TSL: shader() is deprecated. Use tslFn() instead.' );\n\n\treturn new ShaderNode( jsFunc );\n\n};\n\nexport const tslFn = ( jsFunc ) => {\n\n\tconst shaderNode = new ShaderNode( jsFunc );\n\n\treturn ( inputs ) => shaderNode.call( inputs );\n\n};\n\naddNodeClass( 'ShaderNode', ShaderNode );\n\n// types\n// @TODO: Maybe export from ConstNode.js?\n\nexport const color = new ConvertType( 'color' );\n\nexport const float = new ConvertType( 'float', cacheMaps.float );\nexport const int = new ConvertType( 'int', cacheMaps.int );\nexport const uint = new ConvertType( 'uint', cacheMaps.uint );\nexport const bool = new ConvertType( 'bool', cacheMaps.bool );\n\nexport const vec2 = new ConvertType( 'vec2' );\nexport const ivec2 = new ConvertType( 'ivec2' );\nexport const uvec2 = new ConvertType( 'uvec2' );\nexport const bvec2 = new ConvertType( 'bvec2' );\n\nexport const vec3 = new ConvertType( 'vec3' );\nexport const ivec3 = new ConvertType( 'ivec3' );\nexport const uvec3 = new ConvertType( 'uvec3' );\nexport const bvec3 = new ConvertType( 'bvec3' );\n\nexport const vec4 = new ConvertType( 'vec4' );\nexport const ivec4 = new ConvertType( 'ivec4' );\nexport const uvec4 = new ConvertType( 'uvec4' );\nexport const bvec4 = new ConvertType( 'bvec4' );\n\nexport const mat3 = new ConvertType( 'mat3' );\nexport const imat3 = new ConvertType( 'imat3' );\nexport const umat3 = new ConvertType( 'umat3' );\nexport const bmat3 = new ConvertType( 'bmat3' );\n\nexport const mat4 = new ConvertType( 'mat4' );\nexport const imat4 = new ConvertType( 'imat4' );\nexport const umat4 = new ConvertType( 'umat4' );\nexport const bmat4 = new ConvertType( 'bmat4' );\n\nexport const string = ( value = '' ) => nodeObject( new ConstNode( value, 'string' ) );\nexport const arrayBuffer = ( value ) => nodeObject( new ConstNode( value, 'ArrayBuffer' ) );\n\naddNodeElement( 'color', color );\naddNodeElement( 'float', float );\naddNodeElement( 'int', int );\naddNodeElement( 'uint', uint );\naddNodeElement( 'bool', bool );\naddNodeElement( 'vec2', vec2 );\naddNodeElement( 'ivec2', ivec2 );\naddNodeElement( 'uvec2', uvec2 );\naddNodeElement( 'bvec2', bvec2 );\naddNodeElement( 'vec3', vec3 );\naddNodeElement( 'ivec3', ivec3 );\naddNodeElement( 'uvec3', uvec3 );\naddNodeElement( 'bvec3', bvec3 );\naddNodeElement( 'vec4', vec4 );\naddNodeElement( 'ivec4', ivec4 );\naddNodeElement( 'uvec4', uvec4 );\naddNodeElement( 'bvec4', bvec4 );\naddNodeElement( 'mat3', mat3 );\naddNodeElement( 'imat3', imat3 );\naddNodeElement( 'umat3', umat3 );\naddNodeElement( 'bmat3', bmat3 );\naddNodeElement( 'mat4', mat4 );\naddNodeElement( 'imat4', imat4 );\naddNodeElement( 'umat4', umat4 );\naddNodeElement( 'bmat4', bmat4 );\naddNodeElement( 'string', string );\naddNodeElement( 'arrayBuffer', arrayBuffer );\n\n// basic nodes\n// HACK - we cannot export them from the corresponding files because of the cyclic dependency\nexport const element = nodeProxy( ArrayElementNode );\nexport const convert = ( node, types ) => nodeObject( new ConvertNode( nodeObject( node ), types ) );\nexport const split = ( node, channels ) => nodeObject( new SplitNode( nodeObject( node ), channels ) );\n\naddNodeElement( 'element', element );\naddNodeElement( 'convert', convert );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}