{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_card_title = _resolveComponent(\"v-card-title\");\n  const _component_v_card_subtitle = _resolveComponent(\"v-card-subtitle\");\n  const _component_v_card_item = _resolveComponent(\"v-card-item\");\n  const _component_v_slider = _resolveComponent(\"v-slider\");\n  const _component_v_card_text = _resolveComponent(\"v-card-text\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_gyroscopeSimulator = _resolveComponent(\"gyroscopeSimulator\");\n  const _component_v_sheet = _resolveComponent(\"v-sheet\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  const _component_v_main = _resolveComponent(\"v-main\");\n  const _component_v_app = _resolveComponent(\"v-app\");\n  return _openBlock(), _createBlock(_component_v_app, {\n    id: \"gyro\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_main, {\n      class: \"bg-grey-lighten-3\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_container, {\n        fluid: true,\n        class: \"ma-0 pa-2 v-flex full-width\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_v_row, null, {\n          default: _withCtx(() => [_createVNode(_component_v_col, {\n            cols: \"4\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_v_card, {\n              rounded: \"lg\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_v_card_item, {\n                class: \"mb-5\"\n              }, {\n                default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n                  default: _withCtx(() => [_createTextVNode(\"Parameters\")]),\n                  _: 1 /* STABLE */\n                }), _createVNode(_component_v_card_subtitle, null, {\n                  default: _withCtx(() => [_createTextVNode(\"Set dimensions of gyroscope and strength of gravity\")]),\n                  _: 1 /* STABLE */\n                })]),\n\n                _: 1 /* STABLE */\n              }), _createVNode(_component_v_card_text, null, {\n                default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.parameters, (parameter, key) => {\n                  return _openBlock(), _createBlock(_component_v_slider, {\n                    min: parameter.min,\n                    max: parameter.max,\n                    \"thumb-label\": 'always',\n                    label: key + \":\",\n                    modelValue: parameter.value,\n                    \"onUpdate:modelValue\": $event => parameter.value = $event,\n                    key: key,\n                    class: \"mt-2\"\n                  }, null, 8 /* PROPS */, [\"min\", \"max\", \"label\", \"modelValue\", \"onUpdate:modelValue\"]);\n                }), 128 /* KEYED_FRAGMENT */))]),\n\n                _: 1 /* STABLE */\n              })]),\n\n              _: 1 /* STABLE */\n            }), _createVNode(_component_v_card, {\n              rounded: \"lg\",\n              class: \"mt-2\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_v_card_item, {\n                class: \"mb-5\"\n              }, {\n                default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n                  default: _withCtx(() => [_createTextVNode(\"Initial State\")]),\n                  _: 1 /* STABLE */\n                }), _createVNode(_component_v_card_subtitle, null, {\n                  default: _withCtx(() => [_createTextVNode(\"Set initial state of gyroscope\")]),\n                  _: 1 /* STABLE */\n                })]),\n\n                _: 1 /* STABLE */\n              }), _createVNode(_component_v_card_text, null, {\n                default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(Object.fromEntries(Object.entries(this.initialState).filter(x => x[0] != 'pTheta' && x[0] != 'pPhi' && x[0] != 'pPsi')), (stateVariable, key) => {\n                  return _openBlock(), _createBlock(_component_v_slider, {\n                    min: stateVariable.min,\n                    max: stateVariable.max,\n                    \"thumb-label\": 'always',\n                    label: key + \":\",\n                    modelValue: stateVariable.value,\n                    \"onUpdate:modelValue\": $event => stateVariable.value = $event,\n                    key: key,\n                    class: \"mt-2\"\n                  }, null, 8 /* PROPS */, [\"min\", \"max\", \"label\", \"modelValue\", \"onUpdate:modelValue\"]);\n                }), 128 /* KEYED_FRAGMENT */))]),\n\n                _: 1 /* STABLE */\n              })]),\n\n              _: 1 /* STABLE */\n            }), _createVNode(_component_v_btn, {\n              variant: \"outlined\",\n              class: \"align-self-center full-width\",\n              onClick: _cache[0] || (_cache[0] = $event => $options.runSolver())\n            }, {\n              default: _withCtx(() => [_createTextVNode(\" Simulate \")]),\n              _: 1 /* STABLE */\n            })]),\n\n            _: 1 /* STABLE */\n          }), _createVNode(_component_v_col, {\n            cols: \"8\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_v_sheet, {\n              rounded: \"lg\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_gyroscopeSimulator, {\n                solution: _ctx.solution,\n                parameters: _ctx.parameters,\n                initialState: $options.computedState\n              }, null, 8 /* PROPS */, [\"solution\", \"parameters\", \"initialState\"])]),\n              _: 1 /* STABLE */\n            })]),\n\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createBlock","_component_v_app","id","_createVNode","_component_v_main","class","_component_v_container","fluid","_component_v_row","_component_v_col","cols","_component_v_card","rounded","_component_v_card_item","_component_v_card_title","_component_v_card_subtitle","_component_v_card_text","_createElementBlock","_Fragment","_renderList","_ctx","parameters","parameter","key","_component_v_slider","min","max","label","value","$event","Object","fromEntries","entries","initialState","filter","x","stateVariable","_component_v_btn","variant","onClick","_cache","$options","runSolver","_component_v_sheet","_component_gyroscopeSimulator","solution","computedState"],"sources":["/Users/cabrera/Documents/PortfolioWebiste/frontend/src/App.vue"],"sourcesContent":["<template>\n  <v-app id=\"gyro\">\n    <v-main class=\"bg-grey-lighten-3 \">\n      <v-container :fluid=\"true\" class=\"ma-0 pa-2 v-flex full-width\">\n        <v-row>\n          <v-col cols=\"4\">\n            <v-card rounded=\"lg\">\n\n              <v-card-item class=\"mb-5\">\n                <v-card-title>Parameters</v-card-title>\n                <v-card-subtitle>Set dimensions of gyroscope and strength of gravity</v-card-subtitle>\n              </v-card-item>\n\n              <v-card-text>\n                <v-slider \n                  v-for=\"(parameter, key) in parameters\" \n                  :min=\"parameter.min\" \n                  :max=\"parameter.max\" \n                  :thumb-label=\"'always'\"\n                  :label = 'key + \":\"'\n                  v-model=\"parameter.value\" \n                  :key=\"key\"\n                  class=\"mt-2\"\n                  >\n                </v-slider>                \n              </v-card-text>\n            </v-card>\n\n            <v-card rounded=\"lg\" class=\"mt-2\">\n              \n              <v-card-item class=\"mb-5\">\n                <v-card-title>Initial State</v-card-title>\n                <v-card-subtitle>Set initial state of gyroscope</v-card-subtitle>\n              </v-card-item>\n\n              <v-card-text>\n                <v-slider \n                  v-for = \"(stateVariable, key) in Object.fromEntries(Object.entries(this.initialState).filter(x => (x[0] != 'pTheta') && (x[0] != 'pPhi') && (x[0] != 'pPsi')))\"\n                  :min=\"stateVariable.min\" \n                  :max=\"stateVariable.max\" \n                  :thumb-label=\"'always'\"\n                  :label = 'key + \":\"'\n                  v-model=\"stateVariable.value\" \n                  :key=\"key\"\n                  class=\"mt-2\"\n                  >\n                </v-slider>                \n              </v-card-text>\n            </v-card>\n\n            <v-btn variant=\"outlined\" class=\"align-self-center full-width\" @click=\"runSolver()\">\n              Simulate\n            </v-btn>\n\n          </v-col>\n\n          <v-col cols=\"8\">\n            <v-sheet rounded=\"lg\">\n              <gyroscopeSimulator :solution=\"solution\" :parameters=\"parameters\" :initialState=\"computedState\"></gyroscopeSimulator>\n            </v-sheet>\n          </v-col>\n        </v-row>\n      </v-container>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\n// import { pushScopeId } from 'vue'\nimport gyroscopeSimulator from './components/gyroscopeSimulator'\n// import { popScopeId } from 'vue'\n// import { ref, onMounted } from 'vue'\n  export default {\n    name: 'app',\n    components: {\n      gyroscopeSimulator\n    },\n    data: () => ({\n      parameters : {\n        \"l\" : {value: 5, min: 1, max: 10},\n        \"a\" : {value: 2, min: 1, max: 5},\n        \"h\" : {value: 0.5, min: 0.1, max: 1},\n        \"g\" : {value: -9.8, min: 0, max: 10},\n      },\n      solverParameters : {\n          \"stepSize\" : {value: 1/60},\n          \"numSteps\" : {value: 1000}, // total animation time in seconds is stepSize * numSteps\n          't0' : {value: 0}\n      },\n      animationParameters : {\n          \"rstride\" : 15,\n          \"cstride\" : 5,\n          \"nSample\" : 45,\n          \"dpi\" : 300,\n          \"transparency\" : 0.8\n      },\n      initialState : {\n          \"theta\" : {value: 0, min: 0, max: 6.28},\n          \"phi\" : {value: 0.2, min: 0, max: 6.28},\n          \"psi\" : {value: 0, min: 0, max: 6.28},\n          \"thetaVel\": {value: 0, min: 0, max: 12},\n          \"phiVel\": {value: 0, min: 0, max: 12},\n          \"psiVel\": {value: 0, min: 0, max: 30}\n      },\n      solution: []\n    }),\n    computed : {\n      computedState() {\n        let state = {... this.initialState}\n        for(let key in state){\n          state[key] = state[key].value\n        }\n        Object.assign(state, this.getCartesian(state.theta, state.phi))\n        Object.assign(state, this.getGeneralizedMomenta())\n        return state\n      }\n    },\n    methods : {\n      gyroscope(t, stateVector) { // returns dstateVector/dt\n          let [theta, phi, psi, pTheta, pPhi, pPsi] = stateVector\n\n          // DON'T ANGER THE LINTER\n          theta = psi\n          psi = theta\n          \n          let phiVel = pPhi / this.parameters.l.value**2 \n          let thetaVel = (pTheta - (pPsi * Math.cos(phi)))/(this.parameters.a.value**2 * Math.sin(phi)**2) \n          let psiVel = (pPsi/this.parameters.a.value**2) - thetaVel * Math.cos(phi) \n\n          let pThetaDot = 0 \n          let pPhiDot = (this.parameters.l.value**2 - this.parameters.a.value**2)* Math.sin(phi) * Math.cos(phi) * thetaVel**2 - (this.parameters.g.value*this.parameters.l.value - this.parameters.a.value**2 * psiVel * thetaVel) * Math.sin(phi)\n          let pPsiDot = 0\n          return [thetaVel, phiVel, psiVel, pThetaDot, pPhiDot, pPsiDot];\n      },\n      rungeKutta(engine, state, t0, stepSize, numSteps) {\n          // Helper functions for rungeKutta solver\n          function numericAdd(a, b) {\n            return a.map((ai, i) => ai + b[i]);\n          }\n          function numericMul(scalar, vector) {\n              return vector.map(vi => scalar * vi);\n          }\n\n          // Variable Instantiation\n          const result = [];\n          result.push({ t: t0, state: state });\n\n          // Solve\n          for (let i = 1; i <= numSteps; i++) {\n              const t = t0 + i * stepSize;\n              const k1 = numericMul(stepSize, engine(t0, state));\n              const k2 = numericMul(stepSize, engine(t0 + stepSize / 2, numericAdd(state, numericMul(0.5, k1))));\n              const k3 = numericMul(stepSize, engine(t0 + stepSize / 2, numericAdd(state, numericMul(0.5, k2))));\n              const k4 = numericMul(stepSize, engine(t0 + stepSize, numericAdd(state, k3)));\n\n              state = numericAdd(state, numericMul(1 / 6, numericAdd(k1, numericAdd(numericMul(2, k2), numericAdd(numericMul(2, k3), k4)))));\n              t0 = t;\n              result.push({ t, state: state });\n          }\n          return result;\n      },\n      runSolver(){\n        let solution = this.rungeKutta(\n          this.gyroscope,\n          [this.computedState.theta, this.computedState.phi, this.computedState.psi, this.computedState.pTheta, this.computedState.pPhi, this.computedState.pPsi],\n          this.solverParameters.t0.value,\n          this.solverParameters.stepSize.value,\n          this.solverParameters.numSteps.value\n        )\n\n        this.solution = []\n        for(let elem of solution){\n          let entry = {\n            theta : elem.state[0],\n            phi : elem.state[1],\n            psi : elem.state[2],\n            ... this.getCartesian(elem.state[0], elem.state[1])\n          }\n          this.solution.push(entry)\n        }\n      },\n      getCartesian(theta, phi){// return cartesian coordinates from theta, phi, and psi\n          let x = this.parameters.l.value * Math.cos(theta) * Math.sin(phi)\n          let y = this.parameters.l.value * Math.sin(theta) * Math.sin(phi)\n          let z = this.parameters.l.value * Math.cos(phi)\n\n          return {x:x, y:y, z:z}\n      },\n      getGeneralizedMomenta(){\n        let pTheta = (this.parameters.l.value**2 * Math.sin(this.initialState.phi.value)**2 + this.parameters.a.value**2 * Math.cos(this.initialState.phi.value)**2)*this.initialState.thetaVel.value + this.parameters.a.value**2 * this.initialState.psiVel.value * Math.cos(this.initialState.phi.value)\n        let pPhi = this.parameters.l.value**2 * this.initialState.phiVel.value\n        let pPsi = this.parameters.a.value**2 * (this.initialState.thetaVel.value * Math.cos(this.initialState.phi.value) + this.initialState.psiVel.value)\n\n        return {pTheta:pTheta, pPhi:pPhi, pPsi:pPsi}\n      }\n    }\n  }\n</script>\n\n<style>\n#app{\n  width: 100%;\n  height: 100%;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}