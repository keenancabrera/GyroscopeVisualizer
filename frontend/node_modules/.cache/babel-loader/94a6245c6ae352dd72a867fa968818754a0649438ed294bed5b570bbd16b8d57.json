{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { vectorComponents } from '../core/constants.js';\nconst stringVectorComponents = vectorComponents.join('');\nclass SplitNode extends Node {\n  constructor(node, components = 'x') {\n    super();\n    this.node = node;\n    this.components = components;\n  }\n  getVectorLength() {\n    let vectorLength = this.components.length;\n    for (const c of this.components) {\n      vectorLength = Math.max(vectorComponents.indexOf(c) + 1, vectorLength);\n    }\n    return vectorLength;\n  }\n  getNodeType(builder) {\n    return builder.getTypeFromLength(this.components.length);\n  }\n  generate(builder, output) {\n    const node = this.node;\n    const nodeTypeLength = builder.getTypeLength(node.getNodeType(builder));\n    let snippet = null;\n    if (nodeTypeLength > 1) {\n      let type = null;\n      const componentsLength = this.getVectorLength();\n      if (componentsLength >= nodeTypeLength) {\n        // needed expand the input node\n\n        type = builder.getTypeFromLength(this.getVectorLength());\n      }\n      const nodeSnippet = node.build(builder, type);\n      if (this.components.length === nodeTypeLength && this.components === stringVectorComponents.slice(0, this.components.length)) {\n        // unnecessary swizzle\n\n        snippet = builder.format(nodeSnippet, type, output);\n      } else {\n        snippet = builder.format(`${nodeSnippet}.${this.components}`, this.getNodeType(builder), output);\n      }\n    } else {\n      // ignore .components if .node returns float/integer\n\n      snippet = node.build(builder, output);\n    }\n    return snippet;\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.components = this.components;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.components = data.components;\n  }\n}\nexport default SplitNode;\naddNodeClass('SplitNode', SplitNode);","map":{"version":3,"names":["Node","addNodeClass","vectorComponents","stringVectorComponents","join","SplitNode","constructor","node","components","getVectorLength","vectorLength","length","c","Math","max","indexOf","getNodeType","builder","getTypeFromLength","generate","output","nodeTypeLength","getTypeLength","snippet","type","componentsLength","nodeSnippet","build","slice","format","serialize","data","deserialize"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/nodes/utils/SplitNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { vectorComponents } from '../core/constants.js';\n\nconst stringVectorComponents = vectorComponents.join( '' );\n\nclass SplitNode extends Node {\n\n\tconstructor( node, components = 'x' ) {\n\n\t\tsuper();\n\n\t\tthis.node = node;\n\t\tthis.components = components;\n\n\t}\n\n\tgetVectorLength() {\n\n\t\tlet vectorLength = this.components.length;\n\n\t\tfor ( const c of this.components ) {\n\n\t\t\tvectorLength = Math.max( vectorComponents.indexOf( c ) + 1, vectorLength );\n\n\t\t}\n\n\t\treturn vectorLength;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn builder.getTypeFromLength( this.components.length );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst node = this.node;\n\t\tconst nodeTypeLength = builder.getTypeLength( node.getNodeType( builder ) );\n\n\t\tlet snippet = null;\n\n\t\tif ( nodeTypeLength > 1 ) {\n\n\t\t\tlet type = null;\n\n\t\t\tconst componentsLength = this.getVectorLength();\n\n\t\t\tif ( componentsLength >= nodeTypeLength ) {\n\n\t\t\t\t// needed expand the input node\n\n\t\t\t\ttype = builder.getTypeFromLength( this.getVectorLength() );\n\n\t\t\t}\n\n\t\t\tconst nodeSnippet = node.build( builder, type );\n\n\t\t\tif ( this.components.length === nodeTypeLength && this.components === stringVectorComponents.slice( 0, this.components.length ) ) {\n\n\t\t\t\t// unnecessary swizzle\n\n\t\t\t\tsnippet = builder.format( nodeSnippet, type, output );\n\n\t\t\t} else {\n\n\t\t\t\tsnippet = builder.format( `${nodeSnippet}.${this.components}`, this.getNodeType( builder ), output );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// ignore .components if .node returns float/integer\n\n\t\t\tsnippet = node.build( builder, output );\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.components = this.components;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.components = data.components;\n\n\t}\n\n}\n\nexport default SplitNode;\n\naddNodeClass( 'SplitNode', SplitNode );\n"],"mappings":"AAAA,OAAOA,IAAI,IAAIC,YAAY,QAAQ,iBAAiB;AACpD,SAASC,gBAAgB,QAAQ,sBAAsB;AAEvD,MAAMC,sBAAsB,GAAGD,gBAAgB,CAACE,IAAI,CAAE,EAAG,CAAC;AAE1D,MAAMC,SAAS,SAASL,IAAI,CAAC;EAE5BM,WAAWA,CAAEC,IAAI,EAAEC,UAAU,GAAG,GAAG,EAAG;IAErC,KAAK,CAAC,CAAC;IAEP,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,UAAU,GAAGA,UAAU;EAE7B;EAEAC,eAAeA,CAAA,EAAG;IAEjB,IAAIC,YAAY,GAAG,IAAI,CAACF,UAAU,CAACG,MAAM;IAEzC,KAAM,MAAMC,CAAC,IAAI,IAAI,CAACJ,UAAU,EAAG;MAElCE,YAAY,GAAGG,IAAI,CAACC,GAAG,CAAEZ,gBAAgB,CAACa,OAAO,CAAEH,CAAE,CAAC,GAAG,CAAC,EAAEF,YAAa,CAAC;IAE3E;IAEA,OAAOA,YAAY;EAEpB;EAEAM,WAAWA,CAAEC,OAAO,EAAG;IAEtB,OAAOA,OAAO,CAACC,iBAAiB,CAAE,IAAI,CAACV,UAAU,CAACG,MAAO,CAAC;EAE3D;EAEAQ,QAAQA,CAAEF,OAAO,EAAEG,MAAM,EAAG;IAE3B,MAAMb,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,MAAMc,cAAc,GAAGJ,OAAO,CAACK,aAAa,CAAEf,IAAI,CAACS,WAAW,CAAEC,OAAQ,CAAE,CAAC;IAE3E,IAAIM,OAAO,GAAG,IAAI;IAElB,IAAKF,cAAc,GAAG,CAAC,EAAG;MAEzB,IAAIG,IAAI,GAAG,IAAI;MAEf,MAAMC,gBAAgB,GAAG,IAAI,CAAChB,eAAe,CAAC,CAAC;MAE/C,IAAKgB,gBAAgB,IAAIJ,cAAc,EAAG;QAEzC;;QAEAG,IAAI,GAAGP,OAAO,CAACC,iBAAiB,CAAE,IAAI,CAACT,eAAe,CAAC,CAAE,CAAC;MAE3D;MAEA,MAAMiB,WAAW,GAAGnB,IAAI,CAACoB,KAAK,CAAEV,OAAO,EAAEO,IAAK,CAAC;MAE/C,IAAK,IAAI,CAAChB,UAAU,CAACG,MAAM,KAAKU,cAAc,IAAI,IAAI,CAACb,UAAU,KAAKL,sBAAsB,CAACyB,KAAK,CAAE,CAAC,EAAE,IAAI,CAACpB,UAAU,CAACG,MAAO,CAAC,EAAG;QAEjI;;QAEAY,OAAO,GAAGN,OAAO,CAACY,MAAM,CAAEH,WAAW,EAAEF,IAAI,EAAEJ,MAAO,CAAC;MAEtD,CAAC,MAAM;QAENG,OAAO,GAAGN,OAAO,CAACY,MAAM,CAAG,GAAEH,WAAY,IAAG,IAAI,CAAClB,UAAW,EAAC,EAAE,IAAI,CAACQ,WAAW,CAAEC,OAAQ,CAAC,EAAEG,MAAO,CAAC;MAErG;IAED,CAAC,MAAM;MAEN;;MAEAG,OAAO,GAAGhB,IAAI,CAACoB,KAAK,CAAEV,OAAO,EAAEG,MAAO,CAAC;IAExC;IAEA,OAAOG,OAAO;EAEf;EAEAO,SAASA,CAAEC,IAAI,EAAG;IAEjB,KAAK,CAACD,SAAS,CAAEC,IAAK,CAAC;IAEvBA,IAAI,CAACvB,UAAU,GAAG,IAAI,CAACA,UAAU;EAElC;EAEAwB,WAAWA,CAAED,IAAI,EAAG;IAEnB,KAAK,CAACC,WAAW,CAAED,IAAK,CAAC;IAEzB,IAAI,CAACvB,UAAU,GAAGuB,IAAI,CAACvB,UAAU;EAElC;AAED;AAEA,eAAeH,SAAS;AAExBJ,YAAY,CAAE,WAAW,EAAEI,SAAU,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}