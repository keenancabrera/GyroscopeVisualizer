{"ast":null,"code":"import { createCamera } from './components/camera.js';\nimport { createCylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\nimport { createRod } from './components/rod.js';\nimport { createRenderer } from './systems/renderer.js';\nimport * as THREE from 'three';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters;\n    this.state = state;\n    this.solution = {};\n    this.oldPosition = new THREE.Vector3();\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n    renderer = createRenderer();\n    renderer.setSize(container.clientWidth, container.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    container.append(renderer.domElement);\n\n    // Add elements\n    this.cylinder = createCylinder(this.getCartesian());\n    [this.verticies, this.line] = createRod(this.getCartesian());\n    this.axesHelper = new THREE.AxesHelper(3 / 2 * this.parameters.l.value);\n    this.cylinder.position = new THREE.Vector3(0, 0, 0);\n    this.line.geometry.setAttribute('position', new THREE.BufferAttribute(this.verticies, 3));\n    scene.add(this.cylinder, this.line, this.axesHelper);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  render() {\n    // used to render a single frame\n    renderer.render(scene, camera);\n  }\n  updateState(state) {\n    this.cylinder.getWorldPosition(this.oldPosition);\n    this.state = state;\n  }\n  updateSolution(solution) {\n    this.solution = solution;\n  }\n  getCartesian() {\n    // return cartesian coordinates from theta, phi, and psi\n    let x = this.parameters.l.value * Math.cos(this.state.theta.value) * Math.sin(this.state.phi.value);\n    let y = this.parameters.l.value * Math.sin(this.state.theta.value) * Math.sin(this.state.phi.value);\n    let z = this.parameters.l.value * Math.cos(this.state.phi.value);\n    return {\n      x: x,\n      y: y,\n      z: z\n    };\n  }\n  updateCylinder() {\n    let cartesian = this.getCartesian();\n    let currentPosition = new THREE.Vector3(cartesian['x'], cartesian['y'], cartesian['z']);\n    this.cylinder.position = currentPosition;\n  }\n}\nexport { gyroscopeAnimation };","map":{"version":3,"names":["createCamera","createCylinder","createScene","createRod","createRenderer","THREE","camera","renderer","scene","gyroscopeAnimation","constructor","container","parameters","state","solution","oldPosition","Vector3","setSize","clientWidth","clientHeight","setPixelRatio","window","devicePixelRatio","append","domElement","cylinder","getCartesian","verticies","line","axesHelper","AxesHelper","l","value","position","geometry","setAttribute","BufferAttribute","add","render","updateState","getWorldPosition","updateSolution","x","Math","cos","theta","sin","phi","y","z","updateCylinder","cartesian","currentPosition"],"sources":["/Users/cabrera/Documents/PortfolioWebiste/frontend/src/gyroscopeRenderer/gyroscopeAnimation.js"],"sourcesContent":["import { createCamera } from './components/camera.js';\nimport { createCylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\nimport { createRod } from './components/rod.js'\n\nimport { createRenderer } from './systems/renderer.js';\nimport * as THREE from 'three';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\n\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters\n    this.state = state\n    this.solution = {}\n    this.oldPosition = new THREE.Vector3()\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n\n    renderer = createRenderer();\n    renderer.setSize(container.clientWidth, container.clientHeight)\n    renderer.setPixelRatio(window.devicePixelRatio)\n\n    container.append(renderer.domElement);\n\n    // Add elements\n    this.cylinder = createCylinder(this.getCartesian());\n    [this.verticies, this.line] = createRod(this.getCartesian())\n    this.axesHelper = new THREE.AxesHelper(3/2 * this.parameters.l.value)\n\n    this.cylinder.position = new THREE.Vector3(0,0,0)\n    this.line.geometry.setAttribute('position', new THREE.BufferAttribute(this.verticies, 3))\n\n    scene.add(this.cylinder, this.line, this.axesHelper);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  \n  render() { // used to render a single frame\n    renderer.render(scene, camera);\n  }\n\n  updateState(state){\n    this.cylinder.getWorldPosition(this.oldPosition)\n    this.state = state\n  }\n\n  updateSolution(solution){\n    this.solution = solution\n  }\n\n  getCartesian(){ // return cartesian coordinates from theta, phi, and psi\n    let x = this.parameters.l.value * Math.cos(this.state.theta.value) * Math.sin(this.state.phi.value)\n    let y = this.parameters.l.value * Math.sin(this.state.theta.value) * Math.sin(this.state.phi.value)\n    let z = this.parameters.l.value * Math.cos(this.state.phi.value)\n\n    return {x:x, y:y, z:z}\n  }\n\n  updateCylinder(){\n    let cartesian = this.getCartesian()\n    let currentPosition = new THREE.Vector3(cartesian['x'], cartesian['y'], cartesian['z'])\n    this.cylinder.position = currentPosition\n\n  }\n\n}\n\nexport { gyroscopeAnimation };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}