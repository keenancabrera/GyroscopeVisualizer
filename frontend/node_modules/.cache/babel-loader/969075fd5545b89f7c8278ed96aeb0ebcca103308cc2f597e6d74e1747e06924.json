{"ast":null,"code":"import { createCamera } from './components/camera.js';\nimport { createCylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\nimport { createRod } from './components/rod.js';\nimport { createRenderer } from './systems/renderer.js';\nimport { AxesHelper, BufferAttribute } from 'three';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters;\n    this.state = state;\n    this.solution = {};\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n    renderer = createRenderer();\n    renderer.setSize(container.clientWidth, container.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    container.append(renderer.domElement);\n\n    // Add elements\n    this.cylinder = createCylinder(this.getCartesian());\n    [this.verticies, this.line] = createRod(this.getCartesian());\n    this.axesHelper = new AxesHelper(3 / 2 * this.parameters.l.value);\n    console.log(this.line);\n    this.line.geometry.setAttribute('position', new BufferAttribute(this.verticies, 3));\n    scene.add(this.cylinder, this.line, this.axesHelper);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  render() {\n    // used to render a single frame\n    renderer.render(scene, camera);\n  }\n  updateState(state) {\n    this.state = state;\n  }\n  updateSolution(solution) {\n    this.solution = solution;\n  }\n  getCartesian() {\n    // return cartesian coordinates from theta, phi, and psi\n    let x = this.parameters.l.value * Math.cos(this.state.theta.value) * Math.sin(this.state.phi.value);\n    let y = this.parameters.l.value * Math.sin(this.state.theta.value) * Math.sin(this.state.phi.value);\n    let z = this.parameters.l.value * Math.cos(this.state.phi.value);\n    return {\n      x: x,\n      y: y,\n      z: z\n    };\n  }\n  rotateCylinder() {}\n}\nexport { gyroscopeAnimation };","map":{"version":3,"names":["createCamera","createCylinder","createScene","createRod","createRenderer","AxesHelper","BufferAttribute","camera","renderer","scene","gyroscopeAnimation","constructor","container","parameters","state","solution","setSize","clientWidth","clientHeight","setPixelRatio","window","devicePixelRatio","append","domElement","cylinder","getCartesian","verticies","line","axesHelper","l","value","console","log","geometry","setAttribute","add","render","updateState","updateSolution","x","Math","cos","theta","sin","phi","y","z","rotateCylinder"],"sources":["/Users/cabrera/Documents/PortfolioWebiste/frontend/src/gyroscopeRenderer/gyroscopeAnimation.js"],"sourcesContent":["import { createCamera } from './components/camera.js';\nimport { createCylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\nimport { createRod } from './components/rod.js'\n\nimport { createRenderer } from './systems/renderer.js';\nimport { AxesHelper, BufferAttribute } from 'three';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\n\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters\n    this.state = state\n    this.solution = {}\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n\n    renderer = createRenderer();\n    renderer.setSize(container.clientWidth, container.clientHeight)\n    renderer.setPixelRatio(window.devicePixelRatio)\n\n    container.append(renderer.domElement);\n\n    // Add elements\n    this.cylinder = createCylinder(this.getCartesian());\n    [this.verticies, this.line] = createRod(this.getCartesian())\n    this.axesHelper = new AxesHelper(3/2 * this.parameters.l.value)\n    console.log(this.line)\n\n    this.line.geometry.setAttribute('position', new BufferAttribute(this.verticies, 3))\n\n    scene.add(this.cylinder, this.line, this.axesHelper);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  \n  render() { // used to render a single frame\n    renderer.render(scene, camera);\n  }\n\n  updateState(state){\n    this.state = state\n  }\n\n  updateSolution(solution){\n    this.solution = solution\n  }\n\n  getCartesian(){ // return cartesian coordinates from theta, phi, and psi\n    let x = this.parameters.l.value * Math.cos(this.state.theta.value) * Math.sin(this.state.phi.value)\n    let y = this.parameters.l.value * Math.sin(this.state.theta.value) * Math.sin(this.state.phi.value)\n    let z = this.parameters.l.value * Math.cos(this.state.phi.value)\n\n    return {x:x, y:y, z:z}\n  }\n\n  rotateCylinder(){\n\n  }\n\n}\n\nexport { gyroscopeAnimation };"],"mappings":"AAAA,SAASA,YAAY,QAAQ,wBAAwB;AACrD,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,SAAS,QAAQ,qBAAqB;AAE/C,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,UAAU,EAAEC,eAAe,QAAQ,OAAO;AACnD;;AAEA;AACA;AACA,IAAIC,MAAM;AACV,IAAIC,QAAQ;AACZ,IAAIC,KAAK;AAET,MAAMC,kBAAkB,CAAC;EACvBC,WAAWA,CAACC,SAAS,EAAEC,UAAU,EAAEC,KAAK,EAAE;IACxC,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;;IAElB;IACAR,MAAM,GAAGP,YAAY,CAACY,SAAS,EAAE,IAAI,CAACC,UAAU,CAAC;IACjDJ,KAAK,GAAGP,WAAW,CAAC,CAAC;IAErBM,QAAQ,GAAGJ,cAAc,CAAC,CAAC;IAC3BI,QAAQ,CAACQ,OAAO,CAACJ,SAAS,CAACK,WAAW,EAAEL,SAAS,CAACM,YAAY,CAAC;IAC/DV,QAAQ,CAACW,aAAa,CAACC,MAAM,CAACC,gBAAgB,CAAC;IAE/CT,SAAS,CAACU,MAAM,CAACd,QAAQ,CAACe,UAAU,CAAC;;IAErC;IACA,IAAI,CAACC,QAAQ,GAAGvB,cAAc,CAAC,IAAI,CAACwB,YAAY,CAAC,CAAC,CAAC;IACnD,CAAC,IAAI,CAACC,SAAS,EAAE,IAAI,CAACC,IAAI,CAAC,GAAGxB,SAAS,CAAC,IAAI,CAACsB,YAAY,CAAC,CAAC,CAAC;IAC5D,IAAI,CAACG,UAAU,GAAG,IAAIvB,UAAU,CAAC,CAAC,GAAC,CAAC,GAAG,IAAI,CAACQ,UAAU,CAACgB,CAAC,CAACC,KAAK,CAAC;IAC/DC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,IAAI,CAAC;IAEtB,IAAI,CAACA,IAAI,CAACM,QAAQ,CAACC,YAAY,CAAC,UAAU,EAAE,IAAI5B,eAAe,CAAC,IAAI,CAACoB,SAAS,EAAE,CAAC,CAAC,CAAC;IAEnFjB,KAAK,CAAC0B,GAAG,CAAC,IAAI,CAACX,QAAQ,EAAE,IAAI,CAACG,IAAI,EAAE,IAAI,CAACC,UAAU,CAAC;;IAEpD;EACF;;EAGAQ,MAAMA,CAAA,EAAG;IAAE;IACT5B,QAAQ,CAAC4B,MAAM,CAAC3B,KAAK,EAAEF,MAAM,CAAC;EAChC;EAEA8B,WAAWA,CAACvB,KAAK,EAAC;IAChB,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EAEAwB,cAAcA,CAACvB,QAAQ,EAAC;IACtB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC1B;EAEAU,YAAYA,CAAA,EAAE;IAAE;IACd,IAAIc,CAAC,GAAG,IAAI,CAAC1B,UAAU,CAACgB,CAAC,CAACC,KAAK,GAAGU,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC3B,KAAK,CAAC4B,KAAK,CAACZ,KAAK,CAAC,GAAGU,IAAI,CAACG,GAAG,CAAC,IAAI,CAAC7B,KAAK,CAAC8B,GAAG,CAACd,KAAK,CAAC;IACnG,IAAIe,CAAC,GAAG,IAAI,CAAChC,UAAU,CAACgB,CAAC,CAACC,KAAK,GAAGU,IAAI,CAACG,GAAG,CAAC,IAAI,CAAC7B,KAAK,CAAC4B,KAAK,CAACZ,KAAK,CAAC,GAAGU,IAAI,CAACG,GAAG,CAAC,IAAI,CAAC7B,KAAK,CAAC8B,GAAG,CAACd,KAAK,CAAC;IACnG,IAAIgB,CAAC,GAAG,IAAI,CAACjC,UAAU,CAACgB,CAAC,CAACC,KAAK,GAAGU,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC3B,KAAK,CAAC8B,GAAG,CAACd,KAAK,CAAC;IAEhE,OAAO;MAACS,CAAC,EAACA,CAAC;MAAEM,CAAC,EAACA,CAAC;MAAEC,CAAC,EAACA;IAAC,CAAC;EACxB;EAEAC,cAAcA,CAAA,EAAE,CAEhB;AAEF;AAEA,SAASrC,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}