{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport * as THREE from 'three';\nimport { gyroscopeAnimation } from '@/gyroscopeRenderer/gyroscopeAnimation';\nexport default {\n  name: 'gyroscopeSimulator',\n  props: {\n    solution: Object\n  },\n  watch: {\n    $props: {\n      handler() {\n        this.animate();\n      },\n      deep: true\n    }\n  },\n  data() {\n    return {\n      L: 5,\n      a: 1,\n      h: 0.25,\n      theta: Math.PI / 4,\n      phi: Math.PI / 4,\n      psi: Math.PI / 4,\n      x: null,\n      y: null,\n      z: null,\n      linePoints: [],\n      verticies: new Float32Array([0, 0, 0, 0, 0, 0]),\n      gyroscopeAnimation: null\n    };\n  },\n  methods: {\n    cylinderPosition(theta, phi) {\n      this.x = this.L * Math.cos(theta) * Math.sin(phi);\n      this.y = this.L * Math.sin(theta) * Math.sin(phi);\n      this.z = this.L * Math.cos(phi);\n    },\n    updateStateVariables(i) {\n      // i is index or solution\n      this.theta = this.solution.theta[i];\n      this.phi = this.solution.phi[i];\n      this.psi = this.solution.psi[i];\n      this.x = this.L * Math.cos(this.theta) * Math.sin(this.phi);\n      this.y = this.L * Math.sin(this.theta) * Math.sin(this.phi);\n      this.z = this.L * Math.cos(this.phi);\n    },\n    animate() {\n      // Initialize the Three.js scene\n      const scene = new THREE.Scene();\n      const camera = new THREE.PerspectiveCamera(75, this.$el.clientWidth / this.$el.clientHeight, 0.1, 1000);\n      camera.up.set(0, 0, 1); // Set up to be z axis\n\n      const renderer = new THREE.WebGLRenderer();\n      renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n      this.$refs.sceneContainer.appendChild(renderer.domElement);\n\n      // Axes Helper\n      // X RED | Y GREEN | Z BLUE |\n      const axesHelper = new THREE.AxesHelper(this.L * 2);\n\n      // Cylinder to the scene\n      const geometryCylinder = new THREE.CylinderGeometry(this.a, this.a, this.h, 32);\n      // const materialCylinder = new THREE.MeshBasicMaterial({ color: \"red\", wireframe: true });\n      // const materialCylinder2 = new THREE.MeshBasicMaterial({ color: \"blue\", wireframe: true });\n\n      const cylinder = new THREE.Mesh(geometryCylinder, [new THREE.MeshPhongMaterial({\n        color: 'blue',\n        shininess: 200\n      }), new THREE.MeshPhongMaterial({\n        color: 'red',\n        shininess: 200\n      })]);\n      cylinder.rotation.set(Math.PI / 2, 0, 0);\n      cylinder.position.set(0, 0, this.L);\n\n      // Rod to the scene\n      const materialLine = new THREE.LineBasicMaterial({\n        color: 'white'\n      });\n      const geometryLine = new THREE.BufferGeometry();\n      const line = new THREE.Line(geometryLine, materialLine);\n\n      // Light\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n      directionalLight.position.z = this.L * 1;\n      scene.add(cylinder, axesHelper, line, directionalLight);\n\n      // const material = new THREE.MeshBasicMaterial( {color: 0xffff00} ); \n      // const cylinder = new THREE.Mesh( geometry, material ); \n      // scene.add(cylinder);\n\n      camera.position.x = this.L * 1.2;\n      camera.position.y = this.L * 1.2;\n      camera.position.z = this.L * 1.2;\n      camera.lookAt(0, 0, 0);\n      // Render loop\n\n      let i = 0;\n      let oldSoln = new THREE.Vector3(0, 0, this.L);\n      const animate = () => {\n        requestAnimationFrame(animate);\n        this.updateStateVariables(i);\n        // this.updateStateVariables(i/5 % 150)\n        cylinder.position.set(this.x, this.y, this.z);\n        // cylinder.rotation.set(Math.PI / 2, this.phi, this.theta)\n\n        this.verticies[3] = this.x * 1.5;\n        this.verticies[4] = this.y * 1.5;\n        this.verticies[5] = this.z * 1.5;\n        geometryLine.setAttribute('position', new THREE.BufferAttribute(this.verticies, 3));\n        let currentSoln = new THREE.Vector3(this.x, this.y, this.z);\n        let angle = oldSoln.angleTo(currentSoln);\n        let difference = currentSoln.clone().add(oldSoln.multiplyScalar(-1));\n        let rotationVector = new THREE.Vector3().crossVectors(difference, oldSoln);\n        cylinder.rotateOnWorldAxis(rotationVector.normalize(), angle);\n        i = i + 1;\n        renderer.render(scene, camera);\n        oldSoln.set(this.x, this.y, this.z);\n      };\n      animate();\n    }\n  },\n  mounted() {\n    this.gyroscopeAnimation = new gyroscopeAnimation(this.$refs.sceneContainer);\n  }\n};","map":{"version":3,"names":["THREE","gyroscopeAnimation","name","props","solution","Object","watch","$props","handler","animate","deep","data","L","a","h","theta","Math","PI","phi","psi","x","y","z","linePoints","verticies","Float32Array","methods","cylinderPosition","cos","sin","updateStateVariables","i","scene","Scene","camera","PerspectiveCamera","$el","clientWidth","clientHeight","up","set","renderer","WebGLRenderer","setSize","$refs","sceneContainer","appendChild","domElement","axesHelper","AxesHelper","geometryCylinder","CylinderGeometry","cylinder","Mesh","MeshPhongMaterial","color","shininess","rotation","position","materialLine","LineBasicMaterial","geometryLine","BufferGeometry","line","Line","directionalLight","DirectionalLight","add","lookAt","oldSoln","Vector3","requestAnimationFrame","setAttribute","BufferAttribute","currentSoln","angle","angleTo","difference","clone","multiplyScalar","rotationVector","crossVectors","rotateOnWorldAxis","normalize","render","mounted"],"sources":["/Users/cabrera/Documents/PortfolioWebiste/frontend/src/components/gyroscopeSimulator.vue"],"sourcesContent":["<template>\n  <div ref=\"sceneContainer\" class=\"scene-container\"></div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport { gyroscopeAnimation } from '@/gyroscopeRenderer/gyroscopeAnimation';\n\nexport default {\n  name: 'gyroscopeSimulator',\n  props: {\n    solution: Object\n  },\n  watch: {\n    $props: {\n      handler() {\n        this.animate();\n      },\n      deep: true\n    },\n  },\n  data() {\n    return {\n      L: 5,\n      a: 1,\n      h: 0.25,\n      theta: Math.PI/4,\n      phi: Math.PI/4,\n      psi: Math.PI/4,\n      x: null,\n      y: null,\n      z: null,\n      linePoints: [],\n      verticies: new Float32Array([0,0,0,0,0,0]),\n      gyroscopeAnimation: null\n    }\n  },\n  methods: {\n    cylinderPosition(theta, phi){\n      this.x = this.L * Math.cos(theta) * Math.sin(phi)\n      this.y = this.L * Math.sin(theta) * Math.sin(phi)\n      this.z = this.L * Math.cos(phi)\n    },\n    updateStateVariables(i){ // i is index or solution\n      this.theta = this.solution.theta[i]\n      this.phi = this.solution.phi[i]\n      this.psi = this.solution.psi[i]\n\n      this.x = this.L * Math.cos(this.theta) * Math.sin(this.phi)\n      this.y = this.L * Math.sin(this.theta) * Math.sin(this.phi)\n      this.z = this.L * Math.cos(this.phi)\n    },\n    animate(){\n      // Initialize the Three.js scene\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      this.$el.clientWidth / this.$el.clientHeight,\n      0.1,\n      1000\n    );\n    camera.up.set(0,0,1) // Set up to be z axis\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    this.$refs.sceneContainer.appendChild(renderer.domElement);\n\n    // Axes Helper\n    // X RED | Y GREEN | Z BLUE |\n    const axesHelper = new THREE.AxesHelper(this.L*2)\n\n    // Cylinder to the scene\n    const geometryCylinder = new THREE.CylinderGeometry(this.a, this.a, this.h, 32 ); \n    // const materialCylinder = new THREE.MeshBasicMaterial({ color: \"red\", wireframe: true });\n    // const materialCylinder2 = new THREE.MeshBasicMaterial({ color: \"blue\", wireframe: true });\n\n    const cylinder = new THREE.Mesh(geometryCylinder, [new THREE.MeshPhongMaterial({ color: 'blue', shininess: 200 }),new THREE.MeshPhongMaterial({ color: 'red', shininess: 200 })]);\n    cylinder.rotation.set(Math.PI/2,0,0)\n    cylinder.position.set(0,0,this.L)\n\n    // Rod to the scene\n    const materialLine = new THREE.LineBasicMaterial( { color: 'white' } );\n    const geometryLine = new THREE.BufferGeometry()\n\n    const line = new THREE.Line( geometryLine, materialLine );\n\n    // Light\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1)\n    directionalLight.position.z = this.L*1\n\n\n    scene.add(cylinder, axesHelper, line, directionalLight);\n\n\n    // const material = new THREE.MeshBasicMaterial( {color: 0xffff00} ); \n    // const cylinder = new THREE.Mesh( geometry, material ); \n    // scene.add(cylinder);\n\n    camera.position.x = this.L * 1.2\n    camera.position.y = this.L * 1.2\n    camera.position.z = this.L * 1.2\n    camera.lookAt(0,0,0)\n    // Render loop\n\n    let i = 0\n    let oldSoln = new THREE.Vector3(0,0,this.L)\n    const animate = () => {\n      requestAnimationFrame(animate);\n      \n\n      this.updateStateVariables(i)\n      // this.updateStateVariables(i/5 % 150)\n      cylinder.position.set(this.x, this.y, this.z)\n      // cylinder.rotation.set(Math.PI / 2, this.phi, this.theta)\n\n\n      this.verticies[3] = this.x * 1.5\n      this.verticies[4] = this.y * 1.5\n      this.verticies[5] = this.z * 1.5\n      geometryLine.setAttribute('position', new THREE.BufferAttribute(this.verticies, 3))      \n\n\n      let currentSoln = new THREE.Vector3(this.x, this.y, this.z)\n      let angle = oldSoln.angleTo(currentSoln)\n      let difference = currentSoln.clone().add(oldSoln.multiplyScalar(-1))\n      let rotationVector = new THREE.Vector3().crossVectors(difference, oldSoln)\n\n      cylinder.rotateOnWorldAxis(rotationVector.normalize(), angle)\n\n      i = (i + 1)\n      renderer.render(scene, camera);\n      oldSoln.set(this.x, this.y, this.z)\n    };\n\n    animate();\n    }\n  },\n  mounted() {\n    this.gyroscopeAnimation = new gyroscopeAnimation(this.$refs.sceneContainer)\n  },\n};\n</script>\n\n<style scoped>\n.scene-container {\n  width: 100%;\n  height: 95vh;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}