{"ast":null,"code":"import { GPUPrimitiveTopology, GPUTextureFormat } from './WebGPUConstants.js';\nclass WebGPUUtils {\n  constructor(backend) {\n    this.backend = backend;\n  }\n  getCurrentDepthStencilFormat(renderContext) {\n    let format;\n    if (renderContext.depthTexture !== null) {\n      format = this.getTextureFormatGPU(renderContext.depthTexture);\n    } else if (renderContext.depth && renderContext.stencil) {\n      format = GPUTextureFormat.Depth24PlusStencil8;\n    } else if (renderContext.depth) {\n      format = GPUTextureFormat.Depth24Plus;\n    }\n    return format;\n  }\n  getTextureFormatGPU(texture) {\n    return this.backend.get(texture).texture.format;\n  }\n  getCurrentColorFormat(renderContext) {\n    let format;\n    if (renderContext.textures !== null) {\n      format = this.getTextureFormatGPU(renderContext.textures[0]);\n    } else {\n      format = GPUTextureFormat.BGRA8Unorm; // default context format\n    }\n\n    return format;\n  }\n  getCurrentColorSpace(renderContext) {\n    if (renderContext.textures !== null) {\n      return renderContext.textures[0].colorSpace;\n    }\n    return this.backend.renderer.outputColorSpace;\n  }\n  getPrimitiveTopology(object, material) {\n    if (object.isPoints) return GPUPrimitiveTopology.PointList;else if (object.isLineSegments || object.isMesh && material.wireframe === true) return GPUPrimitiveTopology.LineList;else if (object.isLine) return GPUPrimitiveTopology.LineStrip;else if (object.isMesh) return GPUPrimitiveTopology.TriangleList;\n  }\n  getSampleCount(renderContext) {\n    if (renderContext.textures !== null) {\n      return renderContext.sampleCount;\n    }\n    return this.backend.parameters.sampleCount;\n  }\n}\nexport default WebGPUUtils;","map":{"version":3,"names":["GPUPrimitiveTopology","GPUTextureFormat","WebGPUUtils","constructor","backend","getCurrentDepthStencilFormat","renderContext","format","depthTexture","getTextureFormatGPU","depth","stencil","Depth24PlusStencil8","Depth24Plus","texture","get","getCurrentColorFormat","textures","BGRA8Unorm","getCurrentColorSpace","colorSpace","renderer","outputColorSpace","getPrimitiveTopology","object","material","isPoints","PointList","isLineSegments","isMesh","wireframe","LineList","isLine","LineStrip","TriangleList","getSampleCount","sampleCount","parameters"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/renderers/webgpu/utils/WebGPUUtils.js"],"sourcesContent":["import { GPUPrimitiveTopology, GPUTextureFormat } from './WebGPUConstants.js';\n\nclass WebGPUUtils {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t}\n\n\tgetCurrentDepthStencilFormat( renderContext ) {\n\n\t\tlet format;\n\n\t\tif ( renderContext.depthTexture !== null ) {\n\n\t\t\tformat = this.getTextureFormatGPU( renderContext.depthTexture );\n\n\t\t} else if ( renderContext.depth && renderContext.stencil ) {\n\n\t\t\tformat = GPUTextureFormat.Depth24PlusStencil8;\n\n\t\t} else if ( renderContext.depth ) {\n\n\t\t\tformat = GPUTextureFormat.Depth24Plus;\n\n\t\t}\n\n\t\treturn format;\n\n\t}\n\n\tgetTextureFormatGPU( texture ) {\n\n\t\treturn this.backend.get( texture ).texture.format;\n\n\t}\n\n\tgetCurrentColorFormat( renderContext ) {\n\n\t\tlet format;\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\tformat = this.getTextureFormatGPU( renderContext.textures[ 0 ] );\n\n\n\t\t} else {\n\n\t\t\tformat = GPUTextureFormat.BGRA8Unorm; // default context format\n\n\t\t}\n\n\t\treturn format;\n\n\t}\n\n\tgetCurrentColorSpace( renderContext ) {\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\treturn renderContext.textures[ 0 ].colorSpace;\n\n\t\t}\n\n\t\treturn this.backend.renderer.outputColorSpace;\n\n\t}\n\n\tgetPrimitiveTopology( object, material ) {\n\n\t\tif ( object.isPoints ) return GPUPrimitiveTopology.PointList;\n\t\telse if ( object.isLineSegments || ( object.isMesh && material.wireframe === true ) ) return GPUPrimitiveTopology.LineList;\n\t\telse if ( object.isLine ) return GPUPrimitiveTopology.LineStrip;\n\t\telse if ( object.isMesh ) return GPUPrimitiveTopology.TriangleList;\n\n\t}\n\n\tgetSampleCount( renderContext ) {\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\treturn renderContext.sampleCount;\n\n\t\t}\n\n\t\treturn this.backend.parameters.sampleCount;\n\n\t}\n\n}\n\nexport default WebGPUUtils;\n"],"mappings":"AAAA,SAASA,oBAAoB,EAAEC,gBAAgB,QAAQ,sBAAsB;AAE7E,MAAMC,WAAW,CAAC;EAEjBC,WAAWA,CAAEC,OAAO,EAAG;IAEtB,IAAI,CAACA,OAAO,GAAGA,OAAO;EAEvB;EAEAC,4BAA4BA,CAAEC,aAAa,EAAG;IAE7C,IAAIC,MAAM;IAEV,IAAKD,aAAa,CAACE,YAAY,KAAK,IAAI,EAAG;MAE1CD,MAAM,GAAG,IAAI,CAACE,mBAAmB,CAAEH,aAAa,CAACE,YAAa,CAAC;IAEhE,CAAC,MAAM,IAAKF,aAAa,CAACI,KAAK,IAAIJ,aAAa,CAACK,OAAO,EAAG;MAE1DJ,MAAM,GAAGN,gBAAgB,CAACW,mBAAmB;IAE9C,CAAC,MAAM,IAAKN,aAAa,CAACI,KAAK,EAAG;MAEjCH,MAAM,GAAGN,gBAAgB,CAACY,WAAW;IAEtC;IAEA,OAAON,MAAM;EAEd;EAEAE,mBAAmBA,CAAEK,OAAO,EAAG;IAE9B,OAAO,IAAI,CAACV,OAAO,CAACW,GAAG,CAAED,OAAQ,CAAC,CAACA,OAAO,CAACP,MAAM;EAElD;EAEAS,qBAAqBA,CAAEV,aAAa,EAAG;IAEtC,IAAIC,MAAM;IAEV,IAAKD,aAAa,CAACW,QAAQ,KAAK,IAAI,EAAG;MAEtCV,MAAM,GAAG,IAAI,CAACE,mBAAmB,CAAEH,aAAa,CAACW,QAAQ,CAAE,CAAC,CAAG,CAAC;IAGjE,CAAC,MAAM;MAENV,MAAM,GAAGN,gBAAgB,CAACiB,UAAU,CAAC,CAAC;IAEvC;;IAEA,OAAOX,MAAM;EAEd;EAEAY,oBAAoBA,CAAEb,aAAa,EAAG;IAErC,IAAKA,aAAa,CAACW,QAAQ,KAAK,IAAI,EAAG;MAEtC,OAAOX,aAAa,CAACW,QAAQ,CAAE,CAAC,CAAE,CAACG,UAAU;IAE9C;IAEA,OAAO,IAAI,CAAChB,OAAO,CAACiB,QAAQ,CAACC,gBAAgB;EAE9C;EAEAC,oBAAoBA,CAAEC,MAAM,EAAEC,QAAQ,EAAG;IAExC,IAAKD,MAAM,CAACE,QAAQ,EAAG,OAAO1B,oBAAoB,CAAC2B,SAAS,CAAC,KACxD,IAAKH,MAAM,CAACI,cAAc,IAAMJ,MAAM,CAACK,MAAM,IAAIJ,QAAQ,CAACK,SAAS,KAAK,IAAM,EAAG,OAAO9B,oBAAoB,CAAC+B,QAAQ,CAAC,KACtH,IAAKP,MAAM,CAACQ,MAAM,EAAG,OAAOhC,oBAAoB,CAACiC,SAAS,CAAC,KAC3D,IAAKT,MAAM,CAACK,MAAM,EAAG,OAAO7B,oBAAoB,CAACkC,YAAY;EAEnE;EAEAC,cAAcA,CAAE7B,aAAa,EAAG;IAE/B,IAAKA,aAAa,CAACW,QAAQ,KAAK,IAAI,EAAG;MAEtC,OAAOX,aAAa,CAAC8B,WAAW;IAEjC;IAEA,OAAO,IAAI,CAAChC,OAAO,CAACiC,UAAU,CAACD,WAAW;EAE3C;AAED;AAEA,eAAelC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}