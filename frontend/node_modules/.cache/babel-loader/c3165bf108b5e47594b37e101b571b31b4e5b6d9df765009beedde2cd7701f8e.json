{"ast":null,"code":"import TempNode from '../core/TempNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { tslFn, nodeObject, float, mat3 } from '../shadernode/ShaderNode.js';\nimport { NoToneMapping, LinearToneMapping, ReinhardToneMapping, CineonToneMapping, ACESFilmicToneMapping } from 'three';\n\n// exposure only\nconst LinearToneMappingNode = tslFn(({\n  color,\n  exposure\n}) => {\n  return color.mul(exposure).clamp();\n});\n\n// source: https://www.cs.utah.edu/docs/techreports/2002/pdf/UUCS-02-001.pdf\nconst ReinhardToneMappingNode = tslFn(({\n  color,\n  exposure\n}) => {\n  color = color.mul(exposure);\n  return color.div(color.add(1.0)).clamp();\n});\n\n// source: http://filmicworlds.com/blog/filmic-tonemapping-operators/\nconst OptimizedCineonToneMappingNode = tslFn(({\n  color,\n  exposure\n}) => {\n  // optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\n  color = color.mul(exposure);\n  color = color.sub(0.004).max(0.0);\n  const a = color.mul(color.mul(6.2).add(0.5));\n  const b = color.mul(color.mul(6.2).add(1.7)).add(0.06);\n  return a.div(b).pow(2.2);\n});\n\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\nconst RRTAndODTFit = tslFn(({\n  color\n}) => {\n  const a = color.mul(color.add(0.0245786)).sub(0.000090537);\n  const b = color.mul(color.add(0.4329510).mul(0.983729)).add(0.238081);\n  return a.div(b);\n});\n\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\nconst ACESFilmicToneMappingNode = tslFn(({\n  color,\n  exposure\n}) => {\n  // sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\n  const ACESInputMat = mat3(0.59719, 0.35458, 0.04823, 0.07600, 0.90834, 0.01566, 0.02840, 0.13383, 0.83777);\n\n  // ODT_SAT => XYZ => D60_2_D65 => sRGB\n  const ACESOutputMat = mat3(1.60475, -0.53108, -0.07367, -0.10208, 1.10813, -0.00605, -0.00327, -0.07276, 1.07602);\n  color = color.mul(exposure).div(0.6);\n  color = ACESInputMat.mul(color);\n\n  // Apply RRT and ODT\n  color = RRTAndODTFit({\n    color\n  });\n  color = ACESOutputMat.mul(color);\n\n  // Clamp to [0, 1]\n  return color.clamp();\n});\nconst toneMappingLib = {\n  [LinearToneMapping]: LinearToneMappingNode,\n  [ReinhardToneMapping]: ReinhardToneMappingNode,\n  [CineonToneMapping]: OptimizedCineonToneMappingNode,\n  [ACESFilmicToneMapping]: ACESFilmicToneMappingNode\n};\nclass ToneMappingNode extends TempNode {\n  constructor(toneMapping = NoToneMapping, exposureNode = float(1), colorNode = null) {\n    super('vec3');\n    this.toneMapping = toneMapping;\n    this.exposureNode = exposureNode;\n    this.colorNode = colorNode;\n  }\n  getCacheKey() {\n    let cacheKey = super.getCacheKey();\n    cacheKey = '{toneMapping:' + this.toneMapping + ',nodes:' + cacheKey + '}';\n    return cacheKey;\n  }\n  setup(builder) {\n    const colorNode = this.colorNode || builder.context.color;\n    const toneMapping = this.toneMapping;\n    if (toneMapping === NoToneMapping) return colorNode;\n    const toneMappingParams = {\n      exposure: this.exposureNode,\n      color: colorNode\n    };\n    const toneMappingNode = toneMappingLib[toneMapping];\n    let outputNode = null;\n    if (toneMappingNode) {\n      outputNode = toneMappingNode(toneMappingParams);\n    } else {\n      console.error('ToneMappingNode: Unsupported Tone Mapping configuration.', toneMapping);\n      outputNode = colorNode;\n    }\n    return outputNode;\n  }\n}\nexport default ToneMappingNode;\nexport const toneMapping = (mapping, exposure, color) => nodeObject(new ToneMappingNode(mapping, nodeObject(exposure), nodeObject(color)));\naddNodeClass('ToneMappingNode', ToneMappingNode);","map":{"version":3,"names":["TempNode","addNodeClass","tslFn","nodeObject","float","mat3","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","LinearToneMappingNode","color","exposure","mul","clamp","ReinhardToneMappingNode","div","add","OptimizedCineonToneMappingNode","sub","max","a","b","pow","RRTAndODTFit","ACESFilmicToneMappingNode","ACESInputMat","ACESOutputMat","toneMappingLib","ToneMappingNode","constructor","toneMapping","exposureNode","colorNode","getCacheKey","cacheKey","setup","builder","context","toneMappingParams","toneMappingNode","outputNode","console","error","mapping"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/nodes/display/ToneMappingNode.js"],"sourcesContent":["import TempNode from '../core/TempNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { tslFn, nodeObject, float, mat3 } from '../shadernode/ShaderNode.js';\n\nimport { NoToneMapping, LinearToneMapping, ReinhardToneMapping, CineonToneMapping, ACESFilmicToneMapping } from 'three';\n\n// exposure only\nconst LinearToneMappingNode = tslFn( ( { color, exposure } ) => {\n\n\treturn color.mul( exposure ).clamp();\n\n} );\n\n// source: https://www.cs.utah.edu/docs/techreports/2002/pdf/UUCS-02-001.pdf\nconst ReinhardToneMappingNode = tslFn( ( { color, exposure } ) => {\n\n\tcolor = color.mul( exposure );\n\n\treturn color.div( color.add( 1.0 ) ).clamp();\n\n} );\n\n// source: http://filmicworlds.com/blog/filmic-tonemapping-operators/\nconst OptimizedCineonToneMappingNode = tslFn( ( { color, exposure } ) => {\n\n\t// optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\n\tcolor = color.mul( exposure );\n\tcolor = color.sub( 0.004 ).max( 0.0 );\n\n\tconst a = color.mul( color.mul( 6.2 ).add( 0.5 ) );\n\tconst b = color.mul( color.mul( 6.2 ).add( 1.7 ) ).add( 0.06 );\n\n\treturn a.div( b ).pow( 2.2 );\n\n} );\n\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\nconst RRTAndODTFit = tslFn( ( { color } ) => {\n\n\tconst a = color.mul( color.add( 0.0245786 ) ).sub( 0.000090537 );\n\tconst b = color.mul( color.add( 0.4329510 ).mul( 0.983729 ) ).add( 0.238081 );\n\n\treturn a.div( b );\n\n} );\n\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\nconst ACESFilmicToneMappingNode = tslFn( ( { color, exposure } ) => {\n\n\t// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\n\tconst ACESInputMat = mat3(\n\t\t0.59719, 0.35458, 0.04823,\n\t\t0.07600, 0.90834, 0.01566,\n\t\t0.02840, 0.13383, 0.83777\n\t);\n\n\t// ODT_SAT => XYZ => D60_2_D65 => sRGB\n\tconst ACESOutputMat = mat3(\n\t\t1.60475, - 0.53108, - 0.07367,\n\t\t- 0.10208, 1.10813, - 0.00605,\n\t\t- 0.00327, - 0.07276, 1.07602\n\t);\n\n\tcolor = color.mul( exposure ).div( 0.6 );\n\n\tcolor = ACESInputMat.mul( color );\n\n\t// Apply RRT and ODT\n\tcolor = RRTAndODTFit( { color } );\n\n\tcolor = ACESOutputMat.mul( color );\n\n\t// Clamp to [0, 1]\n\treturn color.clamp();\n\n} );\n\nconst toneMappingLib = {\n\t[ LinearToneMapping ]: LinearToneMappingNode,\n\t[ ReinhardToneMapping ]: ReinhardToneMappingNode,\n\t[ CineonToneMapping ]: OptimizedCineonToneMappingNode,\n\t[ ACESFilmicToneMapping ]: ACESFilmicToneMappingNode\n};\n\nclass ToneMappingNode extends TempNode {\n\n\tconstructor( toneMapping = NoToneMapping, exposureNode = float( 1 ), colorNode = null ) {\n\n\t\tsuper( 'vec3' );\n\n\t\tthis.toneMapping = toneMapping;\n\n\t\tthis.exposureNode = exposureNode;\n\t\tthis.colorNode = colorNode;\n\n\t}\n\n\tgetCacheKey() {\n\n\t\tlet cacheKey = super.getCacheKey();\n\t\tcacheKey = '{toneMapping:' + this.toneMapping + ',nodes:' + cacheKey + '}';\n\n\t\treturn cacheKey;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst colorNode = this.colorNode || builder.context.color;\n\t\tconst toneMapping = this.toneMapping;\n\n\t\tif ( toneMapping === NoToneMapping ) return colorNode;\n\n\t\tconst toneMappingParams = { exposure: this.exposureNode, color: colorNode };\n\t\tconst toneMappingNode = toneMappingLib[ toneMapping ];\n\n\t\tlet outputNode = null;\n\n\t\tif ( toneMappingNode ) {\n\n\t\t\toutputNode = toneMappingNode( toneMappingParams );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'ToneMappingNode: Unsupported Tone Mapping configuration.', toneMapping );\n\n\t\t\toutputNode = colorNode;\n\n\t\t}\n\n\t\treturn outputNode;\n\n\t}\n\n}\n\nexport default ToneMappingNode;\n\nexport const toneMapping = ( mapping, exposure, color ) => nodeObject( new ToneMappingNode( mapping, nodeObject( exposure ), nodeObject( color ) ) );\n\naddNodeClass( 'ToneMappingNode', ToneMappingNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}