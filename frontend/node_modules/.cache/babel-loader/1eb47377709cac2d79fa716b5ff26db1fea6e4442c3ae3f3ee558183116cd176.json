{"ast":null,"code":"import { createCamera } from './components/camera.js';\nimport { Cylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\nimport { Rod } from './components/rod.js';\nimport { createRenderer } from './systems/renderer.js';\nimport * as THREE from 'three';\n// import { create } from 'core-js/core/object';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters; // Affects parameters from parent component\n    this.state = state; // Affects initialState from parent component\n    this.solution = {};\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n    renderer = createRenderer();\n    renderer.setSize(container.clientWidth, container.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    container.append(renderer.domElement);\n\n    // Add elements\n    this.cylinder = new Cylinder(parameters);\n    this.Rod = new Rod(this.getCartesian(), this.parameters);\n    this.axesHelper = new THREE.AxesHelper(3 / 2 * this.parameters.l.value);\n\n    // Update cylinder position and orientation\n    this.render();\n    this.updateCylinder();\n    scene.add(this.cylinder.object, this.Rod.object, this.axesHelper);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  render() {\n    // used to render a single frame\n    renderer.render(scene, camera);\n  }\n  updateSolution(solution) {\n    this.solution = solution;\n    this.startAnimation();\n  }\n  updateParameters(parameters) {\n    this.parameters = parameters;\n    const geometry = new THREE.CylinderGeometry(this.parameters.a.value,\n    // top radius\n    this.parameters.a.value,\n    // bottom radius\n    this.parameters.h.value,\n    // height\n    32);\n    this.cylinder.geometry = geometry;\n    this.updateCylinder(false);\n    this.render();\n  }\n  updateState(state) {\n    console.log('state');\n    // this.stopAnimation()\n    this.state = state;\n    this.updateCylinder();\n    console.log(this.Rod);\n    this.Rod.tick(this.getCartesian());\n    this.render();\n  }\n  getCartesian() {\n    // return cartesian coordinates from theta, phi, and psi\n    let x = this.parameters.l.value * Math.cos(this.state.theta.value) * Math.sin(this.state.phi.value);\n    let y = this.parameters.l.value * Math.sin(this.state.theta.value) * Math.sin(this.state.phi.value);\n    let z = this.parameters.l.value * Math.cos(this.state.phi.value);\n    return {\n      x: x,\n      y: y,\n      z: z\n    };\n  }\n  updateCylinder(rotate = true) {\n    let cartesian = this.getCartesian();\n    if (rotate == false) {\n      this.cylinder.position.set(cartesian['x'], cartesian['y'], cartesian['z']);\n      return;\n    }\n    let currentPosition = new THREE.Vector3(cartesian['x'], cartesian['y'], cartesian['z']);\n    let angle = this.oldPosition.angleTo(currentPosition);\n    let difference = currentPosition.clone().sub(this.oldPosition);\n    let rotationVector = new THREE.Vector3().crossVectors(difference, this.oldPosition);\n\n    // Move cylinder to new location\n    this.cylinder.position.set(cartesian['x'], cartesian['y'], cartesian['z']);\n\n    // theta and phi rotations\n    this.cylinder.rotateOnWorldAxis(rotationVector.normalize(), -angle);\n\n    // psi rotation\n    this.cylinder.rotateOnWorldAxis(currentPosition.normalize(), this.state.psi.value);\n\n    // set oldPosition so the next rotation can be calculated properly\n    this.oldPosition = currentPosition.clone();\n  }\n  startAnimation() {\n    let i = 1;\n    let lenSolution = this.solution.theta.length;\n    console.log(lenSolution);\n    renderer.setAnimationLoop(() => {\n      if (i > lenSolution) {\n        this.stopAnimation();\n        return;\n      }\n      this.state.theta.value = this.solution.theta[i];\n      this.state.phi.value = this.solution.phi[i];\n      this.state.psi.value = this.solution.psi[i];\n      // this.state.thetaVel.value = this.solution.thetaVel[i]\n      // this.state.phiVel.value = this.solution.phiVel[i]\n      // this.state.psiVel.value = this.solution.psiVel[i]\n\n      this.updateCylinder();\n      this.Rod.updateRod(this.getCartesian(), this.parameters);\n      i = i + 1;\n      renderer.render(scene, camera);\n    });\n  }\n  stopAnimation() {\n    console.log(this.state);\n    renderer.setAnimationLoop(null);\n    renderer.render(scene, camera);\n  }\n}\nexport { gyroscopeAnimation };","map":{"version":3,"names":["createCamera","Cylinder","createScene","Rod","createRenderer","THREE","camera","renderer","scene","gyroscopeAnimation","constructor","container","parameters","state","solution","setSize","clientWidth","clientHeight","setPixelRatio","window","devicePixelRatio","append","domElement","cylinder","getCartesian","axesHelper","AxesHelper","l","value","render","updateCylinder","add","object","updateSolution","startAnimation","updateParameters","geometry","CylinderGeometry","a","h","updateState","console","log","tick","x","Math","cos","theta","sin","phi","y","z","rotate","cartesian","position","set","currentPosition","Vector3","angle","oldPosition","angleTo","difference","clone","sub","rotationVector","crossVectors","rotateOnWorldAxis","normalize","psi","i","lenSolution","length","setAnimationLoop","stopAnimation","updateRod"],"sources":["/Users/cabrera/Documents/PortfolioWebiste/frontend/src/gyroscopeRenderer/gyroscopeAnimation.js"],"sourcesContent":["import { createCamera } from './components/camera.js';\nimport { Cylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\nimport { Rod } from './components/rod.js'\n\nimport { createRenderer } from './systems/renderer.js';\nimport * as THREE from 'three';\n// import { create } from 'core-js/core/object';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\n\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters // Affects parameters from parent component\n    this.state = state // Affects initialState from parent component\n    this.solution = {}\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n\n    renderer = createRenderer();\n    renderer.setSize(container.clientWidth, container.clientHeight)\n    renderer.setPixelRatio(window.devicePixelRatio)\n\n    container.append(renderer.domElement);\n\n    // Add elements\n    this.cylinder = new Cylinder(parameters);\n    this.Rod = new Rod(this.getCartesian(), this.parameters)\n    this.axesHelper = new THREE.AxesHelper(3/2 * this.parameters.l.value)\n\n    // Update cylinder position and orientation\n    this.render()\n    this.updateCylinder()\n    scene.add(this.cylinder.object, this.Rod.object, this.axesHelper);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  render() { // used to render a single frame\n    renderer.render(scene, camera);\n  }\n\n  updateSolution(solution){\n    this.solution = solution\n    this.startAnimation()\n  }\n\n  updateParameters(parameters){\n    this.parameters = parameters\n    const geometry = new THREE.CylinderGeometry(\n      this.parameters.a.value, // top radius\n      this.parameters.a.value, // bottom radius\n      this.parameters.h.value, // height\n      32\n      ); \n    \n    this.cylinder.geometry = geometry\n    this.updateCylinder(false)\n\n    this.render()\n  }\n\n  updateState(state){\n    console.log('state')\n    // this.stopAnimation()\n    this.state = state\n\n    this.updateCylinder()\n    console.log(this.Rod)\n    this.Rod.tick(this.getCartesian())\n    this.render()\n  }\n\n  getCartesian(){ // return cartesian coordinates from theta, phi, and psi\n    let x = this.parameters.l.value * Math.cos(this.state.theta.value) * Math.sin(this.state.phi.value)\n    let y = this.parameters.l.value * Math.sin(this.state.theta.value) * Math.sin(this.state.phi.value)\n    let z = this.parameters.l.value * Math.cos(this.state.phi.value)\n\n    return {x:x, y:y, z:z}\n  }\n\n  updateCylinder(rotate = true){\n    let cartesian = this.getCartesian()\n\n    if (rotate == false) {\n      this.cylinder.position.set(cartesian['x'], cartesian['y'], cartesian['z'])\n      return\n    }\n\n\n    let currentPosition = new THREE.Vector3(cartesian['x'], cartesian['y'], cartesian['z'])\n\n    let angle = this.oldPosition.angleTo(currentPosition)\n    let difference = currentPosition.clone().sub(this.oldPosition)\n    let rotationVector = new THREE.Vector3().crossVectors(difference, this.oldPosition)\n\n    // Move cylinder to new location\n    this.cylinder.position.set(cartesian['x'], cartesian['y'], cartesian['z'])\n\n    // theta and phi rotations\n    this.cylinder.rotateOnWorldAxis(rotationVector.normalize(), -angle)\n\n    // psi rotation\n    this.cylinder.rotateOnWorldAxis(currentPosition.normalize(), this.state.psi.value)\n\n    // set oldPosition so the next rotation can be calculated properly\n    this.oldPosition = currentPosition.clone()\n  }\n  startAnimation(){\n    let i = 1\n    let lenSolution = this.solution.theta.length\n    console.log(lenSolution)\n    renderer.setAnimationLoop(() => {\n      if (i > lenSolution){\n        this.stopAnimation() \n        return\n      }\n      this.state.theta.value = this.solution.theta[i]\n      this.state.phi.value = this.solution.phi[i]\n      this.state.psi.value = this.solution.psi[i]\n      // this.state.thetaVel.value = this.solution.thetaVel[i]\n      // this.state.phiVel.value = this.solution.phiVel[i]\n      // this.state.psiVel.value = this.solution.psiVel[i]\n\n      this.updateCylinder()\n      this.Rod.updateRod(this.getCartesian(), this.parameters)\n\n      i = i + 1\n      renderer.render(scene, camera)\n    })\n  }\n\n  stopAnimation(){\n    console.log(this.state)\n    renderer.setAnimationLoop(null)\n    renderer.render(scene, camera)\n  }\n\n}\n\nexport { gyroscopeAnimation };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}