{"ast":null,"code":"import * as THREE from '../../node_modules/three';\nexport default {\n  name: 'gyroscopeSimulator',\n  data() {\n    return {\n      L: 5,\n      a: 1,\n      h: 0.5,\n      theta: Math.PI / 4,\n      phi: Math.PI / 4,\n      psi: Math.PI / 4,\n      x: null,\n      y: null,\n      z: null\n    };\n  },\n  methods: {\n    cylinderPosition(theta, phi) {\n      this.x = this.L * Math.cos(theta) * Math.sin(phi);\n      this.y = this.L * Math.sin(theta) * Math.sin(phi);\n      this.z = this.L * Math.cos(phi);\n    }\n  },\n  mounted() {\n    this.cylinderPosition(this.theta, this.phi);\n    // console.log(this.props.gyroscope)\n    // Initialize the Three.js scene\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, this.$el.clientWidth / this.$el.clientHeight, 0.1, 1000);\n    camera.up.set(0, 0, 1); // Set up to be z axis\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    this.$refs.sceneContainer.appendChild(renderer.domElement);\n\n    // Axes Helper\n    // X RED | Y GREEN | Z BLUE |\n    const axesHelper = new THREE.AxesHelper(this.L * 2);\n\n    // Cylinder to the scene\n    const geometryCylinder = new THREE.CylinderGeometry(this.a, this.a, this.h, 32);\n    const materialCylinder = new THREE.MeshBasicMaterial({\n      color: 0xffff00,\n      wireframe: true\n    });\n    const cylinder = new THREE.Mesh(geometryCylinder, materialCylinder);\n    cylinder.location.set(this.x, this.y, this.z);\n    cylinder.rotation.set(Math.PI / 2, 0, 0); // Change default orientation, since I changed the camera's sense of up\n\n    // Rod to the scene\n    // const geometryRod = new THREE.CylinderGeometry(this.a/50, this.a/50, this.L, 32 ); \n    // const materialRod = new THREE.MeshBasicMaterial({ color: \"blue\" });\n    // const rod = new THREE.Mesh(geometryRod, materialRod);\n\n    scene.add(cylinder, axesHelper);\n\n    // const material = new THREE.MeshBasicMaterial( {color: 0xffff00} ); \n    // const cylinder = new THREE.Mesh( geometry, material ); \n    // scene.add(cylinder);\n\n    camera.position.x = this.L;\n    camera.position.y = this.L;\n    camera.position.z = this.L;\n    camera.lookAt(0, 0, 0);\n    // Render loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n    animate();\n  }\n};","map":{"version":3,"names":["THREE","name","data","L","a","h","theta","Math","PI","phi","psi","x","y","z","methods","cylinderPosition","cos","sin","mounted","scene","Scene","camera","PerspectiveCamera","$el","clientWidth","clientHeight","up","set","renderer","WebGLRenderer","setSize","$refs","sceneContainer","appendChild","domElement","axesHelper","AxesHelper","geometryCylinder","CylinderGeometry","materialCylinder","MeshBasicMaterial","color","wireframe","cylinder","Mesh","location","rotation","add","position","lookAt","animate","requestAnimationFrame","render"],"sources":["/Users/cabrera/Documents/PortfolioWebiste/frontend/src/components/gyroscopeSimulator.vue"],"sourcesContent":["<template>\n  <div ref=\"sceneContainer\" class=\"scene-container\"></div>\n</template>\n\n<script>\nimport * as THREE from '../../node_modules/three';\n\nexport default {\n  name: 'gyroscopeSimulator',\n  data() {\n    return {\n      L: 5,\n      a: 1,\n      h: 0.5,\n      theta: Math.PI/4,\n      phi: Math.PI/4,\n      psi: Math.PI/4,\n      x: null,\n      y: null,\n      z: null\n    }\n  },\n  methods: {\n    cylinderPosition(theta, phi){\n      this.x = this.L * Math.cos(theta) * Math.sin(phi)\n      this.y = this.L * Math.sin(theta) * Math.sin(phi)\n      this.z = this.L * Math.cos(phi)\n    }\n  },\n  mounted() {\n    this.cylinderPosition(this.theta, this.phi)\n    // console.log(this.props.gyroscope)\n    // Initialize the Three.js scene\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      this.$el.clientWidth / this.$el.clientHeight,\n      0.1,\n      1000\n    );\n    camera.up.set(0,0,1) // Set up to be z axis\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    this.$refs.sceneContainer.appendChild(renderer.domElement);\n\n    // Axes Helper\n    // X RED | Y GREEN | Z BLUE |\n    const axesHelper = new THREE.AxesHelper(this.L*2)\n\n    // Cylinder to the scene\n    const geometryCylinder = new THREE.CylinderGeometry(this.a, this.a, this.h, 32 ); \n    const materialCylinder = new THREE.MeshBasicMaterial({ color: 0xffff00, wireframe: true });\n    const cylinder = new THREE.Mesh(geometryCylinder, materialCylinder);\n    cylinder.location.set(this.x,this.y,this.z)\n    cylinder.rotation.set(Math.PI/2,0,0) // Change default orientation, since I changed the camera's sense of up\n\n\n    // Rod to the scene\n    // const geometryRod = new THREE.CylinderGeometry(this.a/50, this.a/50, this.L, 32 ); \n    // const materialRod = new THREE.MeshBasicMaterial({ color: \"blue\" });\n    // const rod = new THREE.Mesh(geometryRod, materialRod);\n\n    scene.add(cylinder, axesHelper);\n\n\n    // const material = new THREE.MeshBasicMaterial( {color: 0xffff00} ); \n    // const cylinder = new THREE.Mesh( geometry, material ); \n    // scene.add(cylinder);\n\n    camera.position.x = this.L\n    camera.position.y = this.L\n    camera.position.z = this.L\n    camera.lookAt(0,0,0)\n    // Render loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  },\n};\n</script>\n\n<style scoped>\n.scene-container {\n  width: 100%;\n  height: 70vh;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}