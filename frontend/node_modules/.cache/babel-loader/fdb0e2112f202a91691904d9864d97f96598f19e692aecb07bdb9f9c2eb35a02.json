{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createCamera } from './components/camera.js';\nimport { CylinderHalf } from './components/cylinderHalf.js';\nimport { createScene } from './components/scene.js';\nimport { Rod } from './components/rod.js';\nimport { createLights } from './components/lights.js';\nimport { createFloor } from './components/floor.js';\nimport { createRenderer } from './systems/renderer.js';\nimport { Loop } from './systems/Loop.js';\nimport { createControls } from './systems/OrbitControls.js';\nimport { Resizer } from './systems/Resizer.js';\nimport { SVGRenderer } from 'three/examples/jsm/renderers/SVGRenderer.js';\n\n// import * as THREE from 'three'; // For use with axes and light helpers\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\nlet loop;\nlet controls;\nclass gyroscopeAnimation {\n  constructor(container, parameters, state, solution) {\n    this.parameters = parameters; // Affects parameters from parent component\n    this.state = state; // Affects initialState from parent component\n    this.SVGRenderer = new SVGRenderer();\n    this.SVGRenderer.overdraw = 0;\n    this.SVGRenderer.setSize(container.clientWidth, container.clientHeight);\n    container.append(this.SVGRenderer.domElement);\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n    renderer = createRenderer();\n    renderer.setSize(container.clientWidth, container.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    container.append(renderer.domElement);\n    const resizer = new Resizer(container, camera, renderer);\n    resizer.onResize = () => {\n      this.render();\n    };\n    controls = createControls(camera, renderer.domElement);\n    controls.listenToKeyEvents(container);\n    loop = new Loop(camera, scene, renderer, controls, solution)\n\n    // Add elements\n    ;\n    [this.spotLight, this.hemisphereLight] = createLights(this.parameters);\n    this.floor = createFloor(this.parameters);\n    this.blueHalf = new CylinderHalf(this.state, parameters, 0, \"cornflowerblue\");\n    this.redHalf = new CylinderHalf(this.state, parameters, Math.PI, \"crimson\");\n    this.rod = new Rod(this.state, this.parameters);\n    loop.updatables.push(this.blueHalf);\n    loop.updatables.push(this.redHalf);\n    loop.updatables.push(this.rod);\n\n    // this.axesHelper = new THREE.AxesHelper(3/2 * this.parameters.l.value)\n    // this.spotLightHelper = new THREE.SpotLightHelper(this.light)\n\n    // Update cylinder position and orientation\n    scene.add(this.blueHalf.object, this.redHalf.object, this.rod.object, this.spotLight, this.hemisphereLight, this.floor);\n    // loop.start(this.state)\n    this.SVGRenderer.render(scene, camera);\n  }\n  render() {\n    // used to render a single frame\n    renderer.render(scene, camera);\n  }\n  updateSolution(solution) {\n    loop.solution = solution;\n    loop.start(this.state);\n  }\n  updateParameters(parameters) {\n    this.parameters = parameters;\n    loop.isPaused = true;\n    this.blueHalf.changeParameters(this.parameters);\n    this.redHalf.changeParameters(this.parameters);\n  }\n  updateState(state) {\n    this.state = state;\n    loop.isPaused = true;\n    this.blueHalf.tick(this.state);\n    this.redHalf.tick(this.state);\n    this.rod.tick(this.state);\n  }\n  pause(state) {\n    this.state = state;\n    loop.isPaused = true;\n  }\n}\nexport { gyroscopeAnimation };","map":{"version":3,"names":["createCamera","CylinderHalf","createScene","Rod","createLights","createFloor","createRenderer","Loop","createControls","Resizer","SVGRenderer","camera","renderer","scene","loop","controls","gyroscopeAnimation","constructor","container","parameters","state","solution","overdraw","setSize","clientWidth","clientHeight","append","domElement","setPixelRatio","window","devicePixelRatio","resizer","onResize","render","listenToKeyEvents","spotLight","hemisphereLight","floor","blueHalf","redHalf","Math","PI","rod","updatables","push","add","object","updateSolution","start","updateParameters","isPaused","changeParameters","updateState","tick","pause"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/src/gyroscopeRenderer/gyroscopeAnimation.js"],"sourcesContent":["import { createCamera } from './components/camera.js';\nimport { CylinderHalf } from './components/cylinderHalf.js';\nimport { createScene } from './components/scene.js';\nimport { Rod } from './components/rod.js'\nimport { createLights } from './components/lights.js'\nimport { createFloor } from './components/floor.js'\n\nimport { createRenderer } from './systems/renderer.js';\nimport { Loop } from './systems/Loop.js'\nimport { createControls } from './systems/OrbitControls.js'\nimport { Resizer } from './systems/Resizer.js';\nimport {SVGRenderer} from 'three/examples/jsm/renderers/SVGRenderer.js'\n\n// import * as THREE from 'three'; // For use with axes and light helpers\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\nlet loop;\nlet controls\n\nclass gyroscopeAnimation {\n  constructor(container, parameters, state, solution) {\n    this.parameters = parameters // Affects parameters from parent component\n    this.state = state // Affects initialState from parent component\n    this.SVGRenderer = new SVGRenderer()\n    this.SVGRenderer.overdraw = 0\n    this.SVGRenderer.setSize(container.clientWidth, container.clientHeight)\n    container.append(this.SVGRenderer.domElement)\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n    renderer = createRenderer();\n      renderer.setSize(container.clientWidth, container.clientHeight)\n      renderer.setPixelRatio(window.devicePixelRatio)\n      container.append(renderer.domElement);\n\n    const resizer = new Resizer(container, camera, renderer);\n    resizer.onResize = () => {\n      this.render();\n    }    \n    controls = createControls(camera, renderer.domElement)\n    controls.listenToKeyEvents(container)\n    loop = new Loop(camera, scene, renderer, controls, solution)\n\n\n    // Add elements\n    ;[this.spotLight, this.hemisphereLight] = createLights(this.parameters)\n    this.floor = createFloor(this.parameters)\n    this.blueHalf = new CylinderHalf(this.state, parameters, 0, \"cornflowerblue\")\n    this.redHalf = new CylinderHalf(this.state, parameters, Math.PI, \"crimson\")\n    this.rod = new Rod(this.state, this.parameters)\n    loop.updatables.push(this.blueHalf)\n    loop.updatables.push(this.redHalf)\n    loop.updatables.push(this.rod)\n\n    // this.axesHelper = new THREE.AxesHelper(3/2 * this.parameters.l.value)\n    // this.spotLightHelper = new THREE.SpotLightHelper(this.light)\n\n    // Update cylinder position and orientation\n    scene.add(this.blueHalf.object,this.redHalf.object, this.rod.object, this.spotLight, this.hemisphereLight, this.floor);\n    // loop.start(this.state)\n    this.SVGRenderer.render(scene, camera)\n  }\n\n  render() { // used to render a single frame\n    renderer.render(scene, camera);\n  }\n\n  updateSolution(solution){\n    loop.solution = solution\n    loop.start(this.state)\n  }\n\n  updateParameters(parameters){\n    this.parameters = parameters\n    loop.isPaused = true\n    this.blueHalf.changeParameters(this.parameters)\n    this.redHalf.changeParameters(this.parameters)\n  }\n\n  updateState(state){\n    this.state = state\n    loop.isPaused = true\n    this.blueHalf.tick(this.state)\n    this.redHalf.tick(this.state)\n    this.rod.tick(this.state)\n  }\n\n  pause(state){\n    this.state = state\n    loop.isPaused = true\n  }\n}\n\nexport { gyroscopeAnimation };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}