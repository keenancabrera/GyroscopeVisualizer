{"ast":null,"code":"import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { cameraProjectionMatrix } from '../accessors/CameraNode.js';\nimport { materialRotation } from '../accessors/MaterialNode.js';\nimport { modelViewMatrix, modelWorldMatrix } from '../accessors/ModelNode.js';\nimport { positionLocal } from '../accessors/PositionNode.js';\nimport { float, vec2, vec3, vec4 } from '../shadernode/ShaderNode.js';\nimport { SpriteMaterial } from 'three';\nconst defaultValues = new SpriteMaterial();\nclass SpriteNodeMaterial extends NodeMaterial {\n  constructor(parameters) {\n    super();\n    this.isSpriteNodeMaterial = true;\n    this.lights = false;\n    this.normals = false;\n    this.colorNode = null;\n    this.opacityNode = null;\n    this.alphaTestNode = null;\n    this.lightNode = null;\n    this.positionNode = null;\n    this.rotationNode = null;\n    this.scaleNode = null;\n    this.setDefaultValues(defaultValues);\n    this.setValues(parameters);\n  }\n  setupPosition({\n    object,\n    context\n  }) {\n    // < VERTEX STAGE >\n\n    const {\n      positionNode,\n      rotationNode,\n      scaleNode\n    } = this;\n    const vertex = positionLocal;\n    let mvPosition = modelViewMatrix.mul(vec3(positionNode || 0));\n    let scale = vec2(modelWorldMatrix[0].xyz.length(), modelWorldMatrix[1].xyz.length());\n    if (scaleNode !== null) {\n      scale = scale.mul(scaleNode);\n    }\n    let alignedPosition = vertex.xy;\n    if (object.center && object.center.isVector2 === true) {\n      alignedPosition = alignedPosition.sub(uniform(object.center).sub(0.5));\n    }\n    alignedPosition = alignedPosition.mul(scale);\n    const rotation = float(rotationNode || materialRotation);\n    const cosAngle = rotation.cos();\n    const sinAngle = rotation.sin();\n    const rotatedPosition = vec2(\n    // @TODO: Maybe we can create mat2 and write something like rotationMatrix.mul( alignedPosition )?\n    vec2(cosAngle, sinAngle.negate()).dot(alignedPosition), vec2(sinAngle, cosAngle).dot(alignedPosition));\n    mvPosition = vec4(mvPosition.xy.add(rotatedPosition), mvPosition.zw);\n    const modelViewProjection = cameraProjectionMatrix.mul(mvPosition);\n    context.vertex = vertex;\n    return modelViewProjection;\n  }\n  copy(source) {\n    this.positionNode = source.positionNode;\n    this.rotationNode = source.rotationNode;\n    this.scaleNode = source.scaleNode;\n    return super.copy(source);\n  }\n}\nexport default SpriteNodeMaterial;\naddNodeMaterial('SpriteNodeMaterial', SpriteNodeMaterial);","map":{"version":3,"names":["NodeMaterial","addNodeMaterial","uniform","cameraProjectionMatrix","materialRotation","modelViewMatrix","modelWorldMatrix","positionLocal","float","vec2","vec3","vec4","SpriteMaterial","defaultValues","SpriteNodeMaterial","constructor","parameters","isSpriteNodeMaterial","lights","normals","colorNode","opacityNode","alphaTestNode","lightNode","positionNode","rotationNode","scaleNode","setDefaultValues","setValues","setupPosition","object","context","vertex","mvPosition","mul","scale","xyz","length","alignedPosition","xy","center","isVector2","sub","rotation","cosAngle","cos","sinAngle","sin","rotatedPosition","negate","dot","add","zw","modelViewProjection","copy","source"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/nodes/materials/SpriteNodeMaterial.js"],"sourcesContent":["import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { cameraProjectionMatrix } from '../accessors/CameraNode.js';\nimport { materialRotation } from '../accessors/MaterialNode.js';\nimport { modelViewMatrix, modelWorldMatrix } from '../accessors/ModelNode.js';\nimport { positionLocal } from '../accessors/PositionNode.js';\nimport { float, vec2, vec3, vec4 } from '../shadernode/ShaderNode.js';\n\nimport { SpriteMaterial } from 'three';\n\nconst defaultValues = new SpriteMaterial();\n\nclass SpriteNodeMaterial extends NodeMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isSpriteNodeMaterial = true;\n\n\t\tthis.lights = false;\n\t\tthis.normals = false;\n\n\t\tthis.colorNode = null;\n\t\tthis.opacityNode = null;\n\n\t\tthis.alphaTestNode = null;\n\n\t\tthis.lightNode = null;\n\n\t\tthis.positionNode = null;\n\t\tthis.rotationNode = null;\n\t\tthis.scaleNode = null;\n\n\t\tthis.setDefaultValues( defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupPosition( { object, context } ) {\n\n\t\t// < VERTEX STAGE >\n\n\t\tconst { positionNode, rotationNode, scaleNode } = this;\n\n\t\tconst vertex = positionLocal;\n\n\t\tlet mvPosition = modelViewMatrix.mul( vec3( positionNode || 0 ) );\n\n\t\tlet scale = vec2( modelWorldMatrix[ 0 ].xyz.length(), modelWorldMatrix[ 1 ].xyz.length() );\n\n\t\tif ( scaleNode !== null ) {\n\n\t\t\tscale = scale.mul( scaleNode );\n\n\t\t}\n\n\t\tlet alignedPosition = vertex.xy;\n\n\t\tif ( object.center && object.center.isVector2 === true ) {\n\n\t\t\talignedPosition = alignedPosition.sub( uniform( object.center ).sub( 0.5 ) );\n\n\t\t}\n\n\t\talignedPosition = alignedPosition.mul( scale );\n\n\t\tconst rotation = float( rotationNode || materialRotation );\n\n\t\tconst cosAngle = rotation.cos();\n\t\tconst sinAngle = rotation.sin();\n\n\t\tconst rotatedPosition = vec2( // @TODO: Maybe we can create mat2 and write something like rotationMatrix.mul( alignedPosition )?\n\t\t\tvec2( cosAngle, sinAngle.negate() ).dot( alignedPosition ),\n\t\t\tvec2( sinAngle, cosAngle ).dot( alignedPosition )\n\t\t);\n\n\t\tmvPosition = vec4( mvPosition.xy.add( rotatedPosition ), mvPosition.zw );\n\n\t\tconst modelViewProjection = cameraProjectionMatrix.mul( mvPosition );\n\n\t\tcontext.vertex = vertex;\n\n\t\treturn modelViewProjection;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.positionNode = source.positionNode;\n\t\tthis.rotationNode = source.rotationNode;\n\t\tthis.scaleNode = source.scaleNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n\nexport default SpriteNodeMaterial;\n\naddNodeMaterial( 'SpriteNodeMaterial', SpriteNodeMaterial );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}