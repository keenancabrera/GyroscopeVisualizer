{"ast":null,"code":"import { LinearFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, NearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, RGBAFormat, DepthFormat, DepthStencilFormat, UnsignedShortType, UnsignedIntType, UnsignedInt248Type, FloatType, HalfFloatType, MirroredRepeatWrapping, ClampToEdgeWrapping, RepeatWrapping, UnsignedByteType, _SRGBAFormat, NoColorSpace, LinearSRGBColorSpace, SRGBColorSpace, NeverCompare, AlwaysCompare, LessCompare, LessEqualCompare, EqualCompare, GreaterEqualCompare, GreaterCompare, NotEqualCompare } from 'three';\nlet initialized = false,\n  wrappingToGL,\n  filterToGL,\n  compareToGL;\nclass WebGLTextureUtils {\n  constructor(backend) {\n    this.backend = backend;\n    this.gl = backend.gl;\n    this.extensions = backend.extensions;\n    if (initialized === false) {\n      this._init(this.gl);\n      initialized = true;\n    }\n  }\n  _init(gl) {\n    // Store only WebGL constants here.\n\n    wrappingToGL = {\n      [RepeatWrapping]: gl.REPEAT,\n      [ClampToEdgeWrapping]: gl.CLAMP_TO_EDGE,\n      [MirroredRepeatWrapping]: gl.MIRRORED_REPEAT\n    };\n    filterToGL = {\n      [NearestFilter]: gl.NEAREST,\n      [NearestMipmapNearestFilter]: gl.NEAREST_MIPMAP_NEAREST,\n      [NearestMipmapLinearFilter]: gl.NEAREST_MIPMAP_LINEAR,\n      [LinearFilter]: gl.LINEAR,\n      [LinearMipmapNearestFilter]: gl.LINEAR_MIPMAP_NEAREST,\n      [LinearMipmapLinearFilter]: gl.LINEAR_MIPMAP_LINEAR\n    };\n    compareToGL = {\n      [NeverCompare]: gl.NEVER,\n      [AlwaysCompare]: gl.ALWAYS,\n      [LessCompare]: gl.LESS,\n      [LessEqualCompare]: gl.LEQUAL,\n      [EqualCompare]: gl.EQUAL,\n      [GreaterEqualCompare]: gl.GEQUAL,\n      [GreaterCompare]: gl.GREATER,\n      [NotEqualCompare]: gl.NOTEQUAL\n    };\n  }\n  filterFallback(f) {\n    const {\n      gl\n    } = this;\n    if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n      return gl.NEAREST;\n    }\n    return gl.LINEAR;\n  }\n  getGLTextureType(texture) {\n    const {\n      gl\n    } = this;\n    let glTextureType;\n    if (texture.isCubeTexture === true) {\n      glTextureType = gl.TEXTURE_CUBE_MAP;\n    } else {\n      glTextureType = gl.TEXTURE_2D;\n    }\n    return glTextureType;\n  }\n  getInternalFormat(internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false) {\n    const {\n      gl,\n      extensions\n    } = this;\n    if (internalFormatName !== null) {\n      if (gl[internalFormatName] !== undefined) return gl[internalFormatName];\n      console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n    }\n    let internalFormat = glFormat;\n    if (glFormat === gl.RED) {\n      if (glType === gl.FLOAT) internalFormat = gl.R32F;\n      if (glType === gl.HALF_FLOAT) internalFormat = gl.R16F;\n      if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.R8;\n    }\n    if (glFormat === gl.RED_INTEGER) {\n      if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.R8UI;\n      if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.R16UI;\n      if (glType === gl.UNSIGNED_INT) internalFormat = gl.R32UI;\n      if (glType === gl.BYTE) internalFormat = gl.R8I;\n      if (glType === gl.SHORT) internalFormat = gl.R16I;\n      if (glType === gl.INT) internalFormat = gl.R32I;\n    }\n    if (glFormat === gl.RG) {\n      if (glType === gl.FLOAT) internalFormat = gl.RG32F;\n      if (glType === gl.HALF_FLOAT) internalFormat = gl.RG16F;\n      if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RG8;\n    }\n    if (glFormat === gl.RGBA) {\n      if (glType === gl.FLOAT) internalFormat = gl.RGBA32F;\n      if (glType === gl.HALF_FLOAT) internalFormat = gl.RGBA16F;\n      if (glType === gl.UNSIGNED_BYTE) internalFormat = colorSpace === SRGBColorSpace && forceLinearTransfer === false ? gl.SRGB8_ALPHA8 : gl.RGBA8;\n      if (glType === gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = gl.RGBA4;\n      if (glType === gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = gl.RGB5_A1;\n    }\n    if (glFormat === gl.DEPTH_COMPONENT) {\n      if (glType === gl.UNSIGNED_INT) internalFormat = gl.DEPTH_COMPONENT24;\n      if (glType === gl.FLOAT) internalFormat = gl.DEPTH_COMPONENT32F;\n    }\n    if (glFormat === gl.DEPTH_STENCIL) {\n      if (glType === gl.UNSIGNED_INT_24_8) internalFormat = gl.DEPTH24_STENCIL8;\n    }\n    if (internalFormat === gl.R16F || internalFormat === gl.R32F || internalFormat === gl.RG16F || internalFormat === gl.RG32F || internalFormat === gl.RGBA16F || internalFormat === gl.RGBA32F) {\n      extensions.get('EXT_color_buffer_float');\n    }\n    return internalFormat;\n  }\n  setTextureParameters(textureType, texture) {\n    const {\n      gl,\n      extensions\n    } = this;\n    gl.texParameteri(textureType, gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);\n    gl.texParameteri(textureType, gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);\n    if (textureType === gl.TEXTURE_3D || textureType === gl.TEXTURE_2D_ARRAY) {\n      gl.texParameteri(textureType, gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);\n    }\n    gl.texParameteri(textureType, gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);\n    gl.texParameteri(textureType, gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);\n    if (texture.compareFunction) {\n      gl.texParameteri(textureType, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\n      gl.texParameteri(textureType, gl.TEXTURE_COMPARE_FUNC, compareToGL[texture.compareFunction]);\n    }\n    if (extensions.has('EXT_texture_filter_anisotropic') === true) {\n      //extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n      if (texture.magFilter === NearestFilter) return;\n      if (texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter) return;\n      if (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2\n\n      if (texture.anisotropy > 1 /*|| properties.get( texture ).__currentAnisotropy*/) {\n\n        //gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n        //properties.get( texture ).__currentAnisotropy = texture.anisotropy;\n      }\n    }\n  }\n}\nexport default WebGLTextureUtils;","map":{"version":3,"names":["LinearFilter","LinearMipmapLinearFilter","LinearMipmapNearestFilter","NearestFilter","NearestMipmapLinearFilter","NearestMipmapNearestFilter","RGBAFormat","DepthFormat","DepthStencilFormat","UnsignedShortType","UnsignedIntType","UnsignedInt248Type","FloatType","HalfFloatType","MirroredRepeatWrapping","ClampToEdgeWrapping","RepeatWrapping","UnsignedByteType","_SRGBAFormat","NoColorSpace","LinearSRGBColorSpace","SRGBColorSpace","NeverCompare","AlwaysCompare","LessCompare","LessEqualCompare","EqualCompare","GreaterEqualCompare","GreaterCompare","NotEqualCompare","initialized","wrappingToGL","filterToGL","compareToGL","WebGLTextureUtils","constructor","backend","gl","extensions","_init","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","NEAREST","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","filterFallback","f","getGLTextureType","texture","glTextureType","isCubeTexture","TEXTURE_CUBE_MAP","TEXTURE_2D","getInternalFormat","internalFormatName","glFormat","glType","colorSpace","forceLinearTransfer","undefined","console","warn","internalFormat","RED","FLOAT","R32F","HALF_FLOAT","R16F","UNSIGNED_BYTE","R8","RED_INTEGER","R8UI","UNSIGNED_SHORT","R16UI","UNSIGNED_INT","R32UI","BYTE","R8I","SHORT","R16I","INT","R32I","RG","RG32F","RG16F","RG8","RGBA","RGBA32F","RGBA16F","SRGB8_ALPHA8","RGBA8","UNSIGNED_SHORT_4_4_4_4","RGBA4","UNSIGNED_SHORT_5_5_5_1","RGB5_A1","DEPTH_COMPONENT","DEPTH_COMPONENT24","DEPTH_COMPONENT32F","DEPTH_STENCIL","UNSIGNED_INT_24_8","DEPTH24_STENCIL8","get","setTextureParameters","textureType","texParameteri","TEXTURE_WRAP_S","wrapS","TEXTURE_WRAP_T","wrapT","TEXTURE_3D","TEXTURE_2D_ARRAY","TEXTURE_WRAP_R","wrapR","TEXTURE_MAG_FILTER","magFilter","TEXTURE_MIN_FILTER","minFilter","compareFunction","TEXTURE_COMPARE_MODE","COMPARE_REF_TO_TEXTURE","TEXTURE_COMPARE_FUNC","has","type","anisotropy"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/renderers/webgl/utils/WebGLTextureUtils.js"],"sourcesContent":["import { LinearFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, NearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, RGBAFormat, DepthFormat, DepthStencilFormat, UnsignedShortType, UnsignedIntType, UnsignedInt248Type, FloatType, HalfFloatType, MirroredRepeatWrapping, ClampToEdgeWrapping, RepeatWrapping, UnsignedByteType, _SRGBAFormat, NoColorSpace, LinearSRGBColorSpace, SRGBColorSpace, NeverCompare, AlwaysCompare, LessCompare, LessEqualCompare, EqualCompare, GreaterEqualCompare, GreaterCompare, NotEqualCompare } from 'three';\n\nlet initialized = false, wrappingToGL, filterToGL, compareToGL;\n\nclass WebGLTextureUtils {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t\tthis.gl = backend.gl;\n\t\tthis.extensions = backend.extensions;\n\n\t\tif ( initialized === false ) {\n\n\t\t\tthis._init( this.gl );\n\n\t\t\tinitialized = true;\n\n\t\t}\n\n\t}\n\n\t_init( gl ) {\n\n\t\t// Store only WebGL constants here.\n\n\t\twrappingToGL = {\n\t\t\t[ RepeatWrapping ]: gl.REPEAT,\n\t\t\t[ ClampToEdgeWrapping ]: gl.CLAMP_TO_EDGE,\n\t\t\t[ MirroredRepeatWrapping ]: gl.MIRRORED_REPEAT\n\t\t};\n\n\t\tfilterToGL = {\n\t\t\t[ NearestFilter ]: gl.NEAREST,\n\t\t\t[ NearestMipmapNearestFilter ]: gl.NEAREST_MIPMAP_NEAREST,\n\t\t\t[ NearestMipmapLinearFilter ]: gl.NEAREST_MIPMAP_LINEAR,\n\n\t\t\t[ LinearFilter ]: gl.LINEAR,\n\t\t\t[ LinearMipmapNearestFilter ]: gl.LINEAR_MIPMAP_NEAREST,\n\t\t\t[ LinearMipmapLinearFilter ]: gl.LINEAR_MIPMAP_LINEAR\n\t\t};\n\n\t\tcompareToGL = {\n\t\t\t[ NeverCompare ]: gl.NEVER,\n\t\t\t[ AlwaysCompare ]: gl.ALWAYS,\n\t\t\t[ LessCompare ]: gl.LESS,\n\t\t\t[ LessEqualCompare ]: gl.LEQUAL,\n\t\t\t[ EqualCompare ]: gl.EQUAL,\n\t\t\t[ GreaterEqualCompare ]: gl.GEQUAL,\n\t\t\t[ GreaterCompare ]: gl.GREATER,\n\t\t\t[ NotEqualCompare ]: gl.NOTEQUAL\n\t\t};\n\n\t}\n\n\tfilterFallback( f ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\treturn gl.NEAREST;\n\n\t\t}\n\n\t\treturn gl.LINEAR;\n\n\t}\n\n\tgetGLTextureType( texture ) {\n\n\t\tconst { gl } = this;\n\n\t\tlet glTextureType;\n\n\t\tif ( texture.isCubeTexture === true ) {\n\n\t\t\tglTextureType = gl.TEXTURE_CUBE_MAP;\n\n\t\t} else {\n\n\t\t\tglTextureType = gl.TEXTURE_2D;\n\n\n\t\t}\n\n\t\treturn glTextureType;\n\n\t}\n\n\tgetInternalFormat( internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false ) {\n\n\t\tconst { gl, extensions } = this;\n\n\t\tif ( internalFormatName !== null ) {\n\n\t\t\tif ( gl[ internalFormatName ] !== undefined ) return gl[ internalFormatName ];\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t}\n\n\t\tlet internalFormat = glFormat;\n\n\t\tif ( glFormat === gl.RED ) {\n\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.R32F;\n\t\t\tif ( glType === gl.HALF_FLOAT ) internalFormat = gl.R16F;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.R8;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RED_INTEGER ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.R8UI;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.R16UI;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.R32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.R8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.R16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.R32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RG ) {\n\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.RG32F;\n\t\t\tif ( glType === gl.HALF_FLOAT ) internalFormat = gl.RG16F;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RG8;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RGBA ) {\n\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.RGBA32F;\n\t\t\tif ( glType === gl.HALF_FLOAT ) internalFormat = gl.RGBA16F;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = ( colorSpace === SRGBColorSpace && forceLinearTransfer === false ) ? gl.SRGB8_ALPHA8 : gl.RGBA8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = gl.RGBA4;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = gl.RGB5_A1;\n\n\t\t}\n\n\t\tif ( glFormat === gl.DEPTH_COMPONENT ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.DEPTH_COMPONENT24;\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.DEPTH_COMPONENT32F;\n\n\t\t}\n\n\t\tif ( glFormat === gl.DEPTH_STENCIL ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_INT_24_8 ) internalFormat = gl.DEPTH24_STENCIL8;\n\n\t\t}\n\n\t\tif ( internalFormat === gl.R16F || internalFormat === gl.R32F ||\n\t\t\tinternalFormat === gl.RG16F || internalFormat === gl.RG32F ||\n\t\t\tinternalFormat === gl.RGBA16F || internalFormat === gl.RGBA32F ) {\n\n\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t}\n\n\t\treturn internalFormat;\n\n\t}\n\n\tsetTextureParameters( textureType, texture ) {\n\n\t\tconst { gl, extensions } = this;\n\n\t\tgl.texParameteri( textureType, gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );\n\t\tgl.texParameteri( textureType, gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );\n\n\t\tif ( textureType === gl.TEXTURE_3D || textureType === gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\tgl.texParameteri( textureType, gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );\n\n\t\t}\n\n\t\tgl.texParameteri( textureType, gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );\n\t\tgl.texParameteri( textureType, gl.TEXTURE_MIN_FILTER, filterToGL[ texture.minFilter ] );\n\n\t\tif ( texture.compareFunction ) {\n\n\t\t\tgl.texParameteri( textureType, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE );\n\t\t\tgl.texParameteri( textureType, gl.TEXTURE_COMPARE_FUNC, compareToGL[ texture.compareFunction ] );\n\n\t\t}\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\t//extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( texture.magFilter === NearestFilter ) return;\n\t\t\tif ( texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter ) return;\n\t\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2\n\n\t\t\tif ( texture.anisotropy > 1 /*|| properties.get( texture ).__currentAnisotropy*/ ) {\n\n\t\t\t\t//gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t//properties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport default WebGLTextureUtils;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}