{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport DataMap from '../DataMap.js';\nimport NodeBuilderState from './NodeBuilderState.js';\nimport { NoToneMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping } from 'three';\nimport { NodeFrame, cubeTexture, texture, rangeFog, densityFog, reference, toneMapping, equirectUV, viewportBottomLeft, normalWorld } from '../../../nodes/Nodes.js';\nclass Nodes extends DataMap {\n  constructor(renderer, backend) {\n    super();\n    this.renderer = renderer;\n    this.backend = backend;\n    this.nodeFrame = new NodeFrame();\n    this.nodeBuilderCache = new Map();\n  }\n  getForRenderCacheKey(renderObject) {\n    return renderObject.initialCacheKey;\n  }\n  getForRender(renderObject) {\n    const renderObjectData = this.get(renderObject);\n    let nodeBuilderState = renderObjectData.nodeBuilderState;\n    if (nodeBuilderState === undefined) {\n      const {\n        nodeBuilderCache\n      } = this;\n      const cacheKey = this.getForRenderCacheKey(renderObject);\n      nodeBuilderState = nodeBuilderCache.get(cacheKey);\n      if (nodeBuilderState === undefined) {\n        const nodeBuilder = this.backend.createNodeBuilder(renderObject.object, this.renderer, renderObject.scene);\n        nodeBuilder.material = renderObject.material;\n        nodeBuilder.context.material = renderObject.material;\n        nodeBuilder.lightsNode = renderObject.lightsNode;\n        nodeBuilder.environmentNode = this.getEnvironmentNode(renderObject.scene);\n        nodeBuilder.fogNode = this.getFogNode(renderObject.scene);\n        nodeBuilder.toneMappingNode = this.getToneMappingNode();\n        nodeBuilder.build();\n        nodeBuilderState = this._createNodeBuilderState(nodeBuilder);\n        nodeBuilderCache.set(cacheKey, nodeBuilderState);\n      }\n      nodeBuilderState.usedTimes++;\n      renderObjectData.nodeBuilderState = nodeBuilderState;\n    }\n    return nodeBuilderState;\n  }\n  delete(object) {\n    if (object.isRenderObject) {\n      const nodeBuilderState = this.get(object).nodeBuilderState;\n      nodeBuilderState.usedTimes--;\n      if (nodeBuilderState.usedTimes === 0) {\n        this.nodeBuilderCache.delete(this.getForRenderCacheKey(object));\n      }\n    }\n    return super.delete(object);\n  }\n  getForCompute(computeNode) {\n    const computeData = this.get(computeNode);\n    let nodeBuilderState = computeData.nodeBuilderState;\n    if (nodeBuilderState === undefined) {\n      const nodeBuilder = this.backend.createNodeBuilder(computeNode, this.renderer);\n      nodeBuilder.build();\n      nodeBuilderState = this._createNodeBuilderState(nodeBuilder);\n      computeData.nodeBuilderState = nodeBuilder;\n    }\n    return nodeBuilderState;\n  }\n  _createNodeBuilderState(nodeBuilder) {\n    return new NodeBuilderState(nodeBuilder.vertexShader, nodeBuilder.fragmentShader, nodeBuilder.computeShader, nodeBuilder.getAttributesArray(), nodeBuilder.getBindings(), nodeBuilder.updateNodes, nodeBuilder.updateBeforeNodes);\n  }\n  getEnvironmentNode(scene) {\n    return scene.environmentNode || this.get(scene).environmentNode || null;\n  }\n  getBackgroundNode(scene) {\n    return scene.backgroundNode || this.get(scene).backgroundNode || null;\n  }\n  getFogNode(scene) {\n    return scene.fogNode || this.get(scene).fogNode || null;\n  }\n  getToneMappingNode() {\n    if (this.isToneMappingState === false) return null;\n    return this.renderer.toneMappingNode || this.get(this.renderer).toneMappingNode || null;\n  }\n  getCacheKey(scene, lightsNode) {\n    const environmentNode = this.getEnvironmentNode(scene);\n    const fogNode = this.getFogNode(scene);\n    const toneMappingNode = this.getToneMappingNode();\n    const cacheKey = [];\n    if (lightsNode) cacheKey.push('lightsNode:' + lightsNode.getCacheKey());\n    if (environmentNode) cacheKey.push('environmentNode:' + environmentNode.getCacheKey());\n    if (fogNode) cacheKey.push('fogNode:' + fogNode.getCacheKey());\n    if (toneMappingNode) cacheKey.push('toneMappingNode:' + toneMappingNode.getCacheKey());\n    return '{' + cacheKey.join(',') + '}';\n  }\n  updateScene(scene) {\n    this.updateEnvironment(scene);\n    this.updateFog(scene);\n    this.updateBackground(scene);\n    this.updateToneMapping();\n  }\n  get isToneMappingState() {\n    const renderer = this.renderer;\n    const renderTarget = renderer.getRenderTarget();\n    return renderTarget && renderTarget.isCubeRenderTarget ? false : true;\n  }\n  updateToneMapping() {\n    const renderer = this.renderer;\n    const rendererData = this.get(renderer);\n    const rendererToneMapping = renderer.toneMapping;\n    if (this.isToneMappingState && rendererToneMapping !== NoToneMapping) {\n      if (rendererData.toneMapping !== rendererToneMapping) {\n        const rendererToneMappingNode = rendererData.rendererToneMappingNode || toneMapping(rendererToneMapping, reference('toneMappingExposure', 'float', renderer));\n        rendererToneMappingNode.toneMapping = rendererToneMapping;\n        rendererData.rendererToneMappingNode = rendererToneMappingNode;\n        rendererData.toneMappingNode = rendererToneMappingNode;\n        rendererData.toneMapping = rendererToneMapping;\n      }\n    } else {\n      // Don't delete rendererData.rendererToneMappingNode\n      delete rendererData.toneMappingNode;\n      delete rendererData.toneMapping;\n    }\n  }\n  updateBackground(scene) {\n    const sceneData = this.get(scene);\n    const background = scene.background;\n    if (background) {\n      if (sceneData.background !== background) {\n        let backgroundNode = null;\n        if (background.isCubeTexture === true) {\n          backgroundNode = cubeTexture(background, normalWorld);\n        } else if (background.isTexture === true) {\n          let nodeUV = null;\n          if (background.mapping === EquirectangularReflectionMapping || background.mapping === EquirectangularRefractionMapping) {\n            nodeUV = equirectUV();\n          } else {\n            nodeUV = viewportBottomLeft;\n          }\n          backgroundNode = texture(background, nodeUV).setUpdateMatrix(true);\n        } else if (background.isColor !== true) {\n          console.error('WebGPUNodes: Unsupported background configuration.', background);\n        }\n        sceneData.backgroundNode = backgroundNode;\n        sceneData.background = background;\n      }\n    } else if (sceneData.backgroundNode) {\n      delete sceneData.backgroundNode;\n      delete sceneData.background;\n    }\n  }\n  updateFog(scene) {\n    const sceneData = this.get(scene);\n    const fog = scene.fog;\n    if (fog) {\n      if (sceneData.fog !== fog) {\n        let fogNode = null;\n        if (fog.isFogExp2) {\n          fogNode = densityFog(reference('color', 'color', fog), reference('density', 'float', fog));\n        } else if (fog.isFog) {\n          fogNode = rangeFog(reference('color', 'color', fog), reference('near', 'float', fog), reference('far', 'float', fog));\n        } else {\n          console.error('WebGPUNodes: Unsupported fog configuration.', fog);\n        }\n        sceneData.fogNode = fogNode;\n        sceneData.fog = fog;\n      }\n    } else {\n      delete sceneData.fogNode;\n      delete sceneData.fog;\n    }\n  }\n  updateEnvironment(scene) {\n    const sceneData = this.get(scene);\n    const environment = scene.environment;\n    if (environment) {\n      if (sceneData.environment !== environment) {\n        let environmentNode = null;\n        if (environment.isCubeTexture === true) {\n          environmentNode = cubeTexture(environment);\n        } else if (environment.isTexture === true) {\n          environmentNode = texture(environment);\n        } else {\n          console.error('Nodes: Unsupported environment configuration.', environment);\n        }\n        sceneData.environmentNode = environmentNode;\n        sceneData.environment = environment;\n      }\n    } else if (sceneData.environmentNode) {\n      delete sceneData.environmentNode;\n      delete sceneData.environment;\n    }\n  }\n  getNodeFrame(renderObject) {\n    const nodeFrame = this.nodeFrame;\n    nodeFrame.scene = renderObject.scene;\n    nodeFrame.object = renderObject.object;\n    nodeFrame.camera = renderObject.camera;\n    nodeFrame.renderer = renderObject.renderer;\n    nodeFrame.material = renderObject.material;\n    return nodeFrame;\n  }\n  updateBefore(renderObject) {\n    const nodeFrame = this.getNodeFrame(renderObject);\n    const nodeBuilder = renderObject.getNodeBuilderState();\n    for (const node of nodeBuilder.updateBeforeNodes) {\n      nodeFrame.updateBeforeNode(node);\n    }\n  }\n  updateForCompute( /*computeNode*/) {}\n  updateForRender(renderObject) {\n    const nodeFrame = this.getNodeFrame(renderObject);\n    const nodeBuilder = renderObject.getNodeBuilderState();\n    for (const node of nodeBuilder.updateNodes) {\n      nodeFrame.updateNode(node);\n    }\n  }\n  dispose() {\n    super.dispose();\n    this.nodeFrame = new NodeFrame();\n    this.nodeBuilderCache = new Map();\n  }\n}\nexport default Nodes;","map":{"version":3,"names":["DataMap","NodeBuilderState","NoToneMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","NodeFrame","cubeTexture","texture","rangeFog","densityFog","reference","toneMapping","equirectUV","viewportBottomLeft","normalWorld","Nodes","constructor","renderer","backend","nodeFrame","nodeBuilderCache","Map","getForRenderCacheKey","renderObject","initialCacheKey","getForRender","renderObjectData","get","nodeBuilderState","undefined","cacheKey","nodeBuilder","createNodeBuilder","object","scene","material","context","lightsNode","environmentNode","getEnvironmentNode","fogNode","getFogNode","toneMappingNode","getToneMappingNode","build","_createNodeBuilderState","set","usedTimes","delete","isRenderObject","getForCompute","computeNode","computeData","vertexShader","fragmentShader","computeShader","getAttributesArray","getBindings","updateNodes","updateBeforeNodes","getBackgroundNode","backgroundNode","isToneMappingState","getCacheKey","push","join","updateScene","updateEnvironment","updateFog","updateBackground","updateToneMapping","renderTarget","getRenderTarget","isCubeRenderTarget","rendererData","rendererToneMapping","rendererToneMappingNode","sceneData","background","isCubeTexture","isTexture","nodeUV","mapping","setUpdateMatrix","isColor","console","error","fog","isFogExp2","isFog","environment","getNodeFrame","camera","updateBefore","getNodeBuilderState","node","updateBeforeNode","updateForCompute","updateForRender","updateNode","dispose"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/renderers/common/nodes/Nodes.js"],"sourcesContent":["import DataMap from '../DataMap.js';\nimport NodeBuilderState from './NodeBuilderState.js';\nimport { NoToneMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping } from 'three';\nimport { NodeFrame, cubeTexture, texture, rangeFog, densityFog, reference, toneMapping, equirectUV, viewportBottomLeft, normalWorld } from '../../../nodes/Nodes.js';\n\nclass Nodes extends DataMap {\n\n\tconstructor( renderer, backend ) {\n\n\t\tsuper();\n\n\t\tthis.renderer = renderer;\n\t\tthis.backend = backend;\n\t\tthis.nodeFrame = new NodeFrame();\n\t\tthis.nodeBuilderCache = new Map();\n\n\t}\n\n\tgetForRenderCacheKey( renderObject ) {\n\n\t\treturn renderObject.initialCacheKey;\n\n\t}\n\n\tgetForRender( renderObject ) {\n\n\t\tconst renderObjectData = this.get( renderObject );\n\n\t\tlet nodeBuilderState = renderObjectData.nodeBuilderState;\n\n\t\tif ( nodeBuilderState === undefined ) {\n\n\t\t\tconst { nodeBuilderCache } = this;\n\n\t\t\tconst cacheKey = this.getForRenderCacheKey( renderObject );\n\n\t\t\tnodeBuilderState = nodeBuilderCache.get( cacheKey );\n\n\t\t\tif ( nodeBuilderState === undefined ) {\n\n\t\t\t\tconst nodeBuilder = this.backend.createNodeBuilder( renderObject.object, this.renderer, renderObject.scene );\n\t\t\t\tnodeBuilder.material = renderObject.material;\n\t\t\t\tnodeBuilder.context.material = renderObject.material;\n\t\t\t\tnodeBuilder.lightsNode = renderObject.lightsNode;\n\t\t\t\tnodeBuilder.environmentNode = this.getEnvironmentNode( renderObject.scene );\n\t\t\t\tnodeBuilder.fogNode = this.getFogNode( renderObject.scene );\n\t\t\t\tnodeBuilder.toneMappingNode = this.getToneMappingNode();\n\t\t\t\tnodeBuilder.build();\n\n\t\t\t\tnodeBuilderState = this._createNodeBuilderState( nodeBuilder );\n\n\t\t\t\tnodeBuilderCache.set( cacheKey, nodeBuilderState );\n\n\t\t\t}\n\n\t\t\tnodeBuilderState.usedTimes ++;\n\n\t\t\trenderObjectData.nodeBuilderState = nodeBuilderState;\n\n\t\t}\n\n\t\treturn nodeBuilderState;\n\n\t}\n\n\tdelete( object ) {\n\n\t\tif ( object.isRenderObject ) {\n\n\t\t\tconst nodeBuilderState = this.get( object ).nodeBuilderState;\n\t\t\tnodeBuilderState.usedTimes --;\n\n\t\t\tif ( nodeBuilderState.usedTimes === 0 ) {\n\n\t\t\t\tthis.nodeBuilderCache.delete( this.getForRenderCacheKey( object ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn super.delete( object );\n\n\t}\n\n\tgetForCompute( computeNode ) {\n\n\t\tconst computeData = this.get( computeNode );\n\n\t\tlet nodeBuilderState = computeData.nodeBuilderState;\n\n\t\tif ( nodeBuilderState === undefined ) {\n\n\t\t\tconst nodeBuilder = this.backend.createNodeBuilder( computeNode, this.renderer );\n\t\t\tnodeBuilder.build();\n\n\t\t\tnodeBuilderState = this._createNodeBuilderState( nodeBuilder );\n\n\t\t\tcomputeData.nodeBuilderState = nodeBuilder;\n\n\t\t}\n\n\t\treturn nodeBuilderState;\n\n\t}\n\n\t_createNodeBuilderState( nodeBuilder ) {\n\n\t\treturn new NodeBuilderState(\n\t\t\tnodeBuilder.vertexShader,\n\t\t\tnodeBuilder.fragmentShader,\n\t\t\tnodeBuilder.computeShader,\n\t\t\tnodeBuilder.getAttributesArray(),\n\t\t\tnodeBuilder.getBindings(),\n\t\t\tnodeBuilder.updateNodes,\n\t\t\tnodeBuilder.updateBeforeNodes\n\t\t);\n\n\t}\n\n\tgetEnvironmentNode( scene ) {\n\n\t\treturn scene.environmentNode || this.get( scene ).environmentNode || null;\n\n\t}\n\n\tgetBackgroundNode( scene ) {\n\n\t\treturn scene.backgroundNode || this.get( scene ).backgroundNode || null;\n\n\t}\n\n\tgetFogNode( scene ) {\n\n\t\treturn scene.fogNode || this.get( scene ).fogNode || null;\n\n\t}\n\n\tgetToneMappingNode() {\n\n\t\tif ( this.isToneMappingState === false ) return null;\n\n\t\treturn this.renderer.toneMappingNode || this.get( this.renderer ).toneMappingNode || null;\n\n\t}\n\n\tgetCacheKey( scene, lightsNode ) {\n\n\t\tconst environmentNode = this.getEnvironmentNode( scene );\n\t\tconst fogNode = this.getFogNode( scene );\n\t\tconst toneMappingNode = this.getToneMappingNode();\n\n\t\tconst cacheKey = [];\n\n\t\tif ( lightsNode ) cacheKey.push( 'lightsNode:' + lightsNode.getCacheKey() );\n\t\tif ( environmentNode ) cacheKey.push( 'environmentNode:' + environmentNode.getCacheKey() );\n\t\tif ( fogNode ) cacheKey.push( 'fogNode:' + fogNode.getCacheKey() );\n\t\tif ( toneMappingNode ) cacheKey.push( 'toneMappingNode:' + toneMappingNode.getCacheKey() );\n\n\t\treturn '{' + cacheKey.join( ',' ) + '}';\n\n\t}\n\n\tupdateScene( scene ) {\n\n\t\tthis.updateEnvironment( scene );\n\t\tthis.updateFog( scene );\n\t\tthis.updateBackground( scene );\n\t\tthis.updateToneMapping();\n\n\t}\n\n\tget isToneMappingState() {\n\n\t\tconst renderer = this.renderer;\n\t\tconst renderTarget = renderer.getRenderTarget();\n\n\t\treturn renderTarget && renderTarget.isCubeRenderTarget ? false : true;\n\n\t}\n\n\tupdateToneMapping() {\n\n\t\tconst renderer = this.renderer;\n\t\tconst rendererData = this.get( renderer );\n\t\tconst rendererToneMapping = renderer.toneMapping;\n\n\t\tif ( this.isToneMappingState && rendererToneMapping !== NoToneMapping ) {\n\n\t\t\tif ( rendererData.toneMapping !== rendererToneMapping ) {\n\n\t\t\t\tconst rendererToneMappingNode = rendererData.rendererToneMappingNode || toneMapping( rendererToneMapping, reference( 'toneMappingExposure', 'float', renderer ) );\n\t\t\t\trendererToneMappingNode.toneMapping = rendererToneMapping;\n\n\t\t\t\trendererData.rendererToneMappingNode = rendererToneMappingNode;\n\t\t\t\trendererData.toneMappingNode = rendererToneMappingNode;\n\t\t\t\trendererData.toneMapping = rendererToneMapping;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Don't delete rendererData.rendererToneMappingNode\n\t\t\tdelete rendererData.toneMappingNode;\n\t\t\tdelete rendererData.toneMapping;\n\n\t\t}\n\n\t}\n\n\tupdateBackground( scene ) {\n\n\t\tconst sceneData = this.get( scene );\n\t\tconst background = scene.background;\n\n\t\tif ( background ) {\n\n\t\t\tif ( sceneData.background !== background ) {\n\n\t\t\t\tlet backgroundNode = null;\n\n\t\t\t\tif ( background.isCubeTexture === true ) {\n\n\t\t\t\t\tbackgroundNode = cubeTexture( background, normalWorld );\n\n\t\t\t\t} else if ( background.isTexture === true ) {\n\n\t\t\t\t\tlet nodeUV = null;\n\n\t\t\t\t\tif ( background.mapping === EquirectangularReflectionMapping || background.mapping === EquirectangularRefractionMapping ) {\n\n\t\t\t\t\t\tnodeUV = equirectUV();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnodeUV = viewportBottomLeft;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbackgroundNode = texture( background, nodeUV ).setUpdateMatrix( true );\n\n\t\t\t\t} else if ( background.isColor !== true ) {\n\n\t\t\t\t\tconsole.error( 'WebGPUNodes: Unsupported background configuration.', background );\n\n\t\t\t\t}\n\n\t\t\t\tsceneData.backgroundNode = backgroundNode;\n\t\t\t\tsceneData.background = background;\n\n\t\t\t}\n\n\t\t} else if ( sceneData.backgroundNode ) {\n\n\t\t\tdelete sceneData.backgroundNode;\n\t\t\tdelete sceneData.background;\n\n\t\t}\n\n\t}\n\n\tupdateFog( scene ) {\n\n\t\tconst sceneData = this.get( scene );\n\t\tconst fog = scene.fog;\n\n\t\tif ( fog ) {\n\n\t\t\tif ( sceneData.fog !== fog ) {\n\n\t\t\t\tlet fogNode = null;\n\n\t\t\t\tif ( fog.isFogExp2 ) {\n\n\t\t\t\t\tfogNode = densityFog( reference( 'color', 'color', fog ), reference( 'density', 'float', fog ) );\n\n\t\t\t\t} else if ( fog.isFog ) {\n\n\t\t\t\t\tfogNode = rangeFog( reference( 'color', 'color', fog ), reference( 'near', 'float', fog ), reference( 'far', 'float', fog ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'WebGPUNodes: Unsupported fog configuration.', fog );\n\n\t\t\t\t}\n\n\t\t\t\tsceneData.fogNode = fogNode;\n\t\t\t\tsceneData.fog = fog;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdelete sceneData.fogNode;\n\t\t\tdelete sceneData.fog;\n\n\t\t}\n\n\t}\n\n\tupdateEnvironment( scene ) {\n\n\t\tconst sceneData = this.get( scene );\n\t\tconst environment = scene.environment;\n\n\t\tif ( environment ) {\n\n\t\t\tif ( sceneData.environment !== environment ) {\n\n\t\t\t\tlet environmentNode = null;\n\n\t\t\t\tif ( environment.isCubeTexture === true ) {\n\n\t\t\t\t\tenvironmentNode = cubeTexture( environment );\n\n\t\t\t\t} else if ( environment.isTexture === true ) {\n\n\t\t\t\t\tenvironmentNode = texture( environment );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'Nodes: Unsupported environment configuration.', environment );\n\n\t\t\t\t}\n\n\t\t\t\tsceneData.environmentNode = environmentNode;\n\t\t\t\tsceneData.environment = environment;\n\n\t\t\t}\n\n\t\t} else if ( sceneData.environmentNode ) {\n\n\t\t\tdelete sceneData.environmentNode;\n\t\t\tdelete sceneData.environment;\n\n\t\t}\n\n\t}\n\n\tgetNodeFrame( renderObject ) {\n\n\t\tconst nodeFrame = this.nodeFrame;\n\t\tnodeFrame.scene = renderObject.scene;\n\t\tnodeFrame.object = renderObject.object;\n\t\tnodeFrame.camera = renderObject.camera;\n\t\tnodeFrame.renderer = renderObject.renderer;\n\t\tnodeFrame.material = renderObject.material;\n\n\t\treturn nodeFrame;\n\n\t}\n\n\tupdateBefore( renderObject ) {\n\n\t\tconst nodeFrame = this.getNodeFrame( renderObject );\n\t\tconst nodeBuilder = renderObject.getNodeBuilderState();\n\n\t\tfor ( const node of nodeBuilder.updateBeforeNodes ) {\n\n\t\t\tnodeFrame.updateBeforeNode( node );\n\n\t\t}\n\n\t}\n\n\tupdateForCompute( /*computeNode*/ ) { }\n\n\tupdateForRender( renderObject ) {\n\n\t\tconst nodeFrame = this.getNodeFrame( renderObject );\n\t\tconst nodeBuilder = renderObject.getNodeBuilderState();\n\n\t\tfor ( const node of nodeBuilder.updateNodes ) {\n\n\t\t\tnodeFrame.updateNode( node );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tsuper.dispose();\n\n\t\tthis.nodeFrame = new NodeFrame();\n\t\tthis.nodeBuilderCache = new Map();\n\n\t}\n\n}\n\nexport default Nodes;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}