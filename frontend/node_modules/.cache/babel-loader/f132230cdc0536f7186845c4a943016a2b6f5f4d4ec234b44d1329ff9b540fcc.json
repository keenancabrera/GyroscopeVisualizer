{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { BlendColorFactor, OneMinusBlendColorFactor } from '../../common/Constants.js';\nimport { GPUFrontFace, GPUCullMode, GPUColorWriteFlags, GPUCompareFunction, GPUBlendFactor, GPUBlendOperation, GPUIndexFormat, GPUStencilOperation } from './WebGPUConstants.js';\nimport { FrontSide, BackSide, DoubleSide, NeverDepth, AlwaysDepth, LessDepth, LessEqualDepth, EqualDepth, GreaterEqualDepth, GreaterDepth, NotEqualDepth, NoBlending, NormalBlending, AdditiveBlending, SubtractiveBlending, MultiplyBlending, CustomBlending, ZeroFactor, OneFactor, SrcColorFactor, OneMinusSrcColorFactor, SrcAlphaFactor, OneMinusSrcAlphaFactor, DstColorFactor, OneMinusDstColorFactor, DstAlphaFactor, OneMinusDstAlphaFactor, SrcAlphaSaturateFactor, AddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation, KeepStencilOp, ZeroStencilOp, ReplaceStencilOp, InvertStencilOp, IncrementStencilOp, DecrementStencilOp, IncrementWrapStencilOp, DecrementWrapStencilOp, NeverStencilFunc, AlwaysStencilFunc, LessStencilFunc, LessEqualStencilFunc, EqualStencilFunc, GreaterEqualStencilFunc, GreaterStencilFunc, NotEqualStencilFunc } from 'three';\nclass WebGPUPipelineUtils {\n  constructor(backend) {\n    this.backend = backend;\n  }\n  createRenderPipeline(renderObject) {\n    const {\n      object,\n      material,\n      geometry,\n      pipeline\n    } = renderObject;\n    const {\n      vertexProgram,\n      fragmentProgram\n    } = pipeline;\n    const backend = this.backend;\n    const device = backend.device;\n    const utils = backend.utils;\n    const pipelineData = backend.get(pipeline);\n    const bindingsData = backend.get(renderObject.getBindings());\n\n    // vertex buffers\n\n    const vertexBuffers = backend.attributeUtils.createShaderVertexBuffers(renderObject);\n\n    // blending\n\n    let blending;\n    if (material.transparent === true && material.blending !== NoBlending) {\n      blending = this._getBlending(material);\n    }\n\n    // stencil\n\n    let stencilFront = {};\n    if (material.stencilWrite === true) {\n      stencilFront = {\n        compare: this._getStencilCompare(material),\n        failOp: this._getStencilOperation(material.stencilFail),\n        depthFailOp: this._getStencilOperation(material.stencilZFail),\n        passOp: this._getStencilOperation(material.stencilZPass)\n      };\n    }\n    const colorWriteMask = this._getColorWriteMask(material);\n    const targets = [];\n    if (renderObject.context.textures !== null) {\n      const textures = renderObject.context.textures;\n      for (let i = 0; i < textures.length; i++) {\n        const colorFormat = utils.getTextureFormatGPU(textures[i]);\n        targets.push({\n          format: colorFormat,\n          blend: blending,\n          writeMask: colorWriteMask\n        });\n      }\n    } else {\n      const colorFormat = utils.getCurrentColorFormat(renderObject.context);\n      targets.push({\n        format: colorFormat,\n        blend: blending,\n        writeMask: colorWriteMask\n      });\n    }\n    const vertexModule = backend.get(vertexProgram).module;\n    const fragmentModule = backend.get(fragmentProgram).module;\n    const primitiveState = this._getPrimitiveState(object, geometry, material);\n    const depthCompare = this._getDepthCompare(material);\n    const depthStencilFormat = utils.getCurrentDepthStencilFormat(renderObject.context);\n    const sampleCount = utils.getSampleCount(renderObject.context);\n    pipelineData.pipeline = device.createRenderPipeline({\n      vertex: Object.assign({}, vertexModule, {\n        buffers: vertexBuffers\n      }),\n      fragment: Object.assign({}, fragmentModule, {\n        targets\n      }),\n      primitive: primitiveState,\n      depthStencil: {\n        format: depthStencilFormat,\n        depthWriteEnabled: material.depthWrite,\n        depthCompare: depthCompare,\n        stencilFront: stencilFront,\n        stencilBack: {},\n        // three.js does not provide an API to configure the back function (gl.stencilFuncSeparate() was never used)\n        stencilReadMask: material.stencilFuncMask,\n        stencilWriteMask: material.stencilWriteMask\n      },\n      multisample: {\n        count: sampleCount,\n        alphaToCoverageEnabled: material.alphaToCoverage\n      },\n      layout: device.createPipelineLayout({\n        bindGroupLayouts: [bindingsData.layout]\n      })\n    });\n  }\n  createComputePipeline(pipeline, bindings) {\n    const backend = this.backend;\n    const device = backend.device;\n    const computeProgram = backend.get(pipeline.computeProgram).module;\n    const pipelineGPU = backend.get(pipeline);\n    const bindingsData = backend.get(bindings);\n    pipelineGPU.pipeline = device.createComputePipeline({\n      compute: computeProgram,\n      layout: device.createPipelineLayout({\n        bindGroupLayouts: [bindingsData.layout]\n      })\n    });\n  }\n  _getBlending(material) {\n    let color, alpha;\n    const blending = material.blending;\n    if (blending === CustomBlending) {\n      const blendSrcAlpha = material.blendSrcAlpha !== null ? material.blendSrcAlpha : GPUBlendFactor.One;\n      const blendDstAlpha = material.blendDstAlpha !== null ? material.blendDstAlpha : GPUBlendFactor.Zero;\n      const blendEquationAlpha = material.blendEquationAlpha !== null ? material.blendEquationAlpha : GPUBlendFactor.Add;\n      color = {\n        srcFactor: this._getBlendFactor(material.blendSrc),\n        dstFactor: this._getBlendFactor(material.blendDst),\n        operation: this._getBlendOperation(material.blendEquation)\n      };\n      alpha = {\n        srcFactor: this._getBlendFactor(blendSrcAlpha),\n        dstFactor: this._getBlendFactor(blendDstAlpha),\n        operation: this._getBlendOperation(blendEquationAlpha)\n      };\n    } else {\n      const premultipliedAlpha = material.premultipliedAlpha;\n      const setBlend = (srcRGB, dstRGB, srcAlpha, dstAlpha) => {\n        color = {\n          srcFactor: srcRGB,\n          dstFactor: dstRGB,\n          operation: GPUBlendOperation.Add\n        };\n        alpha = {\n          srcFactor: srcAlpha,\n          dstFactor: dstAlpha,\n          operation: GPUBlendOperation.Add\n        };\n      };\n      if (premultipliedAlpha) {\n        switch (blending) {\n          case NormalBlending:\n            setBlend(GPUBlendFactor.SrcAlpha, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha);\n            break;\n          case AdditiveBlending:\n            setBlend(GPUBlendFactor.SrcAlpha, GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One);\n            break;\n          case SubtractiveBlending:\n            setBlend(GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One);\n            break;\n          case MultiplyBlending:\n            setBlend(GPUBlendFactor.Zero, GPUBlendFactor.Src, GPUBlendFactor.Zero, GPUBlendFactor.SrcAlpha);\n            break;\n        }\n      } else {\n        switch (blending) {\n          case NormalBlending:\n            setBlend(GPUBlendFactor.SrcAlpha, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha);\n            break;\n          case AdditiveBlending:\n            setBlend(GPUBlendFactor.SrcAlpha, GPUBlendFactor.One, GPUBlendFactor.SrcAlpha, GPUBlendFactor.One);\n            break;\n          case SubtractiveBlending:\n            setBlend(GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One);\n            break;\n          case MultiplyBlending:\n            setBlend(GPUBlendFactor.Zero, GPUBlendFactor.Src, GPUBlendFactor.Zero, GPUBlendFactor.Src);\n            break;\n        }\n      }\n    }\n    if (color !== undefined && alpha !== undefined) {\n      return {\n        color,\n        alpha\n      };\n    } else {\n      console.error('THREE.WebGPURenderer: Invalid blending: ', blending);\n    }\n  }\n  _getBlendFactor(blend) {\n    let blendFactor;\n    switch (blend) {\n      case ZeroFactor:\n        blendFactor = GPUBlendFactor.Zero;\n        break;\n      case OneFactor:\n        blendFactor = GPUBlendFactor.One;\n        break;\n      case SrcColorFactor:\n        blendFactor = GPUBlendFactor.Src;\n        break;\n      case OneMinusSrcColorFactor:\n        blendFactor = GPUBlendFactor.OneMinusSrc;\n        break;\n      case SrcAlphaFactor:\n        blendFactor = GPUBlendFactor.SrcAlpha;\n        break;\n      case OneMinusSrcAlphaFactor:\n        blendFactor = GPUBlendFactor.OneMinusSrcAlpha;\n        break;\n      case DstColorFactor:\n        blendFactor = GPUBlendFactor.Dst;\n        break;\n      case OneMinusDstColorFactor:\n        blendFactor = GPUBlendFactor.OneMinusDstColor;\n        break;\n      case DstAlphaFactor:\n        blendFactor = GPUBlendFactor.DstAlpha;\n        break;\n      case OneMinusDstAlphaFactor:\n        blendFactor = GPUBlendFactor.OneMinusDstAlpha;\n        break;\n      case SrcAlphaSaturateFactor:\n        blendFactor = GPUBlendFactor.SrcAlphaSaturated;\n        break;\n      case BlendColorFactor:\n        blendFactor = GPUBlendFactor.Constant;\n        break;\n      case OneMinusBlendColorFactor:\n        blendFactor = GPUBlendFactor.OneMinusConstant;\n        break;\n      default:\n        console.error('THREE.WebGPURenderer: Blend factor not supported.', blend);\n    }\n    return blendFactor;\n  }\n  _getStencilCompare(material) {\n    let stencilCompare;\n    const stencilFunc = material.stencilFunc;\n    switch (stencilFunc) {\n      case NeverStencilFunc:\n        stencilCompare = GPUCompareFunction.Never;\n        break;\n      case AlwaysStencilFunc:\n        stencilCompare = GPUCompareFunction.Always;\n        break;\n      case LessStencilFunc:\n        stencilCompare = GPUCompareFunction.Less;\n        break;\n      case LessEqualStencilFunc:\n        stencilCompare = GPUCompareFunction.LessEqual;\n        break;\n      case EqualStencilFunc:\n        stencilCompare = GPUCompareFunction.Equal;\n        break;\n      case GreaterEqualStencilFunc:\n        stencilCompare = GPUCompareFunction.GreaterEqual;\n        break;\n      case GreaterStencilFunc:\n        stencilCompare = GPUCompareFunction.Greater;\n        break;\n      case NotEqualStencilFunc:\n        stencilCompare = GPUCompareFunction.NotEqual;\n        break;\n      default:\n        console.error('THREE.WebGPURenderer: Invalid stencil function.', stencilFunc);\n    }\n    return stencilCompare;\n  }\n  _getStencilOperation(op) {\n    let stencilOperation;\n    switch (op) {\n      case KeepStencilOp:\n        stencilOperation = GPUStencilOperation.Keep;\n        break;\n      case ZeroStencilOp:\n        stencilOperation = GPUStencilOperation.Zero;\n        break;\n      case ReplaceStencilOp:\n        stencilOperation = GPUStencilOperation.Replace;\n        break;\n      case InvertStencilOp:\n        stencilOperation = GPUStencilOperation.Invert;\n        break;\n      case IncrementStencilOp:\n        stencilOperation = GPUStencilOperation.IncrementClamp;\n        break;\n      case DecrementStencilOp:\n        stencilOperation = GPUStencilOperation.DecrementClamp;\n        break;\n      case IncrementWrapStencilOp:\n        stencilOperation = GPUStencilOperation.IncrementWrap;\n        break;\n      case DecrementWrapStencilOp:\n        stencilOperation = GPUStencilOperation.DecrementWrap;\n        break;\n      default:\n        console.error('THREE.WebGPURenderer: Invalid stencil operation.', stencilOperation);\n    }\n    return stencilOperation;\n  }\n  _getBlendOperation(blendEquation) {\n    let blendOperation;\n    switch (blendEquation) {\n      case AddEquation:\n        blendOperation = GPUBlendOperation.Add;\n        break;\n      case SubtractEquation:\n        blendOperation = GPUBlendOperation.Subtract;\n        break;\n      case ReverseSubtractEquation:\n        blendOperation = GPUBlendOperation.ReverseSubtract;\n        break;\n      case MinEquation:\n        blendOperation = GPUBlendOperation.Min;\n        break;\n      case MaxEquation:\n        blendOperation = GPUBlendOperation.Max;\n        break;\n      default:\n        console.error('THREE.WebGPUPipelineUtils: Blend equation not supported.', blendEquation);\n    }\n    return blendOperation;\n  }\n  _getPrimitiveState(object, geometry, material) {\n    const descriptor = {};\n    const utils = this.backend.utils;\n    descriptor.topology = utils.getPrimitiveTopology(object, material);\n    if (object.isLine === true && object.isLineSegments !== true) {\n      const count = geometry.index ? geometry.index.count : geometry.attributes.position.count;\n      descriptor.stripIndexFormat = count > 65535 ? GPUIndexFormat.Uint32 : GPUIndexFormat.Uint16; // define data type for primitive restart value\n    }\n\n    switch (material.side) {\n      case FrontSide:\n        descriptor.frontFace = GPUFrontFace.CCW;\n        descriptor.cullMode = GPUCullMode.Back;\n        break;\n      case BackSide:\n        descriptor.frontFace = GPUFrontFace.CCW;\n        descriptor.cullMode = GPUCullMode.Front;\n        break;\n      case DoubleSide:\n        descriptor.frontFace = GPUFrontFace.CCW;\n        descriptor.cullMode = GPUCullMode.None;\n        break;\n      default:\n        console.error('THREE.WebGPUPipelineUtils: Unknown material.side value.', material.side);\n        break;\n    }\n    return descriptor;\n  }\n  _getColorWriteMask(material) {\n    return material.colorWrite === true ? GPUColorWriteFlags.All : GPUColorWriteFlags.None;\n  }\n  _getDepthCompare(material) {\n    let depthCompare;\n    if (material.depthTest === false) {\n      depthCompare = GPUCompareFunction.Always;\n    } else {\n      const depthFunc = material.depthFunc;\n      switch (depthFunc) {\n        case NeverDepth:\n          depthCompare = GPUCompareFunction.Never;\n          break;\n        case AlwaysDepth:\n          depthCompare = GPUCompareFunction.Always;\n          break;\n        case LessDepth:\n          depthCompare = GPUCompareFunction.Less;\n          break;\n        case LessEqualDepth:\n          depthCompare = GPUCompareFunction.LessEqual;\n          break;\n        case EqualDepth:\n          depthCompare = GPUCompareFunction.Equal;\n          break;\n        case GreaterEqualDepth:\n          depthCompare = GPUCompareFunction.GreaterEqual;\n          break;\n        case GreaterDepth:\n          depthCompare = GPUCompareFunction.Greater;\n          break;\n        case NotEqualDepth:\n          depthCompare = GPUCompareFunction.NotEqual;\n          break;\n        default:\n          console.error('THREE.WebGPUPipelineUtils: Invalid depth function.', depthFunc);\n      }\n    }\n    return depthCompare;\n  }\n}\nexport default WebGPUPipelineUtils;","map":{"version":3,"names":["BlendColorFactor","OneMinusBlendColorFactor","GPUFrontFace","GPUCullMode","GPUColorWriteFlags","GPUCompareFunction","GPUBlendFactor","GPUBlendOperation","GPUIndexFormat","GPUStencilOperation","FrontSide","BackSide","DoubleSide","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstColorFactor","OneMinusDstColorFactor","DstAlphaFactor","OneMinusDstAlphaFactor","SrcAlphaSaturateFactor","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","KeepStencilOp","ZeroStencilOp","ReplaceStencilOp","InvertStencilOp","IncrementStencilOp","DecrementStencilOp","IncrementWrapStencilOp","DecrementWrapStencilOp","NeverStencilFunc","AlwaysStencilFunc","LessStencilFunc","LessEqualStencilFunc","EqualStencilFunc","GreaterEqualStencilFunc","GreaterStencilFunc","NotEqualStencilFunc","WebGPUPipelineUtils","constructor","backend","createRenderPipeline","renderObject","object","material","geometry","pipeline","vertexProgram","fragmentProgram","device","utils","pipelineData","get","bindingsData","getBindings","vertexBuffers","attributeUtils","createShaderVertexBuffers","blending","transparent","_getBlending","stencilFront","stencilWrite","compare","_getStencilCompare","failOp","_getStencilOperation","stencilFail","depthFailOp","stencilZFail","passOp","stencilZPass","colorWriteMask","_getColorWriteMask","targets","context","textures","i","length","colorFormat","getTextureFormatGPU","push","format","blend","writeMask","getCurrentColorFormat","vertexModule","module","fragmentModule","primitiveState","_getPrimitiveState","depthCompare","_getDepthCompare","depthStencilFormat","getCurrentDepthStencilFormat","sampleCount","getSampleCount","vertex","Object","assign","buffers","fragment","primitive","depthStencil","depthWriteEnabled","depthWrite","stencilBack","stencilReadMask","stencilFuncMask","stencilWriteMask","multisample","count","alphaToCoverageEnabled","alphaToCoverage","layout","createPipelineLayout","bindGroupLayouts","createComputePipeline","bindings","computeProgram","pipelineGPU","compute","color","alpha","blendSrcAlpha","One","blendDstAlpha","Zero","blendEquationAlpha","Add","srcFactor","_getBlendFactor","blendSrc","dstFactor","blendDst","operation","_getBlendOperation","blendEquation","premultipliedAlpha","setBlend","srcRGB","dstRGB","srcAlpha","dstAlpha","SrcAlpha","OneMinusSrcAlpha","OneMinusSrc","Src","undefined","console","error","blendFactor","Dst","OneMinusDstColor","DstAlpha","OneMinusDstAlpha","SrcAlphaSaturated","Constant","OneMinusConstant","stencilCompare","stencilFunc","Never","Always","Less","LessEqual","Equal","GreaterEqual","Greater","NotEqual","op","stencilOperation","Keep","Replace","Invert","IncrementClamp","DecrementClamp","IncrementWrap","DecrementWrap","blendOperation","Subtract","ReverseSubtract","Min","Max","descriptor","topology","getPrimitiveTopology","isLine","isLineSegments","index","attributes","position","stripIndexFormat","Uint32","Uint16","side","frontFace","CCW","cullMode","Back","Front","None","colorWrite","All","depthTest","depthFunc"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/renderers/webgpu/utils/WebGPUPipelineUtils.js"],"sourcesContent":["import { BlendColorFactor, OneMinusBlendColorFactor, } from '../../common/Constants.js';\n\nimport {\n\tGPUFrontFace, GPUCullMode, GPUColorWriteFlags, GPUCompareFunction, GPUBlendFactor, GPUBlendOperation, GPUIndexFormat, GPUStencilOperation\n} from './WebGPUConstants.js';\n\nimport {\n\tFrontSide, BackSide, DoubleSide,\n\tNeverDepth, AlwaysDepth, LessDepth, LessEqualDepth, EqualDepth, GreaterEqualDepth, GreaterDepth, NotEqualDepth,\n\tNoBlending, NormalBlending, AdditiveBlending, SubtractiveBlending, MultiplyBlending, CustomBlending,\n\tZeroFactor, OneFactor, SrcColorFactor, OneMinusSrcColorFactor, SrcAlphaFactor, OneMinusSrcAlphaFactor, DstColorFactor,\n\tOneMinusDstColorFactor, DstAlphaFactor, OneMinusDstAlphaFactor, SrcAlphaSaturateFactor,\n\tAddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation,\n\tKeepStencilOp, ZeroStencilOp, ReplaceStencilOp, InvertStencilOp, IncrementStencilOp, DecrementStencilOp, IncrementWrapStencilOp, DecrementWrapStencilOp,\n\tNeverStencilFunc, AlwaysStencilFunc, LessStencilFunc, LessEqualStencilFunc, EqualStencilFunc, GreaterEqualStencilFunc, GreaterStencilFunc, NotEqualStencilFunc\n} from 'three';\n\nclass WebGPUPipelineUtils {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t}\n\n\tcreateRenderPipeline( renderObject ) {\n\n\t\tconst { object, material, geometry, pipeline } = renderObject;\n\t\tconst { vertexProgram, fragmentProgram } = pipeline;\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\t\tconst utils = backend.utils;\n\n\t\tconst pipelineData = backend.get( pipeline );\n\t\tconst bindingsData = backend.get( renderObject.getBindings() );\n\n\t\t// vertex buffers\n\n\t\tconst vertexBuffers = backend.attributeUtils.createShaderVertexBuffers( renderObject );\n\n\t\t// blending\n\n\t\tlet blending;\n\n\t\tif ( material.transparent === true && material.blending !== NoBlending ) {\n\n\t\t\tblending = this._getBlending( material );\n\n\t\t}\n\n\t\t// stencil\n\n\t\tlet stencilFront = {};\n\n\t\tif ( material.stencilWrite === true ) {\n\n\t\t\tstencilFront = {\n\t\t\t\tcompare: this._getStencilCompare( material ),\n\t\t\t\tfailOp: this._getStencilOperation( material.stencilFail ),\n\t\t\t\tdepthFailOp: this._getStencilOperation( material.stencilZFail ),\n\t\t\t\tpassOp: this._getStencilOperation( material.stencilZPass )\n\t\t\t};\n\n\t\t}\n\n\t\tconst colorWriteMask = this._getColorWriteMask( material );\n\n\t\tconst targets = [];\n\n\t\tif ( renderObject.context.textures !== null ) {\n\n\t\t\tconst textures = renderObject.context.textures;\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst colorFormat = utils.getTextureFormatGPU( textures[ i ] );\n\n\t\t\t\ttargets.push( {\n\t\t\t\t\tformat: colorFormat,\n\t\t\t\t\tblend: blending,\n\t\t\t\t\twriteMask: colorWriteMask\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst colorFormat = utils.getCurrentColorFormat( renderObject.context );\n\n\t\t\ttargets.push( {\n\t\t\t\tformat: colorFormat,\n\t\t\t\tblend: blending,\n\t\t\t\twriteMask: colorWriteMask\n\t\t\t} );\n\n\t\t}\n\n\t\tconst vertexModule = backend.get( vertexProgram ).module;\n\t\tconst fragmentModule = backend.get( fragmentProgram ).module;\n\n\t\tconst primitiveState = this._getPrimitiveState( object, geometry, material );\n\t\tconst depthCompare = this._getDepthCompare( material );\n\t\tconst depthStencilFormat = utils.getCurrentDepthStencilFormat( renderObject.context );\n\t\tconst sampleCount = utils.getSampleCount( renderObject.context );\n\n\t\tpipelineData.pipeline = device.createRenderPipeline( {\n\t\t\tvertex: Object.assign( {}, vertexModule, { buffers: vertexBuffers } ),\n\t\t\tfragment: Object.assign( {}, fragmentModule, { targets } ),\n\t\t\tprimitive: primitiveState,\n\t\t\tdepthStencil: {\n\t\t\t\tformat: depthStencilFormat,\n\t\t\t\tdepthWriteEnabled: material.depthWrite,\n\t\t\t\tdepthCompare: depthCompare,\n\t\t\t\tstencilFront: stencilFront,\n\t\t\t\tstencilBack: {}, // three.js does not provide an API to configure the back function (gl.stencilFuncSeparate() was never used)\n\t\t\t\tstencilReadMask: material.stencilFuncMask,\n\t\t\t\tstencilWriteMask: material.stencilWriteMask\n\t\t\t},\n\t\t\tmultisample: {\n\t\t\t\tcount: sampleCount,\n\t\t\t\talphaToCoverageEnabled: material.alphaToCoverage\n\t\t\t},\n\t\t\tlayout: device.createPipelineLayout( {\n\t\t\t\tbindGroupLayouts: [ bindingsData.layout ]\n\t\t\t} )\n\t\t} );\n\n\t}\n\n\tcreateComputePipeline( pipeline, bindings ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst computeProgram = backend.get( pipeline.computeProgram ).module;\n\n\t\tconst pipelineGPU = backend.get( pipeline );\n\t\tconst bindingsData = backend.get( bindings );\n\n\t\tpipelineGPU.pipeline = device.createComputePipeline( {\n\t\t\tcompute: computeProgram,\n\t\t\tlayout: device.createPipelineLayout( {\n\t\t\t\tbindGroupLayouts: [ bindingsData.layout ]\n\t\t\t} )\n\t\t} );\n\n\t}\n\n\t_getBlending( material ) {\n\n\t\tlet color, alpha;\n\n\t\tconst blending = material.blending;\n\n\t\tif ( blending === CustomBlending ) {\n\n\t\t\tconst blendSrcAlpha = material.blendSrcAlpha !== null ? material.blendSrcAlpha : GPUBlendFactor.One;\n\t\t\tconst blendDstAlpha = material.blendDstAlpha !== null ? material.blendDstAlpha : GPUBlendFactor.Zero;\n\t\t\tconst blendEquationAlpha = material.blendEquationAlpha !== null ? material.blendEquationAlpha : GPUBlendFactor.Add;\n\n\t\t\tcolor = {\n\t\t\t\tsrcFactor: this._getBlendFactor( material.blendSrc ),\n\t\t\t\tdstFactor: this._getBlendFactor( material.blendDst ),\n\t\t\t\toperation: this._getBlendOperation( material.blendEquation )\n\t\t\t};\n\n\t\t\talpha = {\n\t\t\t\tsrcFactor: this._getBlendFactor( blendSrcAlpha ),\n\t\t\t\tdstFactor: this._getBlendFactor( blendDstAlpha ),\n\t\t\t\toperation: this._getBlendOperation( blendEquationAlpha )\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconst premultipliedAlpha = material.premultipliedAlpha;\n\n\t\t\tconst setBlend = ( srcRGB, dstRGB, srcAlpha, dstAlpha ) => {\n\n\t\t\t\tcolor = {\n\t\t\t\t\tsrcFactor: srcRGB,\n\t\t\t\t\tdstFactor: dstRGB,\n\t\t\t\t\toperation: GPUBlendOperation.Add\n\t\t\t\t};\n\n\t\t\t\talpha = {\n\t\t\t\t\tsrcFactor: srcAlpha,\n\t\t\t\t\tdstFactor: dstAlpha,\n\t\t\t\t\toperation: GPUBlendOperation.Add\n\t\t\t\t};\n\n\t\t\t};\n\n\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.SrcAlpha, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.SrcAlpha, GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.Zero, GPUBlendFactor.Src, GPUBlendFactor.Zero, GPUBlendFactor.SrcAlpha );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.SrcAlpha, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.SrcAlpha, GPUBlendFactor.One, GPUBlendFactor.SrcAlpha, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.Zero, GPUBlendFactor.Src, GPUBlendFactor.Zero, GPUBlendFactor.Src );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( color !== undefined && alpha !== undefined ) {\n\n\t\t\treturn { color, alpha };\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid blending: ', blending );\n\n\t\t}\n\n\t}\n\n\t_getBlendFactor( blend ) {\n\n\t\tlet blendFactor;\n\n\t\tswitch ( blend ) {\n\n\t\t\tcase ZeroFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Zero;\n\t\t\t\tbreak;\n\n\t\t\tcase OneFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.One;\n\t\t\t\tbreak;\n\n\t\t\tcase SrcColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Src;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusSrcColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusSrc;\n\t\t\t\tbreak;\n\n\t\t\tcase SrcAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.SrcAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusSrcAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusSrcAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase DstColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Dst;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusDstColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusDstColor;\n\t\t\t\tbreak;\n\n\t\t\tcase DstAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.DstAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusDstAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusDstAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase SrcAlphaSaturateFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.SrcAlphaSaturated;\n\t\t\t\tbreak;\n\n\t\t\tcase BlendColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Constant;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusBlendColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusConstant;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Blend factor not supported.', blend );\n\n\t\t}\n\n\t\treturn blendFactor;\n\n\t}\n\n\t_getStencilCompare( material ) {\n\n\t\tlet stencilCompare;\n\n\t\tconst stencilFunc = material.stencilFunc;\n\n\t\tswitch ( stencilFunc ) {\n\n\t\t\tcase NeverStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Never;\n\t\t\t\tbreak;\n\n\t\t\tcase AlwaysStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Always;\n\t\t\t\tbreak;\n\n\t\t\tcase LessStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Less;\n\t\t\t\tbreak;\n\n\t\t\tcase LessEqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.LessEqual;\n\t\t\t\tbreak;\n\n\t\t\tcase EqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Equal;\n\t\t\t\tbreak;\n\n\t\t\tcase GreaterEqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.GreaterEqual;\n\t\t\t\tbreak;\n\n\t\t\tcase GreaterStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Greater;\n\t\t\t\tbreak;\n\n\t\t\tcase NotEqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.NotEqual;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid stencil function.', stencilFunc );\n\n\t\t}\n\n\t\treturn stencilCompare;\n\n\t}\n\n\t_getStencilOperation( op ) {\n\n\t\tlet stencilOperation;\n\n\t\tswitch ( op ) {\n\n\t\t\tcase KeepStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Keep;\n\t\t\t\tbreak;\n\n\t\t\tcase ZeroStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Zero;\n\t\t\t\tbreak;\n\n\t\t\tcase ReplaceStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Replace;\n\t\t\t\tbreak;\n\n\t\t\tcase InvertStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Invert;\n\t\t\t\tbreak;\n\n\t\t\tcase IncrementStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.IncrementClamp;\n\t\t\t\tbreak;\n\n\t\t\tcase DecrementStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.DecrementClamp;\n\t\t\t\tbreak;\n\n\t\t\tcase IncrementWrapStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.IncrementWrap;\n\t\t\t\tbreak;\n\n\t\t\tcase DecrementWrapStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.DecrementWrap;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid stencil operation.', stencilOperation );\n\n\t\t}\n\n\t\treturn stencilOperation;\n\n\t}\n\n\t_getBlendOperation( blendEquation ) {\n\n\t\tlet blendOperation;\n\n\t\tswitch ( blendEquation ) {\n\n\t\t\tcase AddEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Add;\n\t\t\t\tbreak;\n\n\t\t\tcase SubtractEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Subtract;\n\t\t\t\tbreak;\n\n\t\t\tcase ReverseSubtractEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.ReverseSubtract;\n\t\t\t\tbreak;\n\n\t\t\tcase MinEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Min;\n\t\t\t\tbreak;\n\n\t\t\tcase MaxEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Max;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPUPipelineUtils: Blend equation not supported.', blendEquation );\n\n\t\t}\n\n\t\treturn blendOperation;\n\n\t}\n\n\t_getPrimitiveState( object, geometry, material ) {\n\n\t\tconst descriptor = {};\n\t\tconst utils = this.backend.utils;\n\n\t\tdescriptor.topology = utils.getPrimitiveTopology( object, material );\n\n\t\tif ( object.isLine === true && object.isLineSegments !== true ) {\n\n\t\t\tconst count = ( geometry.index ) ? geometry.index.count : geometry.attributes.position.count;\n\t\t\tdescriptor.stripIndexFormat = ( count > 65535 ) ? GPUIndexFormat.Uint32 : GPUIndexFormat.Uint16; // define data type for primitive restart value\n\n\t\t}\n\n\t\tswitch ( material.side ) {\n\n\t\t\tcase FrontSide:\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CCW;\n\t\t\t\tdescriptor.cullMode = GPUCullMode.Back;\n\t\t\t\tbreak;\n\n\t\t\tcase BackSide:\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CCW;\n\t\t\t\tdescriptor.cullMode = GPUCullMode.Front;\n\t\t\t\tbreak;\n\n\t\t\tcase DoubleSide:\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CCW;\n\t\t\t\tdescriptor.cullMode = GPUCullMode.None;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPUPipelineUtils: Unknown material.side value.', material.side );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\treturn descriptor;\n\n\t}\n\n\t_getColorWriteMask( material ) {\n\n\t\treturn ( material.colorWrite === true ) ? GPUColorWriteFlags.All : GPUColorWriteFlags.None;\n\n\t}\n\n\t_getDepthCompare( material ) {\n\n\t\tlet depthCompare;\n\n\t\tif ( material.depthTest === false ) {\n\n\t\t\tdepthCompare = GPUCompareFunction.Always;\n\n\t\t} else {\n\n\t\t\tconst depthFunc = material.depthFunc;\n\n\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\tcase NeverDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Never;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AlwaysDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Always;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LessDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Less;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LessEqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.LessEqual;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Equal;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase GreaterEqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.GreaterEqual;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase GreaterDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Greater;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NotEqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.NotEqual;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.WebGPUPipelineUtils: Invalid depth function.', depthFunc );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn depthCompare;\n\n\t}\n\n}\n\nexport default WebGPUPipelineUtils;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}