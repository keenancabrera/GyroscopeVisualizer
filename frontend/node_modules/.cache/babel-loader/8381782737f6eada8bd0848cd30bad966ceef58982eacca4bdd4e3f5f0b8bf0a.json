{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { attribute } from '../core/AttributeNode.js';\nimport { varying } from '../core/VaryingNode.js';\nimport { property } from '../core/PropertyNode.js';\nimport { normalize } from '../math/MathNode.js';\nimport { cameraViewMatrix } from './CameraNode.js';\nimport { modelNormalMatrix } from './ModelNode.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\nclass NormalNode extends Node {\n  constructor(scope = NormalNode.LOCAL) {\n    super('vec3');\n    this.scope = scope;\n  }\n  isGlobal() {\n    return true;\n  }\n  getHash( /*builder*/\n  ) {\n    return `normal-${this.scope}`;\n  }\n  generate(builder) {\n    const scope = this.scope;\n    let outputNode = null;\n    if (scope === NormalNode.GEOMETRY) {\n      outputNode = attribute('normal', 'vec3');\n    } else if (scope === NormalNode.LOCAL) {\n      outputNode = varying(normalGeometry);\n    } else if (scope === NormalNode.VIEW) {\n      const vertexNode = modelNormalMatrix.mul(normalLocal);\n      outputNode = normalize(varying(vertexNode));\n    } else if (scope === NormalNode.WORLD) {\n      // To use inverseTransformDirection only inverse the param order like this: cameraViewMatrix.transformDirection( normalView )\n      const vertexNode = normalView.transformDirection(cameraViewMatrix);\n      outputNode = normalize(varying(vertexNode));\n    }\n    return outputNode.build(builder, this.getNodeType(builder));\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.scope = this.scope;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.scope = data.scope;\n  }\n}\nNormalNode.GEOMETRY = 'geometry';\nNormalNode.LOCAL = 'local';\nNormalNode.VIEW = 'view';\nNormalNode.WORLD = 'world';\nexport default NormalNode;\nexport const normalGeometry = nodeImmutable(NormalNode, NormalNode.GEOMETRY);\nexport const normalLocal = nodeImmutable(NormalNode, NormalNode.LOCAL);\nexport const normalView = nodeImmutable(NormalNode, NormalNode.VIEW);\nexport const normalWorld = nodeImmutable(NormalNode, NormalNode.WORLD);\nexport const transformedNormalView = property('vec3', 'TransformedNormalView');\nexport const transformedNormalWorld = transformedNormalView.transformDirection(cameraViewMatrix).normalize();\nexport const transformedClearcoatNormalView = property('vec3', 'TransformedClearcoatNormalView');\naddNodeClass('NormalNode', NormalNode);","map":{"version":3,"names":["Node","addNodeClass","attribute","varying","property","normalize","cameraViewMatrix","modelNormalMatrix","nodeImmutable","NormalNode","constructor","scope","LOCAL","isGlobal","getHash","generate","builder","outputNode","GEOMETRY","normalGeometry","VIEW","vertexNode","mul","normalLocal","WORLD","normalView","transformDirection","build","getNodeType","serialize","data","deserialize","normalWorld","transformedNormalView","transformedNormalWorld","transformedClearcoatNormalView"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/nodes/accessors/NormalNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { attribute } from '../core/AttributeNode.js';\nimport { varying } from '../core/VaryingNode.js';\nimport { property } from '../core/PropertyNode.js';\nimport { normalize } from '../math/MathNode.js';\nimport { cameraViewMatrix } from './CameraNode.js';\nimport { modelNormalMatrix } from './ModelNode.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\n\nclass NormalNode extends Node {\n\n\tconstructor( scope = NormalNode.LOCAL ) {\n\n\t\tsuper( 'vec3' );\n\n\t\tthis.scope = scope;\n\n\t}\n\n\tisGlobal() {\n\n\t\treturn true;\n\n\t}\n\n\tgetHash( /*builder*/ ) {\n\n\t\treturn `normal-${this.scope}`;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst scope = this.scope;\n\n\t\tlet outputNode = null;\n\n\t\tif ( scope === NormalNode.GEOMETRY ) {\n\n\t\t\toutputNode = attribute( 'normal', 'vec3' );\n\n\t\t} else if ( scope === NormalNode.LOCAL ) {\n\n\t\t\toutputNode = varying( normalGeometry );\n\n\t\t} else if ( scope === NormalNode.VIEW ) {\n\n\t\t\tconst vertexNode = modelNormalMatrix.mul( normalLocal );\n\t\t\toutputNode = normalize( varying( vertexNode ) );\n\n\t\t} else if ( scope === NormalNode.WORLD ) {\n\n\t\t\t// To use inverseTransformDirection only inverse the param order like this: cameraViewMatrix.transformDirection( normalView )\n\t\t\tconst vertexNode = normalView.transformDirection( cameraViewMatrix );\n\t\t\toutputNode = normalize( varying( vertexNode ) );\n\n\t\t}\n\n\t\treturn outputNode.build( builder, this.getNodeType( builder ) );\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.scope = this.scope;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.scope = data.scope;\n\n\t}\n\n}\n\nNormalNode.GEOMETRY = 'geometry';\nNormalNode.LOCAL = 'local';\nNormalNode.VIEW = 'view';\nNormalNode.WORLD = 'world';\n\nexport default NormalNode;\n\nexport const normalGeometry = nodeImmutable( NormalNode, NormalNode.GEOMETRY );\nexport const normalLocal = nodeImmutable( NormalNode, NormalNode.LOCAL );\nexport const normalView = nodeImmutable( NormalNode, NormalNode.VIEW );\nexport const normalWorld = nodeImmutable( NormalNode, NormalNode.WORLD );\nexport const transformedNormalView = property( 'vec3', 'TransformedNormalView' );\nexport const transformedNormalWorld = transformedNormalView.transformDirection( cameraViewMatrix ).normalize();\nexport const transformedClearcoatNormalView = property( 'vec3', 'TransformedClearcoatNormalView' );\n\naddNodeClass( 'NormalNode', NormalNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}