{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { expression } from '../code/ExpressionNode.js';\nimport { bypass } from '../core/BypassNode.js';\nimport { context } from '../core/ContextNode.js';\nimport { addNodeElement, nodeObject, nodeArray } from '../shadernode/ShaderNode.js';\nclass LoopNode extends Node {\n  constructor(params = []) {\n    super();\n    this.params = params;\n  }\n  getVarName(index) {\n    return String.fromCharCode('i'.charCodeAt() + index);\n  }\n  getProperties(builder) {\n    const properties = builder.getNodeProperties(this);\n    if (properties.stackNode !== undefined) return properties;\n\n    //\n\n    const inputs = {};\n    for (let i = 0, l = this.params.length - 1; i < l; i++) {\n      const prop = this.getVarName(i);\n      inputs[prop] = expression(prop, 'int');\n    }\n    properties.returnsNode = this.params[this.params.length - 1](inputs, builder.addStack(), builder);\n    properties.stackNode = builder.removeStack();\n    return properties;\n  }\n  getNodeType(builder) {\n    const {\n      returnsNode\n    } = this.getProperties(builder);\n    return returnsNode ? returnsNode.getNodeType(builder) : 'void';\n  }\n  setup(builder) {\n    // setup properties\n\n    this.getProperties(builder);\n  }\n  generate(builder) {\n    const properties = this.getProperties(builder);\n    const contextData = {\n      tempWrite: false\n    };\n    const params = this.params;\n    const stackNode = properties.stackNode;\n    for (let i = 0, l = params.length - 1; i < l; i++) {\n      const param = params[i];\n      const property = this.getVarName(i);\n      let start = null,\n        end = null,\n        direction = null;\n      if (param.isNode) {\n        start = '0';\n        end = param.build(builder, 'int');\n        direction = 'forward';\n      } else {\n        start = param.start;\n        end = param.end;\n        direction = param.direction;\n        if (typeof start === 'number') start = start.toString();else if (start && start.isNode) start = start.build(builder, 'int');\n        if (typeof end === 'number') end = end.toString();else if (end && end.isNode) end = end.build(builder, 'int');\n        if (start !== undefined && end === undefined) {\n          start = start + ' - 1';\n          end = '0';\n          direction = 'backwards';\n        } else if (end !== undefined && start === undefined) {\n          start = '0';\n          direction = 'forward';\n        }\n        if (direction === undefined) {\n          if (Number(start) > Number(end)) {\n            direction = 'backwards';\n          } else {\n            direction = 'forward';\n          }\n        }\n      }\n      const internalParam = {\n        start,\n        end,\n        direction\n      };\n\n      //\n\n      const startSnippet = internalParam.start;\n      const endSnippet = internalParam.end;\n      let declarationSnippet = '';\n      let conditionalSnippet = '';\n      let updateSnippet = '';\n      declarationSnippet += builder.getVar('int', property) + ' = ' + startSnippet;\n      if (internalParam.direction === 'backwards') {\n        conditionalSnippet += property + ' >= ' + endSnippet;\n        updateSnippet += property + ' --';\n      } else {\n        // forward\n\n        conditionalSnippet += property + ' < ' + endSnippet;\n        updateSnippet += property + ' ++';\n      }\n      const forSnippet = `for ( ${declarationSnippet}; ${conditionalSnippet}; ${updateSnippet} )`;\n      builder.addFlowCode((i === 0 ? '\\n' : '') + builder.tab + forSnippet + ' {\\n\\n').addFlowTab();\n    }\n    const stackSnippet = context(stackNode, contextData).build(builder, 'void');\n    const returnsSnippet = properties.returnsNode ? properties.returnsNode.build(builder) : '';\n    builder.removeFlowTab().addFlowCode('\\n' + builder.tab + stackSnippet);\n    for (let i = 0, l = this.params.length - 1; i < l; i++) {\n      builder.addFlowCode((i === 0 ? '' : builder.tab) + '}\\n\\n').removeFlowTab();\n    }\n    builder.addFlowTab();\n    return returnsSnippet;\n  }\n}\nexport default LoopNode;\nexport const loop = (...params) => nodeObject(new LoopNode(nodeArray(params, 'int')));\naddNodeElement('loop', (returns, ...params) => bypass(returns, loop(...params)));\naddNodeClass('LoopNode', LoopNode);","map":{"version":3,"names":["Node","addNodeClass","expression","bypass","context","addNodeElement","nodeObject","nodeArray","LoopNode","constructor","params","getVarName","index","String","fromCharCode","charCodeAt","getProperties","builder","properties","getNodeProperties","stackNode","undefined","inputs","i","l","length","prop","returnsNode","addStack","removeStack","getNodeType","setup","generate","contextData","tempWrite","param","property","start","end","direction","isNode","build","toString","Number","internalParam","startSnippet","endSnippet","declarationSnippet","conditionalSnippet","updateSnippet","getVar","forSnippet","addFlowCode","tab","addFlowTab","stackSnippet","returnsSnippet","removeFlowTab","loop","returns"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/nodes/utils/LoopNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { expression } from '../code/ExpressionNode.js';\nimport { bypass } from '../core/BypassNode.js';\nimport { context } from '../core/ContextNode.js';\nimport { addNodeElement, nodeObject, nodeArray } from '../shadernode/ShaderNode.js';\n\nclass LoopNode extends Node {\n\n\tconstructor( params = [] ) {\n\n\t\tsuper();\n\n\t\tthis.params = params;\n\n\t}\n\n\tgetVarName( index ) {\n\n\t\treturn String.fromCharCode( 'i'.charCodeAt() + index );\n\n\t}\n\n\tgetProperties( builder ) {\n\n\t\tconst properties = builder.getNodeProperties( this );\n\n\t\tif ( properties.stackNode !== undefined ) return properties;\n\n\t\t//\n\n\t\tconst inputs = {};\n\n\t\tfor ( let i = 0, l = this.params.length - 1; i < l; i ++ ) {\n\n\t\t\tconst prop = this.getVarName( i );\n\n\t\t\tinputs[ prop ] = expression( prop, 'int' );\n\n\t\t}\n\n\t\tproperties.returnsNode = this.params[ this.params.length - 1 ]( inputs, builder.addStack(), builder );\n\t\tproperties.stackNode = builder.removeStack();\n\n\t\treturn properties;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tconst { returnsNode } = this.getProperties( builder );\n\n\t\treturn returnsNode ? returnsNode.getNodeType( builder ) : 'void';\n\n\t}\n\n\tsetup( builder ) {\n\n\t\t// setup properties\n\n\t\tthis.getProperties( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst properties = this.getProperties( builder );\n\n\t\tconst contextData = { tempWrite: false };\n\n\t\tconst params = this.params;\n\t\tconst stackNode = properties.stackNode;\n\n\t\tfor ( let i = 0, l = params.length - 1; i < l; i ++ ) {\n\n\t\t\tconst param = params[ i ];\n\t\t\tconst property = this.getVarName( i );\n\n\t\t\tlet start = null, end = null, direction = null;\n\n\t\t\tif ( param.isNode ) {\n\n\t\t\t\tstart = '0';\n\t\t\t\tend = param.build( builder, 'int' );\n\t\t\t\tdirection = 'forward';\n\n\t\t\t} else {\n\n\t\t\t\tstart = param.start;\n\t\t\t\tend = param.end;\n\t\t\t\tdirection = param.direction;\n\n\t\t\t\tif ( typeof start === 'number' ) start = start.toString();\n\t\t\t\telse if ( start && start.isNode ) start = start.build( builder, 'int' );\n\n\t\t\t\tif ( typeof end === 'number' ) end = end.toString();\n\t\t\t\telse if ( end && end.isNode ) end = end.build( builder, 'int' );\n\n\t\t\t\tif ( start !== undefined && end === undefined ) {\n\n\t\t\t\t\tstart = start + ' - 1';\n\t\t\t\t\tend = '0';\n\t\t\t\t\tdirection = 'backwards';\n\n\t\t\t\t} else if ( end !== undefined && start === undefined ) {\n\n\t\t\t\t\tstart = '0';\n\t\t\t\t\tdirection = 'forward';\n\n\t\t\t\t}\n\n\t\t\t\tif ( direction === undefined ) {\n\n\t\t\t\t\tif ( Number( start ) > Number( end ) ) {\n\n\t\t\t\t\t\tdirection = 'backwards';\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdirection = 'forward';\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst internalParam = { start, end, direction };\n\n\t\t\t//\n\n\t\t\tconst startSnippet = internalParam.start;\n\t\t\tconst endSnippet = internalParam.end;\n\n\t\t\tlet declarationSnippet = '';\n\t\t\tlet conditionalSnippet = '';\n\t\t\tlet updateSnippet = '';\n\n\t\t\tdeclarationSnippet += builder.getVar( 'int', property ) + ' = ' + startSnippet;\n\n\t\t\tif ( internalParam.direction === 'backwards' ) {\n\n\t\t\t\tconditionalSnippet += property + ' >= ' + endSnippet;\n\t\t\t\tupdateSnippet += property + ' --';\n\n\t\t\t} else {\n\n\t\t\t\t// forward\n\n\t\t\t\tconditionalSnippet += property + ' < ' + endSnippet;\n\t\t\t\tupdateSnippet += property + ' ++';\n\n\t\t\t}\n\n\t\t\tconst forSnippet = `for ( ${ declarationSnippet }; ${ conditionalSnippet }; ${ updateSnippet } )`;\n\n\t\t\tbuilder.addFlowCode( ( i === 0 ? '\\n' : '' ) + builder.tab + forSnippet + ' {\\n\\n' ).addFlowTab();\n\n\t\t}\n\n\t\tconst stackSnippet = context( stackNode, contextData ).build( builder, 'void' );\n\n\t\tconst returnsSnippet = properties.returnsNode ? properties.returnsNode.build( builder ) : '';\n\n\t\tbuilder.removeFlowTab().addFlowCode( '\\n' + builder.tab + stackSnippet );\n\n\t\tfor ( let i = 0, l = this.params.length - 1; i < l; i ++ ) {\n\n\t\t\tbuilder.addFlowCode( ( i === 0 ? '' : builder.tab ) + '}\\n\\n' ).removeFlowTab();\n\n\t\t}\n\n\t\tbuilder.addFlowTab();\n\n\t\treturn returnsSnippet;\n\n\t}\n\n}\n\nexport default LoopNode;\n\nexport const loop = ( ...params ) => nodeObject( new LoopNode( nodeArray( params, 'int' ) ) );\n\naddNodeElement( 'loop', ( returns, ...params ) => bypass( returns, loop( ...params ) ) );\n\naddNodeClass( 'LoopNode', LoopNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}