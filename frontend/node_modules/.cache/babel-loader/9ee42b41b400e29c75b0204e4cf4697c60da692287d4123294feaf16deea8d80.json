{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { addNodeElement, nodeObject } from '../shadernode/ShaderNode.js';\nclass ComputeNode extends Node {\n  constructor(computeNode, count, workgroupSize = [64]) {\n    super('void');\n    this.isComputeNode = true;\n    this.computeNode = computeNode;\n    this.count = count;\n    this.workgroupSize = workgroupSize;\n    this.dispatchCount = 0;\n    this.version = 1;\n    this.updateType = NodeUpdateType.OBJECT;\n    this.updateDispatchCount();\n  }\n  dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n  set needsUpdate(value) {\n    if (value === true) this.version++;\n  }\n  updateDispatchCount() {\n    const {\n      count,\n      workgroupSize\n    } = this;\n    let size = workgroupSize[0];\n    for (let i = 1; i < workgroupSize.length; i++) size *= workgroupSize[i];\n    this.dispatchCount = Math.ceil(count / size);\n  }\n  onInit() {}\n  update({\n    renderer\n  }) {\n    renderer.compute(this);\n  }\n  generate(builder) {\n    const {\n      shaderStage\n    } = builder;\n    if (shaderStage === 'compute') {\n      const snippet = this.computeNode.build(builder, 'void');\n      if (snippet !== '') {\n        builder.addLineFlowCode(snippet);\n      }\n    }\n  }\n}\nexport default ComputeNode;\nexport const compute = (node, count, workgroupSize) => nodeObject(new ComputeNode(nodeObject(node), count, workgroupSize));\naddNodeElement('compute', compute);\naddNodeClass('ComputeNode', ComputeNode);","map":{"version":3,"names":["Node","addNodeClass","NodeUpdateType","addNodeElement","nodeObject","ComputeNode","constructor","computeNode","count","workgroupSize","isComputeNode","dispatchCount","version","updateType","OBJECT","updateDispatchCount","dispose","dispatchEvent","type","needsUpdate","value","size","i","length","Math","ceil","onInit","update","renderer","compute","generate","builder","shaderStage","snippet","build","addLineFlowCode","node"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/nodes/gpgpu/ComputeNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { addNodeElement, nodeObject } from '../shadernode/ShaderNode.js';\n\nclass ComputeNode extends Node {\n\n\tconstructor( computeNode, count, workgroupSize = [ 64 ] ) {\n\n\t\tsuper( 'void' );\n\n\t\tthis.isComputeNode = true;\n\n\t\tthis.computeNode = computeNode;\n\n\t\tthis.count = count;\n\t\tthis.workgroupSize = workgroupSize;\n\t\tthis.dispatchCount = 0;\n\n\t\tthis.version = 1;\n\t\tthis.updateType = NodeUpdateType.OBJECT;\n\n\t\tthis.updateDispatchCount();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tupdateDispatchCount() {\n\n\t\tconst { count, workgroupSize } = this;\n\n\t\tlet size = workgroupSize[ 0 ];\n\n\t\tfor ( let i = 1; i < workgroupSize.length; i ++ )\n\t\t\tsize *= workgroupSize[ i ];\n\n\t\tthis.dispatchCount = Math.ceil( count / size );\n\n\t}\n\n\tonInit() { }\n\n\tupdate( { renderer } ) {\n\n\t\trenderer.compute( this );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst { shaderStage } = builder;\n\n\t\tif ( shaderStage === 'compute' ) {\n\n\t\t\tconst snippet = this.computeNode.build( builder, 'void' );\n\n\t\t\tif ( snippet !== '' ) {\n\n\t\t\t\tbuilder.addLineFlowCode( snippet );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport default ComputeNode;\n\nexport const compute = ( node, count, workgroupSize ) => nodeObject( new ComputeNode( nodeObject( node ), count, workgroupSize ) );\n\naddNodeElement( 'compute', compute );\n\naddNodeClass( 'ComputeNode', ComputeNode );\n"],"mappings":"AAAA,OAAOA,IAAI,IAAIC,YAAY,QAAQ,iBAAiB;AACpD,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,cAAc,EAAEC,UAAU,QAAQ,6BAA6B;AAExE,MAAMC,WAAW,SAASL,IAAI,CAAC;EAE9BM,WAAWA,CAAEC,WAAW,EAAEC,KAAK,EAAEC,aAAa,GAAG,CAAE,EAAE,CAAE,EAAG;IAEzD,KAAK,CAAE,MAAO,CAAC;IAEf,IAAI,CAACC,aAAa,GAAG,IAAI;IAEzB,IAAI,CAACH,WAAW,GAAGA,WAAW;IAE9B,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACE,aAAa,GAAG,CAAC;IAEtB,IAAI,CAACC,OAAO,GAAG,CAAC;IAChB,IAAI,CAACC,UAAU,GAAGX,cAAc,CAACY,MAAM;IAEvC,IAAI,CAACC,mBAAmB,CAAC,CAAC;EAE3B;EAEAC,OAAOA,CAAA,EAAG;IAET,IAAI,CAACC,aAAa,CAAE;MAAEC,IAAI,EAAE;IAAU,CAAE,CAAC;EAE1C;EAEA,IAAIC,WAAWA,CAAEC,KAAK,EAAG;IAExB,IAAKA,KAAK,KAAK,IAAI,EAAG,IAAI,CAACR,OAAO,EAAG;EAEtC;EAEAG,mBAAmBA,CAAA,EAAG;IAErB,MAAM;MAAEP,KAAK;MAAEC;IAAc,CAAC,GAAG,IAAI;IAErC,IAAIY,IAAI,GAAGZ,aAAa,CAAE,CAAC,CAAE;IAE7B,KAAM,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,aAAa,CAACc,MAAM,EAAED,CAAC,EAAG,EAC9CD,IAAI,IAAIZ,aAAa,CAAEa,CAAC,CAAE;IAE3B,IAAI,CAACX,aAAa,GAAGa,IAAI,CAACC,IAAI,CAAEjB,KAAK,GAAGa,IAAK,CAAC;EAE/C;EAEAK,MAAMA,CAAA,EAAG,CAAE;EAEXC,MAAMA,CAAE;IAAEC;EAAS,CAAC,EAAG;IAEtBA,QAAQ,CAACC,OAAO,CAAE,IAAK,CAAC;EAEzB;EAEAC,QAAQA,CAAEC,OAAO,EAAG;IAEnB,MAAM;MAAEC;IAAY,CAAC,GAAGD,OAAO;IAE/B,IAAKC,WAAW,KAAK,SAAS,EAAG;MAEhC,MAAMC,OAAO,GAAG,IAAI,CAAC1B,WAAW,CAAC2B,KAAK,CAAEH,OAAO,EAAE,MAAO,CAAC;MAEzD,IAAKE,OAAO,KAAK,EAAE,EAAG;QAErBF,OAAO,CAACI,eAAe,CAAEF,OAAQ,CAAC;MAEnC;IAED;EAED;AAED;AAEA,eAAe5B,WAAW;AAE1B,OAAO,MAAMwB,OAAO,GAAGA,CAAEO,IAAI,EAAE5B,KAAK,EAAEC,aAAa,KAAML,UAAU,CAAE,IAAIC,WAAW,CAAED,UAAU,CAAEgC,IAAK,CAAC,EAAE5B,KAAK,EAAEC,aAAc,CAAE,CAAC;AAElIN,cAAc,CAAE,SAAS,EAAE0B,OAAQ,CAAC;AAEpC5B,YAAY,CAAE,aAAa,EAAEI,WAAY,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}