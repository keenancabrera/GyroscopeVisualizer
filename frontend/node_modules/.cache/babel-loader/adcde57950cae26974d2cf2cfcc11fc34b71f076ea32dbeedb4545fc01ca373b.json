{"ast":null,"code":"import { createCamera } from './components/camera.js';\nimport { createCylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\nimport { createRod } from './components/rod.js';\nimport { createRenderer } from './systems/renderer.js';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters;\n    this.state = state;\n    this.solution = {};\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n    renderer = createRenderer();\n    renderer.setSize(container.clientWidth, container.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    container.append(renderer.domElement);\n\n    // Add elements\n    this.cylinder = createCylinder();\n    [this.verticies, this.line] = createRod(this.getCartesian());\n    scene.add(this.cylinder, this.line);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  render() {\n    // used to render a single frame\n    renderer.render(scene, camera);\n  }\n  updateState(state) {\n    this.state = state;\n  }\n  getCartesian() {\n    let x = this.parameters.L.value * Math.cos(this.state.theta) * Math.sin(this.state.phi);\n    let y = this.parameters.L.value * Math.sin(this.state.theta) * Math.sin(this.state.phi);\n    let z = this.parameters.L.value * Math.cos(this.state.phi);\n    return [x, y, z];\n  }\n  updateSolution(solution) {\n    this.solution = solution;\n  }\n}\nexport { gyroscopeAnimation };","map":{"version":3,"names":["createCamera","createCylinder","createScene","createRod","createRenderer","camera","renderer","scene","gyroscopeAnimation","constructor","container","parameters","state","solution","setSize","clientWidth","clientHeight","setPixelRatio","window","devicePixelRatio","append","domElement","cylinder","verticies","line","getCartesian","add","render","updateState","x","L","value","Math","cos","theta","sin","phi","y","z","updateSolution"],"sources":["/Users/cabrera/Documents/PortfolioWebiste/frontend/src/gyroscopeRenderer/gyroscopeAnimation.js"],"sourcesContent":["import { createCamera } from './components/camera.js';\nimport { createCylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\nimport { createRod } from './components/rod.js'\n\nimport { createRenderer } from './systems/renderer.js';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\n\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters\n    this.state = state\n    this.solution = {}\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n\n    renderer = createRenderer();\n    renderer.setSize(container.clientWidth, container.clientHeight)\n    renderer.setPixelRatio(window.devicePixelRatio)\n\n    container.append(renderer.domElement);\n\n    // Add elements\n    this.cylinder = createCylinder();\n    [this.verticies, this.line] = createRod(this.getCartesian())\n\n\n    scene.add(this.cylinder, this.line);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  \n  render() { // used to render a single frame\n    renderer.render(scene, camera);\n  }\n\n  updateState(state){\n    this.state = state\n  }\n\n  getCartesian(){\n    let x = this.parameters.L.value * Math.cos(this.state.theta) * Math.sin(this.state.phi)\n    let y = this.parameters.L.value * Math.sin(this.state.theta) * Math.sin(this.state.phi)\n    let z = this.parameters.L.value * Math.cos(this.state.phi)\n\n    return [x,y,z]\n  }\n\n  updateSolution(solution){\n    this.solution = solution\n  }\n\n}\n\nexport { gyroscopeAnimation };"],"mappings":"AAAA,SAASA,YAAY,QAAQ,wBAAwB;AACrD,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,SAAS,QAAQ,qBAAqB;AAE/C,SAASC,cAAc,QAAQ,uBAAuB;AACtD;;AAEA;AACA;AACA,IAAIC,MAAM;AACV,IAAIC,QAAQ;AACZ,IAAIC,KAAK;AAET,MAAMC,kBAAkB,CAAC;EACvBC,WAAWA,CAACC,SAAS,EAAEC,UAAU,EAAEC,KAAK,EAAE;IACxC,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;;IAElB;IACAR,MAAM,GAAGL,YAAY,CAACU,SAAS,EAAE,IAAI,CAACC,UAAU,CAAC;IACjDJ,KAAK,GAAGL,WAAW,CAAC,CAAC;IAErBI,QAAQ,GAAGF,cAAc,CAAC,CAAC;IAC3BE,QAAQ,CAACQ,OAAO,CAACJ,SAAS,CAACK,WAAW,EAAEL,SAAS,CAACM,YAAY,CAAC;IAC/DV,QAAQ,CAACW,aAAa,CAACC,MAAM,CAACC,gBAAgB,CAAC;IAE/CT,SAAS,CAACU,MAAM,CAACd,QAAQ,CAACe,UAAU,CAAC;;IAErC;IACA,IAAI,CAACC,QAAQ,GAAGrB,cAAc,CAAC,CAAC;IAChC,CAAC,IAAI,CAACsB,SAAS,EAAE,IAAI,CAACC,IAAI,CAAC,GAAGrB,SAAS,CAAC,IAAI,CAACsB,YAAY,CAAC,CAAC,CAAC;IAG5DlB,KAAK,CAACmB,GAAG,CAAC,IAAI,CAACJ,QAAQ,EAAE,IAAI,CAACE,IAAI,CAAC;;IAEnC;EACF;;EAGAG,MAAMA,CAAA,EAAG;IAAE;IACTrB,QAAQ,CAACqB,MAAM,CAACpB,KAAK,EAAEF,MAAM,CAAC;EAChC;EAEAuB,WAAWA,CAAChB,KAAK,EAAC;IAChB,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EAEAa,YAAYA,CAAA,EAAE;IACZ,IAAII,CAAC,GAAG,IAAI,CAAClB,UAAU,CAACmB,CAAC,CAACC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACrB,KAAK,CAACsB,KAAK,CAAC,GAAGF,IAAI,CAACG,GAAG,CAAC,IAAI,CAACvB,KAAK,CAACwB,GAAG,CAAC;IACvF,IAAIC,CAAC,GAAG,IAAI,CAAC1B,UAAU,CAACmB,CAAC,CAACC,KAAK,GAAGC,IAAI,CAACG,GAAG,CAAC,IAAI,CAACvB,KAAK,CAACsB,KAAK,CAAC,GAAGF,IAAI,CAACG,GAAG,CAAC,IAAI,CAACvB,KAAK,CAACwB,GAAG,CAAC;IACvF,IAAIE,CAAC,GAAG,IAAI,CAAC3B,UAAU,CAACmB,CAAC,CAACC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACrB,KAAK,CAACwB,GAAG,CAAC;IAE1D,OAAO,CAACP,CAAC,EAACQ,CAAC,EAACC,CAAC,CAAC;EAChB;EAEAC,cAAcA,CAAC1B,QAAQ,EAAC;IACtB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC1B;AAEF;AAEA,SAASL,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}