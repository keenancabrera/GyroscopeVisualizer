{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { nodeProxy } from '../shadernode/ShaderNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { reference } from './ReferenceNode.js';\nimport { bufferAttribute } from './BufferAttributeNode.js';\nimport { positionLocal } from './PositionNode.js';\nclass MorphNode extends Node {\n  constructor(mesh) {\n    super('void');\n    this.mesh = mesh;\n    this.morphBaseInfluence = uniform(1);\n    this.updateType = NodeUpdateType.OBJECT;\n  }\n  setupAttribute(builder, name, assignNode = positionLocal) {\n    const mesh = this.mesh;\n    const attributes = mesh.geometry.morphAttributes[name];\n    builder.stack.assign(assignNode, assignNode.mul(this.morphBaseInfluence));\n    for (let i = 0; i < attributes.length; i++) {\n      const attribute = attributes[i];\n      const bufferAttrib = bufferAttribute(attribute.array, 'vec3');\n      const influence = reference(i, 'float', mesh.morphTargetInfluences);\n      builder.stack.assign(assignNode, assignNode.add(bufferAttrib.mul(influence)));\n    }\n  }\n  setup(builder) {\n    this.setupAttribute(builder, 'position');\n  }\n  update() {\n    const morphBaseInfluence = this.morphBaseInfluence;\n    if (this.mesh.geometry.morphTargetsRelative) {\n      morphBaseInfluence.value = 1;\n    } else {\n      morphBaseInfluence.value = 1 - this.mesh.morphTargetInfluences.reduce((a, b) => a + b, 0);\n    }\n  }\n}\nexport default MorphNode;\nexport const morph = nodeProxy(MorphNode);\naddNodeClass('MorphNode', MorphNode);","map":{"version":3,"names":["Node","addNodeClass","NodeUpdateType","nodeProxy","uniform","reference","bufferAttribute","positionLocal","MorphNode","constructor","mesh","morphBaseInfluence","updateType","OBJECT","setupAttribute","builder","name","assignNode","attributes","geometry","morphAttributes","stack","assign","mul","i","length","attribute","bufferAttrib","array","influence","morphTargetInfluences","add","setup","update","morphTargetsRelative","value","reduce","a","b","morph"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/nodes/accessors/MorphNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { nodeProxy } from '../shadernode/ShaderNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { reference } from './ReferenceNode.js';\nimport { bufferAttribute } from './BufferAttributeNode.js';\nimport { positionLocal } from './PositionNode.js';\n\nclass MorphNode extends Node {\n\n\tconstructor( mesh ) {\n\n\t\tsuper( 'void' );\n\n\t\tthis.mesh = mesh;\n\t\tthis.morphBaseInfluence = uniform( 1 );\n\n\t\tthis.updateType = NodeUpdateType.OBJECT;\n\n\t}\n\n\tsetupAttribute( builder, name, assignNode = positionLocal ) {\n\n\t\tconst mesh = this.mesh;\n\t\tconst attributes = mesh.geometry.morphAttributes[ name ];\n\n\t\tbuilder.stack.assign( assignNode, assignNode.mul( this.morphBaseInfluence ) );\n\n\t\tfor ( let i = 0; i < attributes.length; i ++ ) {\n\n\t\t\tconst attribute = attributes[ i ];\n\n\t\t\tconst bufferAttrib = bufferAttribute( attribute.array, 'vec3' );\n\t\t\tconst influence = reference( i, 'float', mesh.morphTargetInfluences );\n\n\t\t\tbuilder.stack.assign( assignNode, assignNode.add( bufferAttrib.mul( influence ) ) );\n\n\t\t}\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tthis.setupAttribute( builder, 'position' );\n\n\t}\n\n\tupdate() {\n\n\t\tconst morphBaseInfluence = this.morphBaseInfluence;\n\n\t\tif ( this.mesh.geometry.morphTargetsRelative ) {\n\n\t\t\tmorphBaseInfluence.value = 1;\n\n\t\t} else {\n\n\t\t\tmorphBaseInfluence.value = 1 - this.mesh.morphTargetInfluences.reduce( ( a, b ) => a + b, 0 );\n\n\t\t}\n\n\t}\n\n}\n\nexport default MorphNode;\n\nexport const morph = nodeProxy( MorphNode );\n\naddNodeClass( 'MorphNode', MorphNode );\n"],"mappings":"AAAA,OAAOA,IAAI,IAAIC,YAAY,QAAQ,iBAAiB;AACpD,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,aAAa,QAAQ,mBAAmB;AAEjD,MAAMC,SAAS,SAASR,IAAI,CAAC;EAE5BS,WAAWA,CAAEC,IAAI,EAAG;IAEnB,KAAK,CAAE,MAAO,CAAC;IAEf,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,kBAAkB,GAAGP,OAAO,CAAE,CAAE,CAAC;IAEtC,IAAI,CAACQ,UAAU,GAAGV,cAAc,CAACW,MAAM;EAExC;EAEAC,cAAcA,CAAEC,OAAO,EAAEC,IAAI,EAAEC,UAAU,GAAGV,aAAa,EAAG;IAE3D,MAAMG,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,MAAMQ,UAAU,GAAGR,IAAI,CAACS,QAAQ,CAACC,eAAe,CAAEJ,IAAI,CAAE;IAExDD,OAAO,CAACM,KAAK,CAACC,MAAM,CAAEL,UAAU,EAAEA,UAAU,CAACM,GAAG,CAAE,IAAI,CAACZ,kBAAmB,CAAE,CAAC;IAE7E,KAAM,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,UAAU,CAACO,MAAM,EAAED,CAAC,EAAG,EAAG;MAE9C,MAAME,SAAS,GAAGR,UAAU,CAAEM,CAAC,CAAE;MAEjC,MAAMG,YAAY,GAAGrB,eAAe,CAAEoB,SAAS,CAACE,KAAK,EAAE,MAAO,CAAC;MAC/D,MAAMC,SAAS,GAAGxB,SAAS,CAAEmB,CAAC,EAAE,OAAO,EAAEd,IAAI,CAACoB,qBAAsB,CAAC;MAErEf,OAAO,CAACM,KAAK,CAACC,MAAM,CAAEL,UAAU,EAAEA,UAAU,CAACc,GAAG,CAAEJ,YAAY,CAACJ,GAAG,CAAEM,SAAU,CAAE,CAAE,CAAC;IAEpF;EAED;EAEAG,KAAKA,CAAEjB,OAAO,EAAG;IAEhB,IAAI,CAACD,cAAc,CAAEC,OAAO,EAAE,UAAW,CAAC;EAE3C;EAEAkB,MAAMA,CAAA,EAAG;IAER,MAAMtB,kBAAkB,GAAG,IAAI,CAACA,kBAAkB;IAElD,IAAK,IAAI,CAACD,IAAI,CAACS,QAAQ,CAACe,oBAAoB,EAAG;MAE9CvB,kBAAkB,CAACwB,KAAK,GAAG,CAAC;IAE7B,CAAC,MAAM;MAENxB,kBAAkB,CAACwB,KAAK,GAAG,CAAC,GAAG,IAAI,CAACzB,IAAI,CAACoB,qBAAqB,CAACM,MAAM,CAAE,CAAEC,CAAC,EAAEC,CAAC,KAAMD,CAAC,GAAGC,CAAC,EAAE,CAAE,CAAC;IAE9F;EAED;AAED;AAEA,eAAe9B,SAAS;AAExB,OAAO,MAAM+B,KAAK,GAAGpC,SAAS,CAAEK,SAAU,CAAC;AAE3CP,YAAY,CAAE,WAAW,EAAEO,SAAU,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}