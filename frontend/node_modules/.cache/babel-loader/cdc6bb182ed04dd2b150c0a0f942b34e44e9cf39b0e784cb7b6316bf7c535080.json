{"ast":null,"code":"import * as THREE from 'three';\nimport { gyroscopeAnimation } from '@/gyroscopeRenderer/gyroscopeAnimation';\nexport default {\n  name: 'gyroscopeSimulator',\n  props: {\n    solution: Object,\n    parameters: Object,\n    initialState: Object\n  },\n  watch: {\n    $props: {\n      handler() {\n        this.animate();\n      },\n      deep: true\n    }\n  },\n  data() {\n    return {};\n  },\n  methods: {\n    cylinderPosition(theta, phi) {\n      this.x = this.L * Math.cos(theta) * Math.sin(phi);\n      this.y = this.L * Math.sin(theta) * Math.sin(phi);\n      this.z = this.L * Math.cos(phi);\n    },\n    updateStateVariables(i) {\n      // i is index or solution\n      this.theta = this.solution.theta[i];\n      this.phi = this.solution.phi[i];\n      this.psi = this.solution.psi[i];\n      this.x = this.L * Math.cos(this.theta) * Math.sin(this.phi);\n      this.y = this.L * Math.sin(this.theta) * Math.sin(this.phi);\n      this.z = this.L * Math.cos(this.phi);\n    },\n    animate() {\n      // Initialize the Three.js scene\n      const scene = new THREE.Scene();\n      const camera = new THREE.PerspectiveCamera(75, this.$el.clientWidth / this.$el.clientHeight, 0.1, 1000);\n      camera.up.set(0, 0, 1); // Set up to be z axis\n\n      const renderer = new THREE.WebGLRenderer();\n      renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n      this.$refs.sceneContainer.appendChild(renderer.domElement);\n\n      // Axes Helper\n      // X RED | Y GREEN | Z BLUE |\n      const axesHelper = new THREE.AxesHelper(this.L * 2);\n\n      // Cylinder to the scene\n      const geometryCylinder = new THREE.CylinderGeometry(this.a, this.a, this.h, 32);\n      // const materialCylinder = new THREE.MeshBasicMaterial({ color: \"red\", wireframe: true });\n      // const materialCylinder2 = new THREE.MeshBasicMaterial({ color: \"blue\", wireframe: true });\n\n      const cylinder = new THREE.Mesh(geometryCylinder, [new THREE.MeshPhongMaterial({\n        color: 'blue',\n        shininess: 200\n      }), new THREE.MeshPhongMaterial({\n        color: 'red',\n        shininess: 200\n      })]);\n      cylinder.rotation.set(Math.PI / 2, 0, 0);\n      cylinder.position.set(0, 0, this.L);\n\n      // Rod to the scene\n      const materialLine = new THREE.LineBasicMaterial({\n        color: 'white'\n      });\n      const geometryLine = new THREE.BufferGeometry();\n      const line = new THREE.Line(geometryLine, materialLine);\n\n      // Light\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n      directionalLight.position.z = this.L * 1;\n      scene.add(cylinder, axesHelper, line, directionalLight);\n\n      // const material = new THREE.MeshBasicMaterial( {color: 0xffff00} ); \n      // const cylinder = new THREE.Mesh( geometry, material ); \n      // scene.add(cylinder);\n\n      camera.position.x = this.L * 1.2;\n      camera.position.y = this.L * 1.2;\n      camera.position.z = this.L * 1.2;\n      camera.lookAt(0, 0, 0);\n      // Render loop\n\n      let i = 0;\n      let oldSoln = new THREE.Vector3(0, 0, this.L);\n      const animate = () => {\n        requestAnimationFrame(animate);\n        this.updateStateVariables(i);\n        // this.updateStateVariables(i/5 % 150)\n        cylinder.position.set(this.x, this.y, this.z);\n        // cylinder.rotation.set(Math.PI / 2, this.phi, this.theta)\n\n        this.verticies[3] = this.x * 1.5;\n        this.verticies[4] = this.y * 1.5;\n        this.verticies[5] = this.z * 1.5;\n        geometryLine.setAttribute('position', new THREE.BufferAttribute(this.verticies, 3));\n        let currentSoln = new THREE.Vector3(this.x, this.y, this.z);\n        let angle = oldSoln.angleTo(currentSoln);\n        let difference = currentSoln.clone().add(oldSoln.multiplyScalar(-1));\n        let rotationVector = new THREE.Vector3().crossVectors(difference, oldSoln);\n        cylinder.rotateOnWorldAxis(rotationVector.normalize(), angle);\n        i = i + 1;\n        renderer.render(scene, camera);\n        oldSoln.set(this.x, this.y, this.z);\n      };\n      animate();\n    }\n  },\n  mounted() {\n    this.gyroscopeAnimation = new gyroscopeAnimation(this.$refs.sceneContainer, this.parameters, this.initialState);\n    this.gyroscopeAnimation.render();\n  }\n};","map":{"version":3,"names":["THREE","gyroscopeAnimation","name","props","solution","Object","parameters","initialState","watch","$props","handler","animate","deep","data","methods","cylinderPosition","theta","phi","x","L","Math","cos","sin","y","z","updateStateVariables","i","psi","scene","Scene","camera","PerspectiveCamera","$el","clientWidth","clientHeight","up","set","renderer","WebGLRenderer","setSize","$refs","sceneContainer","appendChild","domElement","axesHelper","AxesHelper","geometryCylinder","CylinderGeometry","a","h","cylinder","Mesh","MeshPhongMaterial","color","shininess","rotation","PI","position","materialLine","LineBasicMaterial","geometryLine","BufferGeometry","line","Line","directionalLight","DirectionalLight","add","lookAt","oldSoln","Vector3","requestAnimationFrame","verticies","setAttribute","BufferAttribute","currentSoln","angle","angleTo","difference","clone","multiplyScalar","rotationVector","crossVectors","rotateOnWorldAxis","normalize","render","mounted"],"sources":["/Users/cabrera/Documents/PortfolioWebiste/frontend/src/components/gyroscopeSimulator.vue"],"sourcesContent":["<template>\n  <div ref=\"sceneContainer\" class=\"scene-container\"></div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport { gyroscopeAnimation } from '@/gyroscopeRenderer/gyroscopeAnimation';\n\nexport default {\n  name: 'gyroscopeSimulator',\n  props: {\n    solution: Object,\n    parameters: Object,\n    initialState: Object\n  },\n  watch: {\n    $props: {\n      handler() {\n        this.animate();\n      },\n      deep: true\n    },\n  },\n  data() {\n    return {\n    }\n  },\n  methods: {\n    cylinderPosition(theta, phi){\n      this.x = this.L * Math.cos(theta) * Math.sin(phi)\n      this.y = this.L * Math.sin(theta) * Math.sin(phi)\n      this.z = this.L * Math.cos(phi)\n    },\n    updateStateVariables(i){ // i is index or solution\n      this.theta = this.solution.theta[i]\n      this.phi = this.solution.phi[i]\n      this.psi = this.solution.psi[i]\n\n      this.x = this.L * Math.cos(this.theta) * Math.sin(this.phi)\n      this.y = this.L * Math.sin(this.theta) * Math.sin(this.phi)\n      this.z = this.L * Math.cos(this.phi)\n    },\n    animate(){\n      // Initialize the Three.js scene\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      this.$el.clientWidth / this.$el.clientHeight,\n      0.1,\n      1000\n    );\n    camera.up.set(0,0,1) // Set up to be z axis\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    this.$refs.sceneContainer.appendChild(renderer.domElement);\n\n    // Axes Helper\n    // X RED | Y GREEN | Z BLUE |\n    const axesHelper = new THREE.AxesHelper(this.L*2)\n\n    // Cylinder to the scene\n    const geometryCylinder = new THREE.CylinderGeometry(this.a, this.a, this.h, 32 ); \n    // const materialCylinder = new THREE.MeshBasicMaterial({ color: \"red\", wireframe: true });\n    // const materialCylinder2 = new THREE.MeshBasicMaterial({ color: \"blue\", wireframe: true });\n\n    const cylinder = new THREE.Mesh(geometryCylinder, [new THREE.MeshPhongMaterial({ color: 'blue', shininess: 200 }),new THREE.MeshPhongMaterial({ color: 'red', shininess: 200 })]);\n    cylinder.rotation.set(Math.PI/2,0,0)\n    cylinder.position.set(0,0,this.L)\n\n    // Rod to the scene\n    const materialLine = new THREE.LineBasicMaterial( { color: 'white' } );\n    const geometryLine = new THREE.BufferGeometry()\n\n    const line = new THREE.Line( geometryLine, materialLine );\n\n    // Light\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1)\n    directionalLight.position.z = this.L*1\n\n\n    scene.add(cylinder, axesHelper, line, directionalLight);\n\n\n    // const material = new THREE.MeshBasicMaterial( {color: 0xffff00} ); \n    // const cylinder = new THREE.Mesh( geometry, material ); \n    // scene.add(cylinder);\n\n    camera.position.x = this.L * 1.2\n    camera.position.y = this.L * 1.2\n    camera.position.z = this.L * 1.2\n    camera.lookAt(0,0,0)\n    // Render loop\n\n    let i = 0\n    let oldSoln = new THREE.Vector3(0,0,this.L)\n    const animate = () => {\n      requestAnimationFrame(animate);\n      \n\n      this.updateStateVariables(i)\n      // this.updateStateVariables(i/5 % 150)\n      cylinder.position.set(this.x, this.y, this.z)\n      // cylinder.rotation.set(Math.PI / 2, this.phi, this.theta)\n\n\n      this.verticies[3] = this.x * 1.5\n      this.verticies[4] = this.y * 1.5\n      this.verticies[5] = this.z * 1.5\n      geometryLine.setAttribute('position', new THREE.BufferAttribute(this.verticies, 3))      \n\n\n      let currentSoln = new THREE.Vector3(this.x, this.y, this.z)\n      let angle = oldSoln.angleTo(currentSoln)\n      let difference = currentSoln.clone().add(oldSoln.multiplyScalar(-1))\n      let rotationVector = new THREE.Vector3().crossVectors(difference, oldSoln)\n\n      cylinder.rotateOnWorldAxis(rotationVector.normalize(), angle)\n\n      i = (i + 1)\n      renderer.render(scene, camera);\n      oldSoln.set(this.x, this.y, this.z)\n    };\n\n    animate();\n    }\n  },\n  mounted() {\n    this.gyroscopeAnimation = new gyroscopeAnimation(this.$refs.sceneContainer, this.parameters, this.initialState)\n    this.gyroscopeAnimation.render()\n  },\n};\n</script>\n\n<style scoped>\n.scene-container {\n  width: 100%;\n  height: 95vh;\n}\n</style>\n"],"mappings":"AAKA,OAAO,KAAKA,KAAI,MAAO,OAAO;AAC9B,SAASC,kBAAiB,QAAS,wCAAwC;AAE3E,eAAe;EACbC,IAAI,EAAE,oBAAoB;EAC1BC,KAAK,EAAE;IACLC,QAAQ,EAAEC,MAAM;IAChBC,UAAU,EAAED,MAAM;IAClBE,YAAY,EAAEF;EAChB,CAAC;EACDG,KAAK,EAAE;IACLC,MAAM,EAAE;MACNC,OAAOA,CAAA,EAAG;QACR,IAAI,CAACC,OAAO,CAAC,CAAC;MAChB,CAAC;MACDC,IAAI,EAAE;IACR;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO,CACP;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,gBAAgBA,CAACC,KAAK,EAAEC,GAAG,EAAC;MAC1B,IAAI,CAACC,CAAA,GAAI,IAAI,CAACC,CAAA,GAAIC,IAAI,CAACC,GAAG,CAACL,KAAK,IAAII,IAAI,CAACE,GAAG,CAACL,GAAG;MAChD,IAAI,CAACM,CAAA,GAAI,IAAI,CAACJ,CAAA,GAAIC,IAAI,CAACE,GAAG,CAACN,KAAK,IAAII,IAAI,CAACE,GAAG,CAACL,GAAG;MAChD,IAAI,CAACO,CAAA,GAAI,IAAI,CAACL,CAAA,GAAIC,IAAI,CAACC,GAAG,CAACJ,GAAG;IAChC,CAAC;IACDQ,oBAAoBA,CAACC,CAAC,EAAC;MAAE;MACvB,IAAI,CAACV,KAAI,GAAI,IAAI,CAACZ,QAAQ,CAACY,KAAK,CAACU,CAAC;MAClC,IAAI,CAACT,GAAE,GAAI,IAAI,CAACb,QAAQ,CAACa,GAAG,CAACS,CAAC;MAC9B,IAAI,CAACC,GAAE,GAAI,IAAI,CAACvB,QAAQ,CAACuB,GAAG,CAACD,CAAC;MAE9B,IAAI,CAACR,CAAA,GAAI,IAAI,CAACC,CAAA,GAAIC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACL,KAAK,IAAII,IAAI,CAACE,GAAG,CAAC,IAAI,CAACL,GAAG;MAC1D,IAAI,CAACM,CAAA,GAAI,IAAI,CAACJ,CAAA,GAAIC,IAAI,CAACE,GAAG,CAAC,IAAI,CAACN,KAAK,IAAII,IAAI,CAACE,GAAG,CAAC,IAAI,CAACL,GAAG;MAC1D,IAAI,CAACO,CAAA,GAAI,IAAI,CAACL,CAAA,GAAIC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACJ,GAAG;IACrC,CAAC;IACDN,OAAOA,CAAA,EAAE;MACP;MACF,MAAMiB,KAAI,GAAI,IAAI5B,KAAK,CAAC6B,KAAK,CAAC,CAAC;MAC/B,MAAMC,MAAK,GAAI,IAAI9B,KAAK,CAAC+B,iBAAiB,CACxC,EAAE,EACF,IAAI,CAACC,GAAG,CAACC,WAAU,GAAI,IAAI,CAACD,GAAG,CAACE,YAAY,EAC5C,GAAG,EACH,IACF,CAAC;MACDJ,MAAM,CAACK,EAAE,CAACC,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,GAAE;;MAErB,MAAMC,QAAO,GAAI,IAAIrC,KAAK,CAACsC,aAAa,CAAC,CAAC;MAC1CD,QAAQ,CAACE,OAAO,CAAC,IAAI,CAACP,GAAG,CAACC,WAAW,EAAE,IAAI,CAACD,GAAG,CAACE,YAAY,CAAC;MAC7D,IAAI,CAACM,KAAK,CAACC,cAAc,CAACC,WAAW,CAACL,QAAQ,CAACM,UAAU,CAAC;;MAE1D;MACA;MACA,MAAMC,UAAS,GAAI,IAAI5C,KAAK,CAAC6C,UAAU,CAAC,IAAI,CAAC1B,CAAC,GAAC,CAAC;;MAEhD;MACA,MAAM2B,gBAAe,GAAI,IAAI9C,KAAK,CAAC+C,gBAAgB,CAAC,IAAI,CAACC,CAAC,EAAE,IAAI,CAACA,CAAC,EAAE,IAAI,CAACC,CAAC,EAAE,EAAG,CAAC;MAChF;MACA;;MAEA,MAAMC,QAAO,GAAI,IAAIlD,KAAK,CAACmD,IAAI,CAACL,gBAAgB,EAAE,CAAC,IAAI9C,KAAK,CAACoD,iBAAiB,CAAC;QAAEC,KAAK,EAAE,MAAM;QAAEC,SAAS,EAAE;MAAI,CAAC,CAAC,EAAC,IAAItD,KAAK,CAACoD,iBAAiB,CAAC;QAAEC,KAAK,EAAE,KAAK;QAAEC,SAAS,EAAE;MAAI,CAAC,CAAC,CAAC,CAAC;MACjLJ,QAAQ,CAACK,QAAQ,CAACnB,GAAG,CAAChB,IAAI,CAACoC,EAAE,GAAC,CAAC,EAAC,CAAC,EAAC,CAAC;MACnCN,QAAQ,CAACO,QAAQ,CAACrB,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAACjB,CAAC;;MAEhC;MACA,MAAMuC,YAAW,GAAI,IAAI1D,KAAK,CAAC2D,iBAAiB,CAAE;QAAEN,KAAK,EAAE;MAAQ,CAAE,CAAC;MACtE,MAAMO,YAAW,GAAI,IAAI5D,KAAK,CAAC6D,cAAc,CAAC;MAE9C,MAAMC,IAAG,GAAI,IAAI9D,KAAK,CAAC+D,IAAI,CAAEH,YAAY,EAAEF,YAAa,CAAC;;MAEzD;MACA,MAAMM,gBAAe,GAAI,IAAIhE,KAAK,CAACiE,gBAAgB,CAAC,QAAQ,EAAE,CAAC;MAC/DD,gBAAgB,CAACP,QAAQ,CAACjC,CAAA,GAAI,IAAI,CAACL,CAAC,GAAC;MAGrCS,KAAK,CAACsC,GAAG,CAAChB,QAAQ,EAAEN,UAAU,EAAEkB,IAAI,EAAEE,gBAAgB,CAAC;;MAGvD;MACA;MACA;;MAEAlC,MAAM,CAAC2B,QAAQ,CAACvC,CAAA,GAAI,IAAI,CAACC,CAAA,GAAI,GAAE;MAC/BW,MAAM,CAAC2B,QAAQ,CAAClC,CAAA,GAAI,IAAI,CAACJ,CAAA,GAAI,GAAE;MAC/BW,MAAM,CAAC2B,QAAQ,CAACjC,CAAA,GAAI,IAAI,CAACL,CAAA,GAAI,GAAE;MAC/BW,MAAM,CAACqC,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC;MACnB;;MAEA,IAAIzC,CAAA,GAAI;MACR,IAAI0C,OAAM,GAAI,IAAIpE,KAAK,CAACqE,OAAO,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAClD,CAAC;MAC1C,MAAMR,OAAM,GAAIA,CAAA,KAAM;QACpB2D,qBAAqB,CAAC3D,OAAO,CAAC;QAG9B,IAAI,CAACc,oBAAoB,CAACC,CAAC;QAC3B;QACAwB,QAAQ,CAACO,QAAQ,CAACrB,GAAG,CAAC,IAAI,CAAClB,CAAC,EAAE,IAAI,CAACK,CAAC,EAAE,IAAI,CAACC,CAAC;QAC5C;;QAGA,IAAI,CAAC+C,SAAS,CAAC,CAAC,IAAI,IAAI,CAACrD,CAAA,GAAI,GAAE;QAC/B,IAAI,CAACqD,SAAS,CAAC,CAAC,IAAI,IAAI,CAAChD,CAAA,GAAI,GAAE;QAC/B,IAAI,CAACgD,SAAS,CAAC,CAAC,IAAI,IAAI,CAAC/C,CAAA,GAAI,GAAE;QAC/BoC,YAAY,CAACY,YAAY,CAAC,UAAU,EAAE,IAAIxE,KAAK,CAACyE,eAAe,CAAC,IAAI,CAACF,SAAS,EAAE,CAAC,CAAC;QAGlF,IAAIG,WAAU,GAAI,IAAI1E,KAAK,CAACqE,OAAO,CAAC,IAAI,CAACnD,CAAC,EAAE,IAAI,CAACK,CAAC,EAAE,IAAI,CAACC,CAAC;QAC1D,IAAImD,KAAI,GAAIP,OAAO,CAACQ,OAAO,CAACF,WAAW;QACvC,IAAIG,UAAS,GAAIH,WAAW,CAACI,KAAK,CAAC,CAAC,CAACZ,GAAG,CAACE,OAAO,CAACW,cAAc,CAAC,CAAC,CAAC,CAAC;QACnE,IAAIC,cAAa,GAAI,IAAIhF,KAAK,CAACqE,OAAO,CAAC,CAAC,CAACY,YAAY,CAACJ,UAAU,EAAET,OAAO;QAEzElB,QAAQ,CAACgC,iBAAiB,CAACF,cAAc,CAACG,SAAS,CAAC,CAAC,EAAER,KAAK;QAE5DjD,CAAA,GAAKA,CAAA,GAAI,CAAC;QACVW,QAAQ,CAAC+C,MAAM,CAACxD,KAAK,EAAEE,MAAM,CAAC;QAC9BsC,OAAO,CAAChC,GAAG,CAAC,IAAI,CAAClB,CAAC,EAAE,IAAI,CAACK,CAAC,EAAE,IAAI,CAACC,CAAC;MACpC,CAAC;MAEDb,OAAO,CAAC,CAAC;IACT;EACF,CAAC;EACD0E,OAAOA,CAAA,EAAG;IACR,IAAI,CAACpF,kBAAiB,GAAI,IAAIA,kBAAkB,CAAC,IAAI,CAACuC,KAAK,CAACC,cAAc,EAAE,IAAI,CAACnC,UAAU,EAAE,IAAI,CAACC,YAAY;IAC9G,IAAI,CAACN,kBAAkB,CAACmF,MAAM,CAAC;EACjC;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}