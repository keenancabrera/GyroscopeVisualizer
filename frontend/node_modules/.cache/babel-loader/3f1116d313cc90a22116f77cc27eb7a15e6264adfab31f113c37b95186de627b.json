{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { reference } from './ReferenceNode.js';\nimport { materialReference } from './MaterialReferenceNode.js';\nimport { nodeImmutable, float } from '../shadernode/ShaderNode.js';\nconst _propertyCache = new Map();\nclass MaterialNode extends Node {\n  constructor(scope) {\n    super();\n    this.scope = scope;\n  }\n  getCache(property, type) {\n    let node = _propertyCache.get(property);\n    if (node === undefined) {\n      node = materialReference(property, type);\n      _propertyCache.set(property, node);\n    }\n    return node;\n  }\n  getFloat(property) {\n    return this.getCache(property, 'float');\n  }\n  getColor(property) {\n    return this.getCache(property, 'color');\n  }\n  getTexture(property) {\n    return this.getCache(property, 'texture');\n  }\n  setup(builder) {\n    const material = builder.context.material;\n    const scope = this.scope;\n    let node = null;\n    if (scope === MaterialNode.ALPHA_TEST || scope === MaterialNode.SHININESS || scope === MaterialNode.REFLECTIVITY || scope === MaterialNode.ROTATION || scope === MaterialNode.IRIDESCENCE || scope === MaterialNode.IRIDESCENCE_IOR) {\n      node = this.getFloat(scope);\n    } else if (scope === MaterialNode.SPECULAR_COLOR) {\n      node = this.getColor('specular');\n    } else if (scope === MaterialNode.COLOR) {\n      const colorNode = this.getColor('color');\n      if (material.map && material.map.isTexture === true) {\n        node = colorNode.mul(this.getTexture('map'));\n      } else {\n        node = colorNode;\n      }\n    } else if (scope === MaterialNode.OPACITY) {\n      const opacityNode = this.getFloat('opacity');\n      if (material.alphaMap && material.alphaMap.isTexture === true) {\n        node = opacityNode.mul(this.getTexture('alphaMap'));\n      } else {\n        node = opacityNode;\n      }\n    } else if (scope === MaterialNode.SPECULAR_STRENGTH) {\n      if (material.specularMap && material.specularMap.isTexture === true) {\n        node = this.getTexture('specularMap').r;\n      } else {\n        node = float(1);\n      }\n    } else if (scope === MaterialNode.ROUGHNESS) {\n      const roughnessNode = this.getFloat('roughness');\n      if (material.roughnessMap && material.roughnessMap.isTexture === true) {\n        node = roughnessNode.mul(this.getTexture('roughnessMap').g);\n      } else {\n        node = roughnessNode;\n      }\n    } else if (scope === MaterialNode.METALNESS) {\n      const metalnessNode = this.getFloat('metalness');\n      if (material.metalnessMap && material.metalnessMap.isTexture === true) {\n        node = metalnessNode.mul(this.getTexture('metalnessMap').b);\n      } else {\n        node = metalnessNode;\n      }\n    } else if (scope === MaterialNode.EMISSIVE) {\n      const emissiveNode = this.getColor('emissive');\n      if (material.emissiveMap && material.emissiveMap.isTexture === true) {\n        node = emissiveNode.mul(this.getTexture('emissiveMap'));\n      } else {\n        node = emissiveNode;\n      }\n    } else if (scope === MaterialNode.CLEARCOAT) {\n      const clearcoatNode = this.getFloat('clearcoat');\n      if (material.clearcoatMap && material.clearcoatMap.isTexture === true) {\n        node = clearcoatNode.mul(this.getTexture('clearcoatMap').r);\n      } else {\n        node = clearcoatNode;\n      }\n    } else if (scope === MaterialNode.CLEARCOAT_ROUGHNESS) {\n      const clearcoatRoughnessNode = this.getFloat('clearcoatRoughness');\n      if (material.clearcoatRoughnessMap && material.clearcoatRoughnessMap.isTexture === true) {\n        node = clearcoatRoughnessNode.mul(this.getTexture('clearcoatRoughnessMap').r);\n      } else {\n        node = clearcoatRoughnessNode;\n      }\n    } else if (scope === MaterialNode.SHEEN) {\n      const sheenNode = this.getColor('sheenColor').mul(this.getFloat('sheen')); // Move this mul() to CPU\n\n      if (material.sheenColorMap && material.sheenColorMap.isTexture === true) {\n        node = sheenNode.mul(this.getTexture('sheenColorMap').rgb);\n      } else {\n        node = sheenNode;\n      }\n    } else if (scope === MaterialNode.SHEEN_ROUGHNESS) {\n      const sheenRoughnessNode = this.getFloat('sheenRoughness');\n      if (material.sheenRoughnessMap && material.sheenRoughnessMap.isTexture === true) {\n        node = sheenRoughnessNode.mul(this.getTexture('sheenRoughnessMap').a);\n      } else {\n        node = sheenRoughnessNode;\n      }\n      node = node.clamp(0.07, 1.0);\n    } else if (scope === MaterialNode.IRIDESCENCE_THICKNESS) {\n      const iridescenceThicknessMaximum = reference(1, 'float', material.iridescenceThicknessRange);\n      if (material.iridescenceThicknessMap) {\n        const iridescenceThicknessMinimum = reference(0, 'float', material.iridescenceThicknessRange);\n        node = iridescenceThicknessMaximum.sub(iridescenceThicknessMinimum).mul(this.getTexture('iridescenceThicknessMap').g).add(iridescenceThicknessMinimum);\n      } else {\n        node = iridescenceThicknessMaximum;\n      }\n    } else {\n      const outputType = this.getNodeType(builder);\n      node = materialReference(scope, outputType);\n    }\n    return node;\n  }\n}\nMaterialNode.ALPHA_TEST = 'alphaTest';\nMaterialNode.COLOR = 'color';\nMaterialNode.OPACITY = 'opacity';\nMaterialNode.SHININESS = 'shininess';\nMaterialNode.SPECULAR = 'specular';\nMaterialNode.SPECULAR_STRENGTH = 'specularStrength';\nMaterialNode.REFLECTIVITY = 'reflectivity';\nMaterialNode.ROUGHNESS = 'roughness';\nMaterialNode.METALNESS = 'metalness';\nMaterialNode.CLEARCOAT = 'clearcoat';\nMaterialNode.CLEARCOAT_ROUGHNESS = 'clearcoatRoughness';\nMaterialNode.EMISSIVE = 'emissive';\nMaterialNode.ROTATION = 'rotation';\nMaterialNode.SHEEN = 'sheen';\nMaterialNode.SHEEN_ROUGHNESS = 'sheenRoughness';\nMaterialNode.IRIDESCENCE = 'iridescence';\nMaterialNode.IRIDESCENCE_IOR = 'iridescenceIOR';\nMaterialNode.IRIDESCENCE_THICKNESS = 'iridescenceThickness';\nexport default MaterialNode;\nexport const materialAlphaTest = nodeImmutable(MaterialNode, MaterialNode.ALPHA_TEST);\nexport const materialColor = nodeImmutable(MaterialNode, MaterialNode.COLOR);\nexport const materialShininess = nodeImmutable(MaterialNode, MaterialNode.SHININESS);\nexport const materialEmissive = nodeImmutable(MaterialNode, MaterialNode.EMISSIVE);\nexport const materialOpacity = nodeImmutable(MaterialNode, MaterialNode.OPACITY);\nexport const materialSpecularColor = nodeImmutable(MaterialNode, MaterialNode.SPECULAR_COLOR);\nexport const materialSpecularStrength = nodeImmutable(MaterialNode, MaterialNode.SPECULAR_STRENGTH);\nexport const materialReflectivity = nodeImmutable(MaterialNode, MaterialNode.REFLECTIVITY);\nexport const materialRoughness = nodeImmutable(MaterialNode, MaterialNode.ROUGHNESS);\nexport const materialMetalness = nodeImmutable(MaterialNode, MaterialNode.METALNESS);\nexport const materialClearcoat = nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT);\nexport const materialClearcoatRoughness = nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT_ROUGHNESS);\nexport const materialRotation = nodeImmutable(MaterialNode, MaterialNode.ROTATION);\nexport const materialSheen = nodeImmutable(MaterialNode, MaterialNode.SHEEN);\nexport const materialSheenRoughness = nodeImmutable(MaterialNode, MaterialNode.SHEEN_ROUGHNESS);\nexport const materialIridescence = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE);\nexport const materialIridescenceIOR = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE_IOR);\nexport const materialIridescenceThickness = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE_THICKNESS);\naddNodeClass('MaterialNode', MaterialNode);","map":{"version":3,"names":["Node","addNodeClass","reference","materialReference","nodeImmutable","float","_propertyCache","Map","MaterialNode","constructor","scope","getCache","property","type","node","get","undefined","set","getFloat","getColor","getTexture","setup","builder","material","context","ALPHA_TEST","SHININESS","REFLECTIVITY","ROTATION","IRIDESCENCE","IRIDESCENCE_IOR","SPECULAR_COLOR","COLOR","colorNode","map","isTexture","mul","OPACITY","opacityNode","alphaMap","SPECULAR_STRENGTH","specularMap","r","ROUGHNESS","roughnessNode","roughnessMap","g","METALNESS","metalnessNode","metalnessMap","b","EMISSIVE","emissiveNode","emissiveMap","CLEARCOAT","clearcoatNode","clearcoatMap","CLEARCOAT_ROUGHNESS","clearcoatRoughnessNode","clearcoatRoughnessMap","SHEEN","sheenNode","sheenColorMap","rgb","SHEEN_ROUGHNESS","sheenRoughnessNode","sheenRoughnessMap","a","clamp","IRIDESCENCE_THICKNESS","iridescenceThicknessMaximum","iridescenceThicknessRange","iridescenceThicknessMap","iridescenceThicknessMinimum","sub","add","outputType","getNodeType","SPECULAR","materialAlphaTest","materialColor","materialShininess","materialEmissive","materialOpacity","materialSpecularColor","materialSpecularStrength","materialReflectivity","materialRoughness","materialMetalness","materialClearcoat","materialClearcoatRoughness","materialRotation","materialSheen","materialSheenRoughness","materialIridescence","materialIridescenceIOR","materialIridescenceThickness"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/nodes/accessors/MaterialNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { reference } from './ReferenceNode.js';\nimport { materialReference } from './MaterialReferenceNode.js';\nimport { nodeImmutable, float } from '../shadernode/ShaderNode.js';\n\nconst _propertyCache = new Map();\n\nclass MaterialNode extends Node {\n\n\tconstructor( scope ) {\n\n\t\tsuper();\n\n\t\tthis.scope = scope;\n\n\t}\n\n\tgetCache( property, type ) {\n\n\t\tlet node = _propertyCache.get( property );\n\n\t\tif ( node === undefined ) {\n\n\t\t\tnode = materialReference( property, type );\n\n\t\t\t_propertyCache.set( property, node );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n\tgetFloat( property ) {\n\n\t\treturn this.getCache( property, 'float' );\n\n\t}\n\n\tgetColor( property ) {\n\n\t\treturn this.getCache( property, 'color' );\n\n\t}\n\n\tgetTexture( property ) {\n\n\t\treturn this.getCache( property, 'texture' );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst material = builder.context.material;\n\t\tconst scope = this.scope;\n\n\t\tlet node = null;\n\n\t\tif ( scope === MaterialNode.ALPHA_TEST || scope === MaterialNode.SHININESS || scope === MaterialNode.REFLECTIVITY || scope === MaterialNode.ROTATION || scope === MaterialNode.IRIDESCENCE || scope === MaterialNode.IRIDESCENCE_IOR ) {\n\n\t\t\tnode = this.getFloat( scope );\n\n\t\t} else if ( scope === MaterialNode.SPECULAR_COLOR ) {\n\n\t\t\tnode = this.getColor( 'specular' );\n\n\t\t} else if ( scope === MaterialNode.COLOR ) {\n\n\t\t\tconst colorNode = this.getColor( 'color' );\n\n\t\t\tif ( material.map && material.map.isTexture === true ) {\n\n\t\t\t\tnode = colorNode.mul( this.getTexture( 'map' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = colorNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.OPACITY ) {\n\n\t\t\tconst opacityNode = this.getFloat( 'opacity' );\n\n\t\t\tif ( material.alphaMap && material.alphaMap.isTexture === true ) {\n\n\t\t\t\tnode = opacityNode.mul( this.getTexture( 'alphaMap' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = opacityNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SPECULAR_STRENGTH ) {\n\n\t\t\tif ( material.specularMap && material.specularMap.isTexture === true ) {\n\n\t\t\t\tnode = this.getTexture( 'specularMap' ).r;\n\n\t\t\t} else {\n\n\t\t\t\tnode = float( 1 );\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.ROUGHNESS ) {\n\n\t\t\tconst roughnessNode = this.getFloat( 'roughness' );\n\n\t\t\tif ( material.roughnessMap && material.roughnessMap.isTexture === true ) {\n\n\t\t\t\tnode = roughnessNode.mul( this.getTexture( 'roughnessMap' ).g );\n\n\t\t\t} else {\n\n\t\t\t\tnode = roughnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.METALNESS ) {\n\n\t\t\tconst metalnessNode = this.getFloat( 'metalness' );\n\n\t\t\tif ( material.metalnessMap && material.metalnessMap.isTexture === true ) {\n\n\t\t\t\tnode = metalnessNode.mul( this.getTexture( 'metalnessMap' ).b );\n\n\t\t\t} else {\n\n\t\t\t\tnode = metalnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.EMISSIVE ) {\n\n\t\t\tconst emissiveNode = this.getColor( 'emissive' );\n\n\t\t\tif ( material.emissiveMap && material.emissiveMap.isTexture === true ) {\n\n\t\t\t\tnode = emissiveNode.mul( this.getTexture( 'emissiveMap' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = emissiveNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.CLEARCOAT ) {\n\n\t\t\tconst clearcoatNode = this.getFloat( 'clearcoat' );\n\n\t\t\tif ( material.clearcoatMap && material.clearcoatMap.isTexture === true ) {\n\n\t\t\t\tnode = clearcoatNode.mul( this.getTexture( 'clearcoatMap' ).r );\n\n\t\t\t} else {\n\n\t\t\t\tnode = clearcoatNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.CLEARCOAT_ROUGHNESS ) {\n\n\t\t\tconst clearcoatRoughnessNode = this.getFloat( 'clearcoatRoughness' );\n\n\t\t\tif ( material.clearcoatRoughnessMap && material.clearcoatRoughnessMap.isTexture === true ) {\n\n\t\t\t\tnode = clearcoatRoughnessNode.mul( this.getTexture( 'clearcoatRoughnessMap' ).r );\n\n\t\t\t} else {\n\n\t\t\t\tnode = clearcoatRoughnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SHEEN ) {\n\n\t\t\tconst sheenNode = this.getColor( 'sheenColor' ).mul( this.getFloat( 'sheen' ) ); // Move this mul() to CPU\n\n\t\t\tif ( material.sheenColorMap && material.sheenColorMap.isTexture === true ) {\n\n\t\t\t\tnode = sheenNode.mul( this.getTexture( 'sheenColorMap' ).rgb );\n\n\t\t\t} else {\n\n\t\t\t\tnode = sheenNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SHEEN_ROUGHNESS ) {\n\n\t\t\tconst sheenRoughnessNode = this.getFloat( 'sheenRoughness' );\n\n\t\t\tif ( material.sheenRoughnessMap && material.sheenRoughnessMap.isTexture === true ) {\n\n\t\t\t\tnode = sheenRoughnessNode.mul( this.getTexture( 'sheenRoughnessMap' ).a );\n\n\t\t\t} else {\n\n\t\t\t\tnode = sheenRoughnessNode;\n\n\t\t\t}\n\n\t\t\tnode = node.clamp( 0.07, 1.0 );\n\n\t\t} else if ( scope === MaterialNode.IRIDESCENCE_THICKNESS ) {\n\n\t\t\tconst iridescenceThicknessMaximum = reference( 1, 'float', material.iridescenceThicknessRange );\n\n\t\t\tif ( material.iridescenceThicknessMap ) {\n\n\t\t\t\tconst iridescenceThicknessMinimum = reference( 0, 'float', material.iridescenceThicknessRange );\n\n\t\t\t\tnode = iridescenceThicknessMaximum.sub( iridescenceThicknessMinimum ).mul( this.getTexture( 'iridescenceThicknessMap' ).g ).add( iridescenceThicknessMinimum );\n\n\t\t\t} else {\n\n\t\t\t\tnode = iridescenceThicknessMaximum;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst outputType = this.getNodeType( builder );\n\n\t\t\tnode = materialReference( scope, outputType );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n}\n\nMaterialNode.ALPHA_TEST = 'alphaTest';\nMaterialNode.COLOR = 'color';\nMaterialNode.OPACITY = 'opacity';\nMaterialNode.SHININESS = 'shininess';\nMaterialNode.SPECULAR = 'specular';\nMaterialNode.SPECULAR_STRENGTH = 'specularStrength';\nMaterialNode.REFLECTIVITY = 'reflectivity';\nMaterialNode.ROUGHNESS = 'roughness';\nMaterialNode.METALNESS = 'metalness';\nMaterialNode.CLEARCOAT = 'clearcoat';\nMaterialNode.CLEARCOAT_ROUGHNESS = 'clearcoatRoughness';\nMaterialNode.EMISSIVE = 'emissive';\nMaterialNode.ROTATION = 'rotation';\nMaterialNode.SHEEN = 'sheen';\nMaterialNode.SHEEN_ROUGHNESS = 'sheenRoughness';\nMaterialNode.IRIDESCENCE = 'iridescence';\nMaterialNode.IRIDESCENCE_IOR = 'iridescenceIOR';\nMaterialNode.IRIDESCENCE_THICKNESS = 'iridescenceThickness';\n\nexport default MaterialNode;\n\nexport const materialAlphaTest = nodeImmutable( MaterialNode, MaterialNode.ALPHA_TEST );\nexport const materialColor = nodeImmutable( MaterialNode, MaterialNode.COLOR );\nexport const materialShininess = nodeImmutable( MaterialNode, MaterialNode.SHININESS );\nexport const materialEmissive = nodeImmutable( MaterialNode, MaterialNode.EMISSIVE );\nexport const materialOpacity = nodeImmutable( MaterialNode, MaterialNode.OPACITY );\nexport const materialSpecularColor = nodeImmutable( MaterialNode, MaterialNode.SPECULAR_COLOR );\nexport const materialSpecularStrength = nodeImmutable( MaterialNode, MaterialNode.SPECULAR_STRENGTH );\nexport const materialReflectivity = nodeImmutable( MaterialNode, MaterialNode.REFLECTIVITY );\nexport const materialRoughness = nodeImmutable( MaterialNode, MaterialNode.ROUGHNESS );\nexport const materialMetalness = nodeImmutable( MaterialNode, MaterialNode.METALNESS );\nexport const materialClearcoat = nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT );\nexport const materialClearcoatRoughness = nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT_ROUGHNESS );\nexport const materialRotation = nodeImmutable( MaterialNode, MaterialNode.ROTATION );\nexport const materialSheen = nodeImmutable( MaterialNode, MaterialNode.SHEEN );\nexport const materialSheenRoughness = nodeImmutable( MaterialNode, MaterialNode.SHEEN_ROUGHNESS );\nexport const materialIridescence = nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE );\nexport const materialIridescenceIOR = nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_IOR );\nexport const materialIridescenceThickness = nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_THICKNESS );\n\naddNodeClass( 'MaterialNode', MaterialNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}