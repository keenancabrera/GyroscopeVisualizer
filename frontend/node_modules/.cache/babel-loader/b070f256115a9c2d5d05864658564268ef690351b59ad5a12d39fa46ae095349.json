{"ast":null,"code":"import AnalyticLightNode from './AnalyticLightNode.js';\nimport { lightTargetDirection } from './LightNode.js';\nimport { addLightNode } from './LightsNode.js';\nimport { getDistanceAttenuation } from './LightUtils.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { smoothstep } from '../math/MathNode.js';\nimport { objectViewPosition } from '../accessors/Object3DNode.js';\nimport { positionView } from '../accessors/PositionNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { SpotLight } from 'three';\nclass SpotLightNode extends AnalyticLightNode {\n  constructor(light = null) {\n    super(light);\n    this.coneCosNode = uniform(0);\n    this.penumbraCosNode = uniform(0);\n    this.cutoffDistanceNode = uniform(0);\n    this.decayExponentNode = uniform(0);\n  }\n  update(frame) {\n    super.update(frame);\n    const {\n      light\n    } = this;\n    this.coneCosNode.value = Math.cos(light.angle);\n    this.penumbraCosNode.value = Math.cos(light.angle * (1 - light.penumbra));\n    this.cutoffDistanceNode.value = light.distance;\n    this.decayExponentNode.value = light.decay;\n  }\n  getSpotAttenuation(angleCosine) {\n    const {\n      coneCosNode,\n      penumbraCosNode\n    } = this;\n    return smoothstep(coneCosNode, penumbraCosNode, angleCosine);\n  }\n  setup(builder) {\n    super.setup(builder);\n    const lightingModel = builder.context.lightingModel;\n    const {\n      colorNode,\n      cutoffDistanceNode,\n      decayExponentNode,\n      light\n    } = this;\n    const lVector = objectViewPosition(light).sub(positionView); // @TODO: Add it into LightNode\n\n    const lightDirection = lVector.normalize();\n    const angleCos = lightDirection.dot(lightTargetDirection(light));\n    const spotAttenuation = this.getSpotAttenuation(angleCos);\n    const lightDistance = lVector.length();\n    const lightAttenuation = getDistanceAttenuation({\n      lightDistance,\n      cutoffDistance: cutoffDistanceNode,\n      decayExponent: decayExponentNode\n    });\n    const lightColor = colorNode.mul(spotAttenuation).mul(lightAttenuation);\n    const reflectedLight = builder.context.reflectedLight;\n    lightingModel.direct({\n      lightDirection,\n      lightColor,\n      reflectedLight\n    });\n  }\n}\nexport default SpotLightNode;\naddNodeClass('SpotLightNode', SpotLightNode);\naddLightNode(SpotLight, SpotLightNode);","map":{"version":3,"names":["AnalyticLightNode","lightTargetDirection","addLightNode","getDistanceAttenuation","uniform","smoothstep","objectViewPosition","positionView","addNodeClass","SpotLight","SpotLightNode","constructor","light","coneCosNode","penumbraCosNode","cutoffDistanceNode","decayExponentNode","update","frame","value","Math","cos","angle","penumbra","distance","decay","getSpotAttenuation","angleCosine","setup","builder","lightingModel","context","colorNode","lVector","sub","lightDirection","normalize","angleCos","dot","spotAttenuation","lightDistance","length","lightAttenuation","cutoffDistance","decayExponent","lightColor","mul","reflectedLight","direct"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/nodes/lighting/SpotLightNode.js"],"sourcesContent":["import AnalyticLightNode from './AnalyticLightNode.js';\nimport { lightTargetDirection } from './LightNode.js';\nimport { addLightNode } from './LightsNode.js';\nimport { getDistanceAttenuation } from './LightUtils.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { smoothstep } from '../math/MathNode.js';\nimport { objectViewPosition } from '../accessors/Object3DNode.js';\nimport { positionView } from '../accessors/PositionNode.js';\nimport { addNodeClass } from '../core/Node.js';\n\nimport { SpotLight } from 'three';\n\nclass SpotLightNode extends AnalyticLightNode {\n\n\tconstructor( light = null ) {\n\n\t\tsuper( light );\n\n\t\tthis.coneCosNode = uniform( 0 );\n\t\tthis.penumbraCosNode = uniform( 0 );\n\n\t\tthis.cutoffDistanceNode = uniform( 0 );\n\t\tthis.decayExponentNode = uniform( 0 );\n\n\t}\n\n\tupdate( frame ) {\n\n\t\tsuper.update( frame );\n\n\t\tconst { light } = this;\n\n\t\tthis.coneCosNode.value = Math.cos( light.angle );\n\t\tthis.penumbraCosNode.value = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\n\t\tthis.cutoffDistanceNode.value = light.distance;\n\t\tthis.decayExponentNode.value = light.decay;\n\n\t}\n\n\tgetSpotAttenuation( angleCosine ) {\n\n\t\tconst { coneCosNode, penumbraCosNode } = this;\n\n\t\treturn smoothstep( coneCosNode, penumbraCosNode, angleCosine );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tsuper.setup( builder );\n\n\t\tconst lightingModel = builder.context.lightingModel;\n\n\t\tconst { colorNode, cutoffDistanceNode, decayExponentNode, light } = this;\n\n\t\tconst lVector = objectViewPosition( light ).sub( positionView ); // @TODO: Add it into LightNode\n\n\t\tconst lightDirection = lVector.normalize();\n\t\tconst angleCos = lightDirection.dot( lightTargetDirection( light ) );\n\t\tconst spotAttenuation = this.getSpotAttenuation( angleCos );\n\n\t\tconst lightDistance = lVector.length();\n\n\t\tconst lightAttenuation = getDistanceAttenuation( {\n\t\t\tlightDistance,\n\t\t\tcutoffDistance: cutoffDistanceNode,\n\t\t\tdecayExponent: decayExponentNode\n\t\t} );\n\n\t\tconst lightColor = colorNode.mul( spotAttenuation ).mul( lightAttenuation );\n\n\t\tconst reflectedLight = builder.context.reflectedLight;\n\n\t\tlightingModel.direct( {\n\t\t\tlightDirection,\n\t\t\tlightColor,\n\t\t\treflectedLight\n\t\t} );\n\n\t}\n\n}\n\nexport default SpotLightNode;\n\naddNodeClass( 'SpotLightNode', SpotLightNode );\n\naddLightNode( SpotLight, SpotLightNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}