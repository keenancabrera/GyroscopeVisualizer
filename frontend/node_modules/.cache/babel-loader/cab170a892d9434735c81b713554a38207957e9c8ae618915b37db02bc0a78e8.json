{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport TempNode from '../core/TempNode.js';\nimport { sub, mul, div } from './OperatorNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { addNodeElement, nodeObject, nodeProxy, float, vec3, vec4 } from '../shadernode/ShaderNode.js';\nclass MathNode extends TempNode {\n  constructor(method, aNode, bNode = null, cNode = null) {\n    super();\n    this.method = method;\n    this.aNode = aNode;\n    this.bNode = bNode;\n    this.cNode = cNode;\n  }\n  getInputType(builder) {\n    const aType = this.aNode.getNodeType(builder);\n    const bType = this.bNode ? this.bNode.getNodeType(builder) : null;\n    const cType = this.cNode ? this.cNode.getNodeType(builder) : null;\n    const aLen = builder.isMatrix(aType) ? 0 : builder.getTypeLength(aType);\n    const bLen = builder.isMatrix(bType) ? 0 : builder.getTypeLength(bType);\n    const cLen = builder.isMatrix(cType) ? 0 : builder.getTypeLength(cType);\n    if (aLen > bLen && aLen > cLen) {\n      return aType;\n    } else if (bLen > cLen) {\n      return bType;\n    } else if (cLen > aLen) {\n      return cType;\n    }\n    return aType;\n  }\n  getNodeType(builder) {\n    const method = this.method;\n    if (method === MathNode.LENGTH || method === MathNode.DISTANCE || method === MathNode.DOT) {\n      return 'float';\n    } else if (method === MathNode.CROSS) {\n      return 'vec3';\n    } else {\n      return this.getInputType(builder);\n    }\n  }\n  generate(builder, output) {\n    const method = this.method;\n    const type = this.getNodeType(builder);\n    const inputType = this.getInputType(builder);\n    const a = this.aNode;\n    const b = this.bNode;\n    const c = this.cNode;\n    const isWebGL = builder.renderer.isWebGLRenderer === true;\n    if (method === MathNode.TRANSFORM_DIRECTION) {\n      // dir can be either a direction vector or a normal vector\n      // upper-left 3x3 of matrix is assumed to be orthogonal\n\n      let tA = a;\n      let tB = b;\n      if (builder.isMatrix(tA.getNodeType(builder))) {\n        tB = vec4(vec3(tB), 0.0);\n      } else {\n        tA = vec4(vec3(tA), 0.0);\n      }\n      const mulNode = mul(tA, tB).xyz;\n      return normalize(mulNode).build(builder, output);\n    } else if (method === MathNode.NEGATE) {\n      return builder.format('( - ' + a.build(builder, inputType) + ' )', type, output);\n    } else if (method === MathNode.ONE_MINUS) {\n      return sub(1.0, a).build(builder, output);\n    } else if (method === MathNode.RECIPROCAL) {\n      return div(1.0, a).build(builder, output);\n    } else if (method === MathNode.DIFFERENCE) {\n      return abs(sub(a, b)).build(builder, output);\n    } else {\n      const params = [];\n      if (method === MathNode.CROSS) {\n        params.push(a.build(builder, type), b.build(builder, type));\n      } else if (method === MathNode.STEP) {\n        params.push(a.build(builder, builder.getTypeLength(a.getNodeType(builder)) === 1 ? 'float' : inputType), b.build(builder, inputType));\n      } else if (isWebGL && (method === MathNode.MIN || method === MathNode.MAX) || method === MathNode.MOD) {\n        params.push(a.build(builder, inputType), b.build(builder, builder.getTypeLength(b.getNodeType(builder)) === 1 ? 'float' : inputType));\n      } else if (method === MathNode.REFRACT) {\n        params.push(a.build(builder, inputType), b.build(builder, inputType), c.build(builder, 'float'));\n      } else if (method === MathNode.MIX) {\n        params.push(a.build(builder, inputType), b.build(builder, inputType), c.build(builder, builder.getTypeLength(c.getNodeType(builder)) === 1 ? 'float' : inputType));\n      } else {\n        params.push(a.build(builder, inputType));\n        if (b !== null) params.push(b.build(builder, inputType));\n        if (c !== null) params.push(c.build(builder, inputType));\n      }\n      return builder.format(`${builder.getMethod(method)}( ${params.join(', ')} )`, type, output);\n    }\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.method = this.method;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.method = data.method;\n  }\n}\n\n// 1 input\n\nMathNode.RADIANS = 'radians';\nMathNode.DEGREES = 'degrees';\nMathNode.EXP = 'exp';\nMathNode.EXP2 = 'exp2';\nMathNode.LOG = 'log';\nMathNode.LOG2 = 'log2';\nMathNode.SQRT = 'sqrt';\nMathNode.INVERSE_SQRT = 'inversesqrt';\nMathNode.FLOOR = 'floor';\nMathNode.CEIL = 'ceil';\nMathNode.NORMALIZE = 'normalize';\nMathNode.FRACT = 'fract';\nMathNode.SIN = 'sin';\nMathNode.COS = 'cos';\nMathNode.TAN = 'tan';\nMathNode.ASIN = 'asin';\nMathNode.ACOS = 'acos';\nMathNode.ATAN = 'atan';\nMathNode.ABS = 'abs';\nMathNode.SIGN = 'sign';\nMathNode.LENGTH = 'length';\nMathNode.NEGATE = 'negate';\nMathNode.ONE_MINUS = 'oneMinus';\nMathNode.DFDX = 'dFdx';\nMathNode.DFDY = 'dFdy';\nMathNode.ROUND = 'round';\nMathNode.RECIPROCAL = 'reciprocal';\nMathNode.TRUNC = 'trunc';\nMathNode.FWIDTH = 'fwidth';\n\n// 2 inputs\n\nMathNode.ATAN2 = 'atan2';\nMathNode.MIN = 'min';\nMathNode.MAX = 'max';\nMathNode.MOD = 'mod';\nMathNode.STEP = 'step';\nMathNode.REFLECT = 'reflect';\nMathNode.DISTANCE = 'distance';\nMathNode.DIFFERENCE = 'difference';\nMathNode.DOT = 'dot';\nMathNode.CROSS = 'cross';\nMathNode.POW = 'pow';\nMathNode.TRANSFORM_DIRECTION = 'transformDirection';\n\n// 3 inputs\n\nMathNode.MIX = 'mix';\nMathNode.CLAMP = 'clamp';\nMathNode.REFRACT = 'refract';\nMathNode.SMOOTHSTEP = 'smoothstep';\nMathNode.FACEFORWARD = 'faceforward';\nexport default MathNode;\nexport const EPSILON = float(1e-6);\nexport const INFINITY = float(1e6);\nexport const radians = nodeProxy(MathNode, MathNode.RADIANS);\nexport const degrees = nodeProxy(MathNode, MathNode.DEGREES);\nexport const exp = nodeProxy(MathNode, MathNode.EXP);\nexport const exp2 = nodeProxy(MathNode, MathNode.EXP2);\nexport const log = nodeProxy(MathNode, MathNode.LOG);\nexport const log2 = nodeProxy(MathNode, MathNode.LOG2);\nexport const sqrt = nodeProxy(MathNode, MathNode.SQRT);\nexport const inverseSqrt = nodeProxy(MathNode, MathNode.INVERSE_SQRT);\nexport const floor = nodeProxy(MathNode, MathNode.FLOOR);\nexport const ceil = nodeProxy(MathNode, MathNode.CEIL);\nexport const normalize = nodeProxy(MathNode, MathNode.NORMALIZE);\nexport const fract = nodeProxy(MathNode, MathNode.FRACT);\nexport const sin = nodeProxy(MathNode, MathNode.SIN);\nexport const cos = nodeProxy(MathNode, MathNode.COS);\nexport const tan = nodeProxy(MathNode, MathNode.TAN);\nexport const asin = nodeProxy(MathNode, MathNode.ASIN);\nexport const acos = nodeProxy(MathNode, MathNode.ACOS);\nexport const atan = nodeProxy(MathNode, MathNode.ATAN);\nexport const abs = nodeProxy(MathNode, MathNode.ABS);\nexport const sign = nodeProxy(MathNode, MathNode.SIGN);\nexport const length = nodeProxy(MathNode, MathNode.LENGTH);\nexport const negate = nodeProxy(MathNode, MathNode.NEGATE);\nexport const oneMinus = nodeProxy(MathNode, MathNode.ONE_MINUS);\nexport const dFdx = nodeProxy(MathNode, MathNode.DFDX);\nexport const dFdy = nodeProxy(MathNode, MathNode.DFDY);\nexport const round = nodeProxy(MathNode, MathNode.ROUND);\nexport const reciprocal = nodeProxy(MathNode, MathNode.RECIPROCAL);\nexport const trunc = nodeProxy(MathNode, MathNode.TRUNC);\nexport const fwidth = nodeProxy(MathNode, MathNode.FWIDTH);\nexport const atan2 = nodeProxy(MathNode, MathNode.ATAN2);\nexport const min = nodeProxy(MathNode, MathNode.MIN);\nexport const max = nodeProxy(MathNode, MathNode.MAX);\nexport const mod = nodeProxy(MathNode, MathNode.MOD);\nexport const step = nodeProxy(MathNode, MathNode.STEP);\nexport const reflect = nodeProxy(MathNode, MathNode.REFLECT);\nexport const distance = nodeProxy(MathNode, MathNode.DISTANCE);\nexport const difference = nodeProxy(MathNode, MathNode.DIFFERENCE);\nexport const dot = nodeProxy(MathNode, MathNode.DOT);\nexport const cross = nodeProxy(MathNode, MathNode.CROSS);\nexport const pow = nodeProxy(MathNode, MathNode.POW);\nexport const pow2 = nodeProxy(MathNode, MathNode.POW, 2);\nexport const pow3 = nodeProxy(MathNode, MathNode.POW, 3);\nexport const pow4 = nodeProxy(MathNode, MathNode.POW, 4);\nexport const transformDirection = nodeProxy(MathNode, MathNode.TRANSFORM_DIRECTION);\nexport const mix = nodeProxy(MathNode, MathNode.MIX);\nexport const clamp = (value, low = 0, high = 1) => nodeObject(new MathNode(MathNode.CLAMP, nodeObject(value), nodeObject(low), nodeObject(high)));\nexport const saturate = value => clamp(value);\nexport const refract = nodeProxy(MathNode, MathNode.REFRACT);\nexport const smoothstep = nodeProxy(MathNode, MathNode.SMOOTHSTEP);\nexport const faceForward = nodeProxy(MathNode, MathNode.FACEFORWARD);\nexport const mixElement = (t, e1, e2) => mix(e1, e2, t);\nexport const smoothstepElement = (x, low, high) => smoothstep(low, high, x);\naddNodeElement('radians', radians);\naddNodeElement('degrees', degrees);\naddNodeElement('exp', exp);\naddNodeElement('exp2', exp2);\naddNodeElement('log', log);\naddNodeElement('log2', log2);\naddNodeElement('sqrt', sqrt);\naddNodeElement('inverseSqrt', inverseSqrt);\naddNodeElement('floor', floor);\naddNodeElement('ceil', ceil);\naddNodeElement('normalize', normalize);\naddNodeElement('fract', fract);\naddNodeElement('sin', sin);\naddNodeElement('cos', cos);\naddNodeElement('tan', tan);\naddNodeElement('asin', asin);\naddNodeElement('acos', acos);\naddNodeElement('atan', atan);\naddNodeElement('abs', abs);\naddNodeElement('sign', sign);\naddNodeElement('length', length);\naddNodeElement('negate', negate);\naddNodeElement('oneMinus', oneMinus);\naddNodeElement('dFdx', dFdx);\naddNodeElement('dFdy', dFdy);\naddNodeElement('round', round);\naddNodeElement('reciprocal', reciprocal);\naddNodeElement('trunc', trunc);\naddNodeElement('fwidth', fwidth);\naddNodeElement('atan2', atan2);\naddNodeElement('min', min);\naddNodeElement('max', max);\naddNodeElement('mod', mod);\naddNodeElement('step', step);\naddNodeElement('reflect', reflect);\naddNodeElement('distance', distance);\naddNodeElement('dot', dot);\naddNodeElement('cross', cross);\naddNodeElement('pow', pow);\naddNodeElement('pow2', pow2);\naddNodeElement('pow3', pow3);\naddNodeElement('pow4', pow4);\naddNodeElement('transformDirection', transformDirection);\naddNodeElement('mix', mixElement);\naddNodeElement('clamp', clamp);\naddNodeElement('refract', refract);\naddNodeElement('smoothstep', smoothstepElement);\naddNodeElement('faceForward', faceForward);\naddNodeElement('difference', difference);\naddNodeElement('saturate', saturate);\naddNodeClass('MathNode', MathNode);","map":{"version":3,"names":["TempNode","sub","mul","div","addNodeClass","addNodeElement","nodeObject","nodeProxy","float","vec3","vec4","MathNode","constructor","method","aNode","bNode","cNode","getInputType","builder","aType","getNodeType","bType","cType","aLen","isMatrix","getTypeLength","bLen","cLen","LENGTH","DISTANCE","DOT","CROSS","generate","output","type","inputType","a","b","c","isWebGL","renderer","isWebGLRenderer","TRANSFORM_DIRECTION","tA","tB","mulNode","xyz","normalize","build","NEGATE","format","ONE_MINUS","RECIPROCAL","DIFFERENCE","abs","params","push","STEP","MIN","MAX","MOD","REFRACT","MIX","getMethod","join","serialize","data","deserialize","RADIANS","DEGREES","EXP","EXP2","LOG","LOG2","SQRT","INVERSE_SQRT","FLOOR","CEIL","NORMALIZE","FRACT","SIN","COS","TAN","ASIN","ACOS","ATAN","ABS","SIGN","DFDX","DFDY","ROUND","TRUNC","FWIDTH","ATAN2","REFLECT","POW","CLAMP","SMOOTHSTEP","FACEFORWARD","EPSILON","INFINITY","radians","degrees","exp","exp2","log","log2","sqrt","inverseSqrt","floor","ceil","fract","sin","cos","tan","asin","acos","atan","sign","length","negate","oneMinus","dFdx","dFdy","round","reciprocal","trunc","fwidth","atan2","min","max","mod","step","reflect","distance","difference","dot","cross","pow","pow2","pow3","pow4","transformDirection","mix","clamp","value","low","high","saturate","refract","smoothstep","faceForward","mixElement","t","e1","e2","smoothstepElement","x"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/nodes/math/MathNode.js"],"sourcesContent":["import TempNode from '../core/TempNode.js';\nimport { sub, mul, div } from './OperatorNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { addNodeElement, nodeObject, nodeProxy, float, vec3, vec4 } from '../shadernode/ShaderNode.js';\n\nclass MathNode extends TempNode {\n\n\tconstructor( method, aNode, bNode = null, cNode = null ) {\n\n\t\tsuper();\n\n\t\tthis.method = method;\n\n\t\tthis.aNode = aNode;\n\t\tthis.bNode = bNode;\n\t\tthis.cNode = cNode;\n\n\t}\n\n\tgetInputType( builder ) {\n\n\t\tconst aType = this.aNode.getNodeType( builder );\n\t\tconst bType = this.bNode ? this.bNode.getNodeType( builder ) : null;\n\t\tconst cType = this.cNode ? this.cNode.getNodeType( builder ) : null;\n\n\t\tconst aLen = builder.isMatrix( aType ) ? 0 : builder.getTypeLength( aType );\n\t\tconst bLen = builder.isMatrix( bType ) ? 0 : builder.getTypeLength( bType );\n\t\tconst cLen = builder.isMatrix( cType ) ? 0 : builder.getTypeLength( cType );\n\n\t\tif ( aLen > bLen && aLen > cLen ) {\n\n\t\t\treturn aType;\n\n\t\t} else if ( bLen > cLen ) {\n\n\t\t\treturn bType;\n\n\t\t} else if ( cLen > aLen ) {\n\n\t\t\treturn cType;\n\n\t\t}\n\n\t\treturn aType;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tconst method = this.method;\n\n\t\tif ( method === MathNode.LENGTH || method === MathNode.DISTANCE || method === MathNode.DOT ) {\n\n\t\t\treturn 'float';\n\n\t\t} else if ( method === MathNode.CROSS ) {\n\n\t\t\treturn 'vec3';\n\n\t\t} else {\n\n\t\t\treturn this.getInputType( builder );\n\n\t\t}\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst method = this.method;\n\n\t\tconst type = this.getNodeType( builder );\n\t\tconst inputType = this.getInputType( builder );\n\n\t\tconst a = this.aNode;\n\t\tconst b = this.bNode;\n\t\tconst c = this.cNode;\n\n\t\tconst isWebGL = builder.renderer.isWebGLRenderer === true;\n\n\t\tif ( method === MathNode.TRANSFORM_DIRECTION ) {\n\n\t\t\t// dir can be either a direction vector or a normal vector\n\t\t\t// upper-left 3x3 of matrix is assumed to be orthogonal\n\n\t\t\tlet tA = a;\n\t\t\tlet tB = b;\n\n\t\t\tif ( builder.isMatrix( tA.getNodeType( builder ) ) ) {\n\n\t\t\t\ttB = vec4( vec3( tB ), 0.0 );\n\n\t\t\t} else {\n\n\t\t\t\ttA = vec4( vec3( tA ), 0.0 );\n\n\t\t\t}\n\n\t\t\tconst mulNode = mul( tA, tB ).xyz;\n\n\t\t\treturn normalize( mulNode ).build( builder, output );\n\n\t\t} else if ( method === MathNode.NEGATE ) {\n\n\t\t\treturn builder.format( '( - ' + a.build( builder, inputType ) + ' )', type, output );\n\n\t\t} else if ( method === MathNode.ONE_MINUS ) {\n\n\t\t\treturn sub( 1.0, a ).build( builder, output );\n\n\t\t} else if ( method === MathNode.RECIPROCAL ) {\n\n\t\t\treturn div( 1.0, a ).build( builder, output );\n\n\t\t} else if ( method === MathNode.DIFFERENCE ) {\n\n\t\t\treturn abs( sub( a, b ) ).build( builder, output );\n\n\t\t} else {\n\n\t\t\tconst params = [];\n\n\t\t\tif ( method === MathNode.CROSS ) {\n\n\t\t\t\tparams.push(\n\t\t\t\t\ta.build( builder, type ),\n\t\t\t\t\tb.build( builder, type )\n\t\t\t\t);\n\n\t\t\t} else if ( method === MathNode.STEP ) {\n\n\t\t\t\tparams.push(\n\t\t\t\t\ta.build( builder, builder.getTypeLength( a.getNodeType( builder ) ) === 1 ? 'float' : inputType ),\n\t\t\t\t\tb.build( builder, inputType )\n\t\t\t\t);\n\n\t\t\t} else if ( ( isWebGL && ( method === MathNode.MIN || method === MathNode.MAX ) ) || method === MathNode.MOD ) {\n\n\t\t\t\tparams.push(\n\t\t\t\t\ta.build( builder, inputType ),\n\t\t\t\t\tb.build( builder, builder.getTypeLength( b.getNodeType( builder ) ) === 1 ? 'float' : inputType )\n\t\t\t\t);\n\n\t\t\t} else if ( method === MathNode.REFRACT ) {\n\n\t\t\t\tparams.push(\n\t\t\t\t\ta.build( builder, inputType ),\n\t\t\t\t\tb.build( builder, inputType ),\n\t\t\t\t\tc.build( builder, 'float' )\n\t\t\t\t);\n\n\t\t\t} else if ( method === MathNode.MIX ) {\n\n\t\t\t\tparams.push(\n\t\t\t\t\ta.build( builder, inputType ),\n\t\t\t\t\tb.build( builder, inputType ),\n\t\t\t\t\tc.build( builder, builder.getTypeLength( c.getNodeType( builder ) ) === 1 ? 'float' : inputType )\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\tparams.push( a.build( builder, inputType ) );\n\t\t\t\tif ( b !== null ) params.push( b.build( builder, inputType ) );\n\t\t\t\tif ( c !== null ) params.push( c.build( builder, inputType ) );\n\n\t\t\t}\n\n\t\t\treturn builder.format( `${ builder.getMethod( method ) }( ${params.join( ', ' )} )`, type, output );\n\n\t\t}\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.method = this.method;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.method = data.method;\n\n\t}\n\n}\n\n// 1 input\n\nMathNode.RADIANS = 'radians';\nMathNode.DEGREES = 'degrees';\nMathNode.EXP = 'exp';\nMathNode.EXP2 = 'exp2';\nMathNode.LOG = 'log';\nMathNode.LOG2 = 'log2';\nMathNode.SQRT = 'sqrt';\nMathNode.INVERSE_SQRT = 'inversesqrt';\nMathNode.FLOOR = 'floor';\nMathNode.CEIL = 'ceil';\nMathNode.NORMALIZE = 'normalize';\nMathNode.FRACT = 'fract';\nMathNode.SIN = 'sin';\nMathNode.COS = 'cos';\nMathNode.TAN = 'tan';\nMathNode.ASIN = 'asin';\nMathNode.ACOS = 'acos';\nMathNode.ATAN = 'atan';\nMathNode.ABS = 'abs';\nMathNode.SIGN = 'sign';\nMathNode.LENGTH = 'length';\nMathNode.NEGATE = 'negate';\nMathNode.ONE_MINUS = 'oneMinus';\nMathNode.DFDX = 'dFdx';\nMathNode.DFDY = 'dFdy';\nMathNode.ROUND = 'round';\nMathNode.RECIPROCAL = 'reciprocal';\nMathNode.TRUNC = 'trunc';\nMathNode.FWIDTH = 'fwidth';\n\n// 2 inputs\n\nMathNode.ATAN2 = 'atan2';\nMathNode.MIN = 'min';\nMathNode.MAX = 'max';\nMathNode.MOD = 'mod';\nMathNode.STEP = 'step';\nMathNode.REFLECT = 'reflect';\nMathNode.DISTANCE = 'distance';\nMathNode.DIFFERENCE = 'difference';\nMathNode.DOT = 'dot';\nMathNode.CROSS = 'cross';\nMathNode.POW = 'pow';\nMathNode.TRANSFORM_DIRECTION = 'transformDirection';\n\n// 3 inputs\n\nMathNode.MIX = 'mix';\nMathNode.CLAMP = 'clamp';\nMathNode.REFRACT = 'refract';\nMathNode.SMOOTHSTEP = 'smoothstep';\nMathNode.FACEFORWARD = 'faceforward';\n\nexport default MathNode;\n\nexport const EPSILON = float( 1e-6 );\nexport const INFINITY = float( 1e6 );\n\nexport const radians = nodeProxy( MathNode, MathNode.RADIANS );\nexport const degrees = nodeProxy( MathNode, MathNode.DEGREES );\nexport const exp = nodeProxy( MathNode, MathNode.EXP );\nexport const exp2 = nodeProxy( MathNode, MathNode.EXP2 );\nexport const log = nodeProxy( MathNode, MathNode.LOG );\nexport const log2 = nodeProxy( MathNode, MathNode.LOG2 );\nexport const sqrt = nodeProxy( MathNode, MathNode.SQRT );\nexport const inverseSqrt = nodeProxy( MathNode, MathNode.INVERSE_SQRT );\nexport const floor = nodeProxy( MathNode, MathNode.FLOOR );\nexport const ceil = nodeProxy( MathNode, MathNode.CEIL );\nexport const normalize = nodeProxy( MathNode, MathNode.NORMALIZE );\nexport const fract = nodeProxy( MathNode, MathNode.FRACT );\nexport const sin = nodeProxy( MathNode, MathNode.SIN );\nexport const cos = nodeProxy( MathNode, MathNode.COS );\nexport const tan = nodeProxy( MathNode, MathNode.TAN );\nexport const asin = nodeProxy( MathNode, MathNode.ASIN );\nexport const acos = nodeProxy( MathNode, MathNode.ACOS );\nexport const atan = nodeProxy( MathNode, MathNode.ATAN );\nexport const abs = nodeProxy( MathNode, MathNode.ABS );\nexport const sign = nodeProxy( MathNode, MathNode.SIGN );\nexport const length = nodeProxy( MathNode, MathNode.LENGTH );\nexport const negate = nodeProxy( MathNode, MathNode.NEGATE );\nexport const oneMinus = nodeProxy( MathNode, MathNode.ONE_MINUS );\nexport const dFdx = nodeProxy( MathNode, MathNode.DFDX );\nexport const dFdy = nodeProxy( MathNode, MathNode.DFDY );\nexport const round = nodeProxy( MathNode, MathNode.ROUND );\nexport const reciprocal = nodeProxy( MathNode, MathNode.RECIPROCAL );\nexport const trunc = nodeProxy( MathNode, MathNode.TRUNC );\nexport const fwidth = nodeProxy( MathNode, MathNode.FWIDTH );\n\nexport const atan2 = nodeProxy( MathNode, MathNode.ATAN2 );\nexport const min = nodeProxy( MathNode, MathNode.MIN );\nexport const max = nodeProxy( MathNode, MathNode.MAX );\nexport const mod = nodeProxy( MathNode, MathNode.MOD );\nexport const step = nodeProxy( MathNode, MathNode.STEP );\nexport const reflect = nodeProxy( MathNode, MathNode.REFLECT );\nexport const distance = nodeProxy( MathNode, MathNode.DISTANCE );\nexport const difference = nodeProxy( MathNode, MathNode.DIFFERENCE );\nexport const dot = nodeProxy( MathNode, MathNode.DOT );\nexport const cross = nodeProxy( MathNode, MathNode.CROSS );\nexport const pow = nodeProxy( MathNode, MathNode.POW );\nexport const pow2 = nodeProxy( MathNode, MathNode.POW, 2 );\nexport const pow3 = nodeProxy( MathNode, MathNode.POW, 3 );\nexport const pow4 = nodeProxy( MathNode, MathNode.POW, 4 );\nexport const transformDirection = nodeProxy( MathNode, MathNode.TRANSFORM_DIRECTION );\n\nexport const mix = nodeProxy( MathNode, MathNode.MIX );\nexport const clamp = ( value, low = 0, high = 1 ) => nodeObject( new MathNode( MathNode.CLAMP, nodeObject( value ), nodeObject( low ), nodeObject( high ) ) );\nexport const saturate = ( value ) => clamp( value );\nexport const refract = nodeProxy( MathNode, MathNode.REFRACT );\nexport const smoothstep = nodeProxy( MathNode, MathNode.SMOOTHSTEP );\nexport const faceForward = nodeProxy( MathNode, MathNode.FACEFORWARD );\n\nexport const mixElement = ( t, e1, e2 ) => mix( e1, e2, t );\nexport const smoothstepElement = ( x, low, high ) => smoothstep( low, high, x );\n\naddNodeElement( 'radians', radians );\naddNodeElement( 'degrees', degrees );\naddNodeElement( 'exp', exp );\naddNodeElement( 'exp2', exp2 );\naddNodeElement( 'log', log );\naddNodeElement( 'log2', log2 );\naddNodeElement( 'sqrt', sqrt );\naddNodeElement( 'inverseSqrt', inverseSqrt );\naddNodeElement( 'floor', floor );\naddNodeElement( 'ceil', ceil );\naddNodeElement( 'normalize', normalize );\naddNodeElement( 'fract', fract );\naddNodeElement( 'sin', sin );\naddNodeElement( 'cos', cos );\naddNodeElement( 'tan', tan );\naddNodeElement( 'asin', asin );\naddNodeElement( 'acos', acos );\naddNodeElement( 'atan', atan );\naddNodeElement( 'abs', abs );\naddNodeElement( 'sign', sign );\naddNodeElement( 'length', length );\naddNodeElement( 'negate', negate );\naddNodeElement( 'oneMinus', oneMinus );\naddNodeElement( 'dFdx', dFdx );\naddNodeElement( 'dFdy', dFdy );\naddNodeElement( 'round', round );\naddNodeElement( 'reciprocal', reciprocal );\naddNodeElement( 'trunc', trunc );\naddNodeElement( 'fwidth', fwidth );\naddNodeElement( 'atan2', atan2 );\naddNodeElement( 'min', min );\naddNodeElement( 'max', max );\naddNodeElement( 'mod', mod );\naddNodeElement( 'step', step );\naddNodeElement( 'reflect', reflect );\naddNodeElement( 'distance', distance );\naddNodeElement( 'dot', dot );\naddNodeElement( 'cross', cross );\naddNodeElement( 'pow', pow );\naddNodeElement( 'pow2', pow2 );\naddNodeElement( 'pow3', pow3 );\naddNodeElement( 'pow4', pow4 );\naddNodeElement( 'transformDirection', transformDirection );\naddNodeElement( 'mix', mixElement );\naddNodeElement( 'clamp', clamp );\naddNodeElement( 'refract', refract );\naddNodeElement( 'smoothstep', smoothstepElement );\naddNodeElement( 'faceForward', faceForward );\naddNodeElement( 'difference', difference );\naddNodeElement( 'saturate', saturate );\n\naddNodeClass( 'MathNode', MathNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}