{"ast":null,"code":"import * as THREE from '../../node_modules/three';\nexport default {\n  name: 'gyroscopeSimulator',\n  mounted() {\n    console.log(this.$el);\n    // Initialize the Three.js scene\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, this.$el.clientWidth / this.$el.clientHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    this.$refs.sceneContainer.appendChild(renderer.domElement);\n\n    // Add a cube to the scene\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    const cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    camera.position.z = 5;\n\n    // Render loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n    animate();\n  }\n};","map":{"version":3,"names":["THREE","name","mounted","console","log","$el","scene","Scene","camera","PerspectiveCamera","clientWidth","clientHeight","renderer","WebGLRenderer","setSize","$refs","sceneContainer","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","position","z","animate","requestAnimationFrame","rotation","x","y","render"],"sources":["/Users/cabrera/Documents/PortfolioWebiste/frontend/src/components/gyroscopeSimulator.vue"],"sourcesContent":["<template>\n  <div ref=\"sceneContainer\" class=\"scene-container\"></div>\n</template>\n\n<script>\nimport * as THREE from '../../node_modules/three';\n\nexport default {\n  name: 'gyroscopeSimulator',\n  mounted() {\n    console.log(this.$el)\n    // Initialize the Three.js scene\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      this.$el.clientWidth / this.$el.clientHeight,\n      0.1,\n      1000\n    );\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    this.$refs.sceneContainer.appendChild(renderer.domElement);\n\n    // Add a cube to the scene\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n    const cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n\n    camera.position.z = 5;\n\n    // Render loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  },\n};\n</script>\n\n<style scoped>\n.scene-container {\n  width: 100%;\n  height: 100%;\n}\n</style>\n"],"mappings":"AAKA,OAAO,KAAKA,KAAI,MAAO,0BAA0B;AAEjD,eAAe;EACbC,IAAI,EAAE,oBAAoB;EAC1BC,OAAOA,CAAA,EAAG;IACRC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,GAAG;IACpB;IACA,MAAMC,KAAI,GAAI,IAAIN,KAAK,CAACO,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAK,GAAI,IAAIR,KAAK,CAACS,iBAAiB,CACxC,EAAE,EACF,IAAI,CAACJ,GAAG,CAACK,WAAU,GAAI,IAAI,CAACL,GAAG,CAACM,YAAY,EAC5C,GAAG,EACH,IACF,CAAC;IAED,MAAMC,QAAO,GAAI,IAAIZ,KAAK,CAACa,aAAa,CAAC,CAAC;IAC1CD,QAAQ,CAACE,OAAO,CAAC,IAAI,CAACT,GAAG,CAACK,WAAW,EAAE,IAAI,CAACL,GAAG,CAACM,YAAY,CAAC;IAC7D,IAAI,CAACI,KAAK,CAACC,cAAc,CAACC,WAAW,CAACL,QAAQ,CAACM,UAAU,CAAC;;IAE1D;IACA,MAAMC,QAAO,GAAI,IAAInB,KAAK,CAACoB,WAAW,CAAC,CAAC;IACxC,MAAMC,QAAO,GAAI,IAAIrB,KAAK,CAACsB,iBAAiB,CAAC;MAAEC,KAAK,EAAE;IAAS,CAAC,CAAC;IACjE,MAAMC,IAAG,GAAI,IAAIxB,KAAK,CAACyB,IAAI,CAACN,QAAQ,EAAEE,QAAQ,CAAC;IAC/Cf,KAAK,CAACoB,GAAG,CAACF,IAAI,CAAC;IAEfhB,MAAM,CAACmB,QAAQ,CAACC,CAAA,GAAI,CAAC;;IAErB;IACA,MAAMC,OAAM,GAAIA,CAAA,KAAM;MACpBC,qBAAqB,CAACD,OAAO,CAAC;MAE9BL,IAAI,CAACO,QAAQ,CAACC,CAAA,IAAK,IAAI;MACvBR,IAAI,CAACO,QAAQ,CAACE,CAAA,IAAK,IAAI;MAEvBrB,QAAQ,CAACsB,MAAM,CAAC5B,KAAK,EAAEE,MAAM,CAAC;IAChC,CAAC;IAEDqB,OAAO,CAAC,CAAC;EACX;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}