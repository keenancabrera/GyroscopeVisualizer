{"ast":null,"code":"import { createCamera } from './components/camera.js';\nimport { createCylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\nimport { createRenderer } from './systems/renderer.js';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters;\n    this.state = state;\n    this.solution = {};\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n    renderer = createRenderer();\n    renderer.setSize(container.clientWidth, container.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    container.append(renderer.domElement);\n\n    // Add elements\n    const cylinder = createCylinder();\n    scene.add(cylinder);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  render() {\n    // used to render a single frame\n    renderer.render(scene, camera);\n  }\n  updateState(state) {\n    this.state = state;\n  }\n  getCartesian(state, parameters) {\n    x = this.parameters.L.value * Math.cos(this.state.theta) * Math.sin(this.state.phi);\n    y = this.parameters.L.value * Math.sin(this.state.theta) * Math.sin(this.state.phi);\n    z = this.parameters.L.value * Math.cos(this.state.phi);\n    return [x, y, z];\n  }\n  updateSolution(solution) {\n    this.solution = solution;\n  }\n}\nexport { gyroscopeAnimation };","map":{"version":3,"names":["createCamera","createCylinder","createScene","createRenderer","camera","renderer","scene","gyroscopeAnimation","constructor","container","parameters","state","solution","setSize","clientWidth","clientHeight","setPixelRatio","window","devicePixelRatio","append","domElement","cylinder","add","render","updateState","getCartesian","x","L","value","Math","cos","theta","sin","phi","y","z","updateSolution"],"sources":["/Users/cabrera/Documents/PortfolioWebiste/frontend/src/gyroscopeRenderer/gyroscopeAnimation.js"],"sourcesContent":["import { createCamera } from './components/camera.js';\nimport { createCylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\n\nimport { createRenderer } from './systems/renderer.js';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\n\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters\n    this.state = state\n    this.solution = {}\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n\n    renderer = createRenderer();\n    renderer.setSize(container.clientWidth, container.clientHeight)\n    renderer.setPixelRatio(window.devicePixelRatio)\n\n    container.append(renderer.domElement);\n\n    // Add elements\n    const cylinder = createCylinder();\n    scene.add(cylinder);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  \n  render() { // used to render a single frame\n    renderer.render(scene, camera);\n  }\n\n  updateState(state){\n    this.state = state\n  }\n\n  getCartesian(state, parameters){\n    x = this.parameters.L.value * Math.cos(this.state.theta) * Math.sin(this.state.phi)\n    y = this.parameters.L.value * Math.sin(this.state.theta) * Math.sin(this.state.phi)\n    z = this.parameters.L.value * Math.cos(this.state.phi)\n\n    return [x,y,z]\n  }\n\n  updateSolution(solution){\n    this.solution = solution\n  }\n\n}\n\nexport { gyroscopeAnimation };"],"mappings":"AAAA,SAASA,YAAY,QAAQ,wBAAwB;AACrD,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,WAAW,QAAQ,uBAAuB;AAEnD,SAASC,cAAc,QAAQ,uBAAuB;AACtD;;AAEA;AACA;AACA,IAAIC,MAAM;AACV,IAAIC,QAAQ;AACZ,IAAIC,KAAK;AAET,MAAMC,kBAAkB,CAAC;EACvBC,WAAWA,CAACC,SAAS,EAAEC,UAAU,EAAEC,KAAK,EAAE;IACxC,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;IAClB;IACAR,MAAM,GAAGJ,YAAY,CAACS,SAAS,EAAE,IAAI,CAACC,UAAU,CAAC;IACjDJ,KAAK,GAAGJ,WAAW,CAAC,CAAC;IAErBG,QAAQ,GAAGF,cAAc,CAAC,CAAC;IAC3BE,QAAQ,CAACQ,OAAO,CAACJ,SAAS,CAACK,WAAW,EAAEL,SAAS,CAACM,YAAY,CAAC;IAC/DV,QAAQ,CAACW,aAAa,CAACC,MAAM,CAACC,gBAAgB,CAAC;IAE/CT,SAAS,CAACU,MAAM,CAACd,QAAQ,CAACe,UAAU,CAAC;;IAErC;IACA,MAAMC,QAAQ,GAAGpB,cAAc,CAAC,CAAC;IACjCK,KAAK,CAACgB,GAAG,CAACD,QAAQ,CAAC;;IAEnB;EACF;;EAGAE,MAAMA,CAAA,EAAG;IAAE;IACTlB,QAAQ,CAACkB,MAAM,CAACjB,KAAK,EAAEF,MAAM,CAAC;EAChC;EAEAoB,WAAWA,CAACb,KAAK,EAAC;IAChB,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EAEAc,YAAYA,CAACd,KAAK,EAAED,UAAU,EAAC;IAC7BgB,CAAC,GAAG,IAAI,CAAChB,UAAU,CAACiB,CAAC,CAACC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACnB,KAAK,CAACoB,KAAK,CAAC,GAAGF,IAAI,CAACG,GAAG,CAAC,IAAI,CAACrB,KAAK,CAACsB,GAAG,CAAC;IACnFC,CAAC,GAAG,IAAI,CAACxB,UAAU,CAACiB,CAAC,CAACC,KAAK,GAAGC,IAAI,CAACG,GAAG,CAAC,IAAI,CAACrB,KAAK,CAACoB,KAAK,CAAC,GAAGF,IAAI,CAACG,GAAG,CAAC,IAAI,CAACrB,KAAK,CAACsB,GAAG,CAAC;IACnFE,CAAC,GAAG,IAAI,CAACzB,UAAU,CAACiB,CAAC,CAACC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACnB,KAAK,CAACsB,GAAG,CAAC;IAEtD,OAAO,CAACP,CAAC,EAACQ,CAAC,EAACC,CAAC,CAAC;EAChB;EAEAC,cAAcA,CAACxB,QAAQ,EAAC;IACtB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC1B;AAEF;AAEA,SAASL,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}