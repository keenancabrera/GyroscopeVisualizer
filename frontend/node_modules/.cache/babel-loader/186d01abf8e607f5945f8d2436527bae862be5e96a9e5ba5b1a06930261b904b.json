{"ast":null,"code":"import { addNodeMaterial } from './NodeMaterial.js';\nimport { transformedClearcoatNormalView } from '../accessors/NormalNode.js';\nimport { clearcoat, clearcoatRoughness, sheen, sheenRoughness, iridescence, iridescenceIOR, iridescenceThickness } from '../core/PropertyNode.js';\nimport { materialClearcoatNormal } from '../accessors/ExtendedMaterialNode.js';\nimport { materialClearcoat, materialClearcoatRoughness, materialSheen, materialSheenRoughness, materialIridescence, materialIridescenceIOR, materialIridescenceThickness } from '../accessors/MaterialNode.js';\nimport { float, vec3 } from '../shadernode/ShaderNode.js';\nimport PhysicalLightingModel from '../functions/PhysicalLightingModel.js';\nimport MeshStandardNodeMaterial from './MeshStandardNodeMaterial.js';\nimport { MeshPhysicalMaterial } from 'three';\nconst defaultValues = new MeshPhysicalMaterial();\nclass MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {\n  constructor(parameters) {\n    super();\n    this.isMeshPhysicalNodeMaterial = true;\n    this.clearcoatNode = null;\n    this.clearcoatRoughnessNode = null;\n    this.clearcoatNormalNode = null;\n    this.sheenNode = null;\n    this.sheenRoughnessNode = null;\n    this.iridescenceNode = null;\n    this.iridescenceIORNode = null;\n    this.iridescenceThicknessNode = null;\n    this.specularIntensityNode = null;\n    this.specularColorNode = null;\n    this.transmissionNode = null;\n    this.thicknessNode = null;\n    this.attenuationDistanceNode = null;\n    this.attenuationColorNode = null;\n    this.setDefaultValues(defaultValues);\n    this.setValues(parameters);\n  }\n  setupLightingModel( /*builder*/\n  ) {\n    return new PhysicalLightingModel(); // @TODO: Optimize shader using parameters.\n  }\n\n  setupVariants(builder) {\n    super.setupVariants(builder);\n    const {\n      stack\n    } = builder;\n\n    // CLEARCOAT\n\n    const clearcoatNode = this.clearcoatNode ? float(this.clearcoatNode) : materialClearcoat;\n    const clearcoatRoughnessNode = this.clearcoatRoughnessNode ? float(this.clearcoatRoughnessNode) : materialClearcoatRoughness;\n    stack.assign(clearcoat, clearcoatNode);\n    stack.assign(clearcoatRoughness, clearcoatRoughnessNode);\n\n    // SHEEN\n\n    const sheenNode = this.sheenNode ? vec3(this.sheenNode) : materialSheen;\n    const sheenRoughnessNode = this.sheenRoughnessNode ? float(this.sheenRoughnessNode) : materialSheenRoughness;\n    stack.assign(sheen, sheenNode);\n    stack.assign(sheenRoughness, sheenRoughnessNode);\n\n    // IRIDESCENCE\n\n    const iridescenceNode = this.iridescenceNode ? float(this.iridescenceNode) : materialIridescence;\n    const iridescenceIORNode = this.iridescenceIORNode ? float(this.iridescenceIORNode) : materialIridescenceIOR;\n    const iridescenceThicknessNode = this.iridescenceThicknessNode ? float(this.iridescenceThicknessNode) : materialIridescenceThickness;\n    stack.assign(iridescence, iridescenceNode);\n    stack.assign(iridescenceIOR, iridescenceIORNode);\n    stack.assign(iridescenceThickness, iridescenceThicknessNode);\n  }\n  setupNormal(builder) {\n    super.setupNormal(builder);\n\n    // CLEARCOAT NORMAL\n\n    const clearcoatNormalNode = this.clearcoatNormalNode ? vec3(this.clearcoatNormalNode) : materialClearcoatNormal;\n    builder.stack.assign(transformedClearcoatNormalView, clearcoatNormalNode);\n  }\n  copy(source) {\n    this.clearcoatNode = source.clearcoatNode;\n    this.clearcoatRoughnessNode = source.clearcoatRoughnessNode;\n    this.clearcoatNormalNode = source.clearcoatNormalNode;\n    this.sheenNode = source.sheenNode;\n    this.sheenRoughnessNode = source.sheenRoughnessNode;\n    this.iridescenceNode = source.iridescenceNode;\n    this.iridescenceIORNode = source.iridescenceIORNode;\n    this.iridescenceThicknessNode = source.iridescenceThicknessNode;\n    this.specularIntensityNode = source.specularIntensityNode;\n    this.specularColorNode = source.specularColorNode;\n    this.transmissionNode = source.transmissionNode;\n    this.thicknessNode = source.thicknessNode;\n    this.attenuationDistanceNode = source.attenuationDistanceNode;\n    this.attenuationColorNode = source.attenuationColorNode;\n    return super.copy(source);\n  }\n}\nexport default MeshPhysicalNodeMaterial;\naddNodeMaterial('MeshPhysicalNodeMaterial', MeshPhysicalNodeMaterial);","map":{"version":3,"names":["addNodeMaterial","transformedClearcoatNormalView","clearcoat","clearcoatRoughness","sheen","sheenRoughness","iridescence","iridescenceIOR","iridescenceThickness","materialClearcoatNormal","materialClearcoat","materialClearcoatRoughness","materialSheen","materialSheenRoughness","materialIridescence","materialIridescenceIOR","materialIridescenceThickness","float","vec3","PhysicalLightingModel","MeshStandardNodeMaterial","MeshPhysicalMaterial","defaultValues","MeshPhysicalNodeMaterial","constructor","parameters","isMeshPhysicalNodeMaterial","clearcoatNode","clearcoatRoughnessNode","clearcoatNormalNode","sheenNode","sheenRoughnessNode","iridescenceNode","iridescenceIORNode","iridescenceThicknessNode","specularIntensityNode","specularColorNode","transmissionNode","thicknessNode","attenuationDistanceNode","attenuationColorNode","setDefaultValues","setValues","setupLightingModel","setupVariants","builder","stack","assign","setupNormal","copy","source"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/nodes/materials/MeshPhysicalNodeMaterial.js"],"sourcesContent":["import { addNodeMaterial } from './NodeMaterial.js';\nimport { transformedClearcoatNormalView } from '../accessors/NormalNode.js';\nimport { clearcoat, clearcoatRoughness, sheen, sheenRoughness, iridescence, iridescenceIOR, iridescenceThickness } from '../core/PropertyNode.js';\nimport { materialClearcoatNormal } from '../accessors/ExtendedMaterialNode.js';\nimport { materialClearcoat, materialClearcoatRoughness, materialSheen, materialSheenRoughness, materialIridescence, materialIridescenceIOR, materialIridescenceThickness } from '../accessors/MaterialNode.js';\nimport { float, vec3 } from '../shadernode/ShaderNode.js';\nimport PhysicalLightingModel from '../functions/PhysicalLightingModel.js';\nimport MeshStandardNodeMaterial from './MeshStandardNodeMaterial.js';\n\nimport { MeshPhysicalMaterial } from 'three';\n\nconst defaultValues = new MeshPhysicalMaterial();\n\nclass MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshPhysicalNodeMaterial = true;\n\n\t\tthis.clearcoatNode = null;\n\t\tthis.clearcoatRoughnessNode = null;\n\t\tthis.clearcoatNormalNode = null;\n\n\t\tthis.sheenNode = null;\n\t\tthis.sheenRoughnessNode = null;\n\n\t\tthis.iridescenceNode = null;\n\t\tthis.iridescenceIORNode = null;\n\t\tthis.iridescenceThicknessNode = null;\n\n\t\tthis.specularIntensityNode = null;\n\t\tthis.specularColorNode = null;\n\n\t\tthis.transmissionNode = null;\n\t\tthis.thicknessNode = null;\n\t\tthis.attenuationDistanceNode = null;\n\t\tthis.attenuationColorNode = null;\n\n\t\tthis.setDefaultValues( defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new PhysicalLightingModel(); // @TODO: Optimize shader using parameters.\n\n\t}\n\n\tsetupVariants( builder ) {\n\n\t\tsuper.setupVariants( builder );\n\n\t\tconst { stack } = builder;\n\n\t\t// CLEARCOAT\n\n\t\tconst clearcoatNode = this.clearcoatNode ? float( this.clearcoatNode ) : materialClearcoat;\n\t\tconst clearcoatRoughnessNode = this.clearcoatRoughnessNode ? float( this.clearcoatRoughnessNode ) : materialClearcoatRoughness;\n\n\t\tstack.assign( clearcoat, clearcoatNode );\n\t\tstack.assign( clearcoatRoughness, clearcoatRoughnessNode );\n\n\t\t// SHEEN\n\n\t\tconst sheenNode = this.sheenNode ? vec3( this.sheenNode ) : materialSheen;\n\t\tconst sheenRoughnessNode = this.sheenRoughnessNode ? float( this.sheenRoughnessNode ) : materialSheenRoughness;\n\n\t\tstack.assign( sheen, sheenNode );\n\t\tstack.assign( sheenRoughness, sheenRoughnessNode );\n\n\t\t// IRIDESCENCE\n\n\t\tconst iridescenceNode = this.iridescenceNode ? float( this.iridescenceNode ) : materialIridescence;\n\t\tconst iridescenceIORNode = this.iridescenceIORNode ? float( this.iridescenceIORNode ) : materialIridescenceIOR;\n\t\tconst iridescenceThicknessNode = this.iridescenceThicknessNode ? float( this.iridescenceThicknessNode ) : materialIridescenceThickness;\n\n\t\tstack.assign( iridescence, iridescenceNode );\n\t\tstack.assign( iridescenceIOR, iridescenceIORNode );\n\t\tstack.assign( iridescenceThickness, iridescenceThicknessNode );\n\n\t}\n\n\tsetupNormal( builder ) {\n\n\t\tsuper.setupNormal( builder );\n\n\t\t// CLEARCOAT NORMAL\n\n\t\tconst clearcoatNormalNode = this.clearcoatNormalNode ? vec3( this.clearcoatNormalNode ) : materialClearcoatNormal;\n\n\t\tbuilder.stack.assign( transformedClearcoatNormalView, clearcoatNormalNode );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.clearcoatNode = source.clearcoatNode;\n\t\tthis.clearcoatRoughnessNode = source.clearcoatRoughnessNode;\n\t\tthis.clearcoatNormalNode = source.clearcoatNormalNode;\n\n\t\tthis.sheenNode = source.sheenNode;\n\t\tthis.sheenRoughnessNode = source.sheenRoughnessNode;\n\n\t\tthis.iridescenceNode = source.iridescenceNode;\n\t\tthis.iridescenceIORNode = source.iridescenceIORNode;\n\t\tthis.iridescenceThicknessNode = source.iridescenceThicknessNode;\n\n\t\tthis.specularIntensityNode = source.specularIntensityNode;\n\t\tthis.specularColorNode = source.specularColorNode;\n\n\t\tthis.transmissionNode = source.transmissionNode;\n\t\tthis.thicknessNode = source.thicknessNode;\n\t\tthis.attenuationDistanceNode = source.attenuationDistanceNode;\n\t\tthis.attenuationColorNode = source.attenuationColorNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n\nexport default MeshPhysicalNodeMaterial;\n\naddNodeMaterial( 'MeshPhysicalNodeMaterial', MeshPhysicalNodeMaterial );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}