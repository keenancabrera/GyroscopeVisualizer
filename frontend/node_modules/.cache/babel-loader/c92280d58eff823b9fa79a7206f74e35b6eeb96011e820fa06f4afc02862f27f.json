{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createCamera } from './components/camera.js';\nimport { Cylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\nimport { Rod } from './components/rod.js';\nimport { createRenderer } from './systems/renderer.js';\nimport * as THREE from 'three';\nimport { Loop } from './systems/Loop.js';\n// import { create } from 'core-js/core/object';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\nlet loop;\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters; // Affects parameters from parent component\n    this.state = state; // Affects initialState from parent component\n    this.solution = [];\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n    renderer = createRenderer();\n    renderer.setSize(container.clientWidth, container.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    loop = new Loop(camera, scene, renderer);\n    container.append(renderer.domElement);\n\n    // Add elements\n    this.cylinder = new Cylinder(parameters, this.getCartesian());\n    this.rod = new Rod(this.getCartesian(), this.parameters);\n    this.loop.push(this.cylinder);\n    this.loop.push(this.rod);\n    this.axesHelper = new THREE.AxesHelper(3 / 2 * this.parameters.l.value);\n\n    // Update cylinder position and orientation\n    this.render();\n    scene.add(this.cylinder.object, this.rod.object, this.axesHelper);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  render() {\n    // used to render a single frame\n    renderer.render(scene, camera);\n  }\n  updateSolution(solution) {\n    this.solution = solution;\n    this.loop.start();\n  }\n  updateParameters(parameters) {\n    this.parameters = parameters;\n    this.rod.tick(this.getCartesian(), this.parameters);\n    this.cylinder.changeParameters(this.parameters);\n    this.render();\n  }\n  updateState(state) {\n    this.state = state;\n    this.cylinder.tick(this.getCartesian());\n    this.rod.tick(this.getCartesian());\n    this.render();\n  }\n  getCartesian() {\n    // return cartesian coordinates from theta, phi, and psi\n    let x = this.parameters.l.value * Math.cos(this.state.theta.value) * Math.sin(this.state.phi.value);\n    let y = this.parameters.l.value * Math.sin(this.state.theta.value) * Math.sin(this.state.phi.value);\n    let z = this.parameters.l.value * Math.cos(this.state.phi.value);\n    return {\n      x: x,\n      y: y,\n      z: z\n    };\n  }\n}\nexport { gyroscopeAnimation };","map":{"version":3,"names":["createCamera","Cylinder","createScene","Rod","createRenderer","THREE","Loop","camera","renderer","scene","loop","gyroscopeAnimation","constructor","container","parameters","state","solution","setSize","clientWidth","clientHeight","setPixelRatio","window","devicePixelRatio","append","domElement","cylinder","getCartesian","rod","push","axesHelper","AxesHelper","l","value","render","add","object","updateSolution","start","updateParameters","tick","changeParameters","updateState","x","Math","cos","theta","sin","phi","y","z"],"sources":["/Users/cabrera/Documents/PortfolioWebiste/frontend/src/gyroscopeRenderer/gyroscopeAnimation.js"],"sourcesContent":["import { createCamera } from './components/camera.js';\nimport { Cylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\nimport { Rod } from './components/rod.js'\n\nimport { createRenderer } from './systems/renderer.js';\nimport * as THREE from 'three';\nimport { Loop } from './systems/Loop.js'\n// import { create } from 'core-js/core/object';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\nlet loop;\n\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters // Affects parameters from parent component\n    this.state = state // Affects initialState from parent component\n    this.solution = []\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n    renderer = createRenderer();\n      renderer.setSize(container.clientWidth, container.clientHeight)\n      renderer.setPixelRatio(window.devicePixelRatio)\n    loop = new Loop(camera, scene, renderer)\n\n    container.append(renderer.domElement);\n\n    // Add elements\n    this.cylinder = new Cylinder(parameters, this.getCartesian())\n    this.rod = new Rod(this.getCartesian(), this.parameters)\n    this.loop.push(this.cylinder)\n    this.loop.push(this.rod)\n\n    this.axesHelper = new THREE.AxesHelper(3/2 * this.parameters.l.value)\n\n    // Update cylinder position and orientation\n    this.render()\n    scene.add(this.cylinder.object, this.rod.object, this.axesHelper);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  render() { // used to render a single frame\n    renderer.render(scene, camera);\n  }\n\n  updateSolution(solution){\n    this.solution = solution\n    this.loop.start()\n  }\n\n  updateParameters(parameters){\n    this.parameters = parameters\n\n    this.rod.tick(this.getCartesian(), this.parameters)\n    this.cylinder.changeParameters(this.parameters)\n    this.render()\n  }\n\n  updateState(state){\n    this.state = state\n\n    this.cylinder.tick(this.getCartesian())\n    this.rod.tick(this.getCartesian())\n    this.render()\n  }\n\n  getCartesian(){ // return cartesian coordinates from theta, phi, and psi\n    let x = this.parameters.l.value * Math.cos(this.state.theta.value) * Math.sin(this.state.phi.value)\n    let y = this.parameters.l.value * Math.sin(this.state.theta.value) * Math.sin(this.state.phi.value)\n    let z = this.parameters.l.value * Math.cos(this.state.phi.value)\n\n    return {x:x, y:y, z:z}\n  }\n\n}\n\nexport { gyroscopeAnimation };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}