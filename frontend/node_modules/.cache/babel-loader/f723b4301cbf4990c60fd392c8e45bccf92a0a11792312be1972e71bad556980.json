{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createBlock as _createBlock, createCommentVNode as _createCommentVNode, resolveDirective as _resolveDirective, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_card_title = _resolveComponent(\"v-card-title\");\n  const _component_v_card_subtitle = _resolveComponent(\"v-card-subtitle\");\n  const _component_v_card_item = _resolveComponent(\"v-card-item\");\n  const _component_v_slider = _resolveComponent(\"v-slider\");\n  const _component_v_card_text = _resolveComponent(\"v-card-text\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_gyroscopeSimulator = _resolveComponent(\"gyroscopeSimulator\");\n  const _component_v_sheet = _resolveComponent(\"v-sheet\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  const _component_v_main = _resolveComponent(\"v-main\");\n  const _component_v_app = _resolveComponent(\"v-app\");\n  const _directive_flex = _resolveDirective(\"flex\");\n  return _openBlock(), _createBlock(_component_v_app, {\n    id: \"gyro\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_main, {\n      class: \"bg-grey-lighten-3\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_container, {\n        fluid: true,\n        class: \"ma-0 pa-2 v-flex full-width\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_v_row, null, {\n          default: _withCtx(() => [_createVNode(_component_v_col, {\n            cols: \"4\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_v_card, {\n              rounded: \"lg\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_v_card_item, {\n                class: \"mb-5\"\n              }, {\n                default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n                  default: _withCtx(() => [_createTextVNode(\"Parameters\")]),\n                  _: 1 /* STABLE */\n                }), _createVNode(_component_v_card_subtitle, null, {\n                  default: _withCtx(() => [_createTextVNode(\"Set dimensions of gyroscope and strength of gravity\")]),\n                  _: 1 /* STABLE */\n                })]),\n\n                _: 1 /* STABLE */\n              }), _createVNode(_component_v_card_text, null, {\n                default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.parameters, (parameter, key) => {\n                  return _openBlock(), _createBlock(_component_v_slider, {\n                    min: parameter.min,\n                    max: parameter.max,\n                    \"thumb-label\": 'always',\n                    modelValue: parameter.value,\n                    \"onUpdate:modelValue\": $event => parameter.value = $event,\n                    key: key,\n                    class: \"mt-2\"\n                  }, {\n                    prepend: _withCtx(() => [_createTextVNode(_toDisplayString(parameter.symbol) + \" : \", 1 /* TEXT */)]),\n\n                    _: 2 /* DYNAMIC */\n                  }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"min\", \"max\", \"modelValue\", \"onUpdate:modelValue\"]);\n                }), 128 /* KEYED_FRAGMENT */))]),\n\n                _: 1 /* STABLE */\n              })]),\n\n              _: 1 /* STABLE */\n            }), _createVNode(_component_v_card, {\n              rounded: \"lg\",\n              class: \"mt-2\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_v_card_item, {\n                class: \"mb-5\"\n              }, {\n                default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n                  default: _withCtx(() => [_createTextVNode(\"Initial State\")]),\n                  _: 1 /* STABLE */\n                }), _createVNode(_component_v_card_subtitle, null, {\n                  default: _withCtx(() => [_createTextVNode(\"Set initial state of gyroscope\")]),\n                  _: 1 /* STABLE */\n                })]),\n\n                _: 1 /* STABLE */\n              }), _createVNode(_component_v_card_text, null, {\n                default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.initialState, (stateVariable, key) => {\n                  return _openBlock(), _createBlock(_component_v_slider, {\n                    min: stateVariable.min,\n                    max: stateVariable.max,\n                    \"thumb-label\": 'always',\n                    modelValue: stateVariable.value,\n                    \"onUpdate:modelValue\": $event => stateVariable.value = $event,\n                    key: key,\n                    class: \"mt-2\"\n                  }, {\n                    prepend: _withCtx(() => [_createTextVNode(_toDisplayString(stateVariable.symbol) + \" \", 1 /* TEXT */), stateVariable.subscript ? (_openBlock(), _createElementBlock(\"sub\", _hoisted_1, _toDisplayString(stateVariable.subscript), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createTextVNode(\" : \")]),\n                    _: 2 /* DYNAMIC */\n                  }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"min\", \"max\", \"modelValue\", \"onUpdate:modelValue\"]);\n                }), 128 /* KEYED_FRAGMENT */))]),\n\n                _: 1 /* STABLE */\n              })]),\n\n              _: 1 /* STABLE */\n            }), _withDirectives((_openBlock(), _createBlock(_component_v_btn, {\n              variant: \"tonal\",\n              class: \"mt-auto flex-md-grow-0\",\n              onClick: _cache[0] || (_cache[0] = $event => $options.runSolver(this.solverParameters.t0.value, [this.computedState.theta, this.computedState.phi, this.computedState.psi, this.computedState.pTheta, this.computedState.pPhi, this.computedState.pPsi], this.solverParameters.numSteps.value))\n            }, {\n              default: _withCtx(() => [_createTextVNode(\" START \")]),\n              _: 1 /* STABLE */\n            })), [[_directive_flex]]), _withDirectives((_openBlock(), _createBlock(_component_v_btn, {\n              class: \"mt-auto flex-md-grow-0\",\n              variant: \"tonal\",\n              onClick: _cache[1] || (_cache[1] = $event => _ctx.isSolving = false)\n            }, {\n              default: _withCtx(() => [_createTextVNode(\" STOP \")]),\n              _: 1 /* STABLE */\n            })), [[_directive_flex]])]),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_v_col, {\n            cols: \"8\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_v_sheet, {\n              rounded: \"lg\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_gyroscopeSimulator, {\n                solution: _ctx.solution,\n                parameters: _ctx.parameters,\n                state: $options.computedState,\n                isSolving: _ctx.isSolving\n              }, null, 8 /* PROPS */, [\"solution\", \"parameters\", \"state\", \"isSolving\"])]),\n              _: 1 /* STABLE */\n            })]),\n\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createBlock","_component_v_app","id","_createVNode","_component_v_main","class","_component_v_container","fluid","_component_v_row","_component_v_col","cols","_component_v_card","rounded","_component_v_card_item","_component_v_card_title","_component_v_card_subtitle","_component_v_card_text","_createElementBlock","_Fragment","_renderList","_ctx","parameters","parameter","key","_component_v_slider","min","max","value","$event","prepend","_withCtx","symbol","initialState","stateVariable","subscript","_hoisted_1","_toDisplayString","_component_v_btn","variant","onClick","_cache","$options","runSolver","solverParameters","t0","computedState","theta","phi","psi","pTheta","pPhi","pPsi","numSteps","isSolving","_component_v_sheet","_component_gyroscopeSimulator","solution","state"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/src/App.vue"],"sourcesContent":["<template>\n  <v-app id=\"gyro\">\n    <v-main class=\"bg-grey-lighten-3 \">\n      <v-container :fluid=\"true\" class=\"ma-0 pa-2 v-flex full-width\">\n        <v-row>\n          <v-col cols=\"4\">\n            <v-card rounded=\"lg\">\n\n              <v-card-item class=\"mb-5\">\n                <v-card-title>Parameters</v-card-title>\n                <v-card-subtitle>Set dimensions of gyroscope and strength of gravity</v-card-subtitle>\n              </v-card-item>\n\n              <v-card-text>\n                <v-slider \n                  v-for=\"(parameter, key) in parameters\" \n                  :min=\"parameter.min\" \n                  :max=\"parameter.max\" \n                  :thumb-label=\"'always'\"\n                  v-model=\"parameter.value\" \n                  :key=\"key\"\n                  class=\"mt-2\"\n                  >\n                  <template v-slot:prepend>\n                    {{ parameter.symbol }} :\n                  </template>\n                </v-slider>                \n              </v-card-text>\n            </v-card>\n            \n            <v-card rounded=\"lg\" class=\"mt-2\">\n              \n              <v-card-item class=\"mb-5\">\n                <v-card-title>Initial State</v-card-title>\n                <v-card-subtitle>Set initial state of gyroscope</v-card-subtitle>\n              </v-card-item>\n\n              <v-card-text>\n                <v-slider \n                  v-for = \"(stateVariable, key) in initialState\"\n                  :min=\"stateVariable.min\" \n                  :max=\"stateVariable.max\" \n                  :thumb-label=\"'always'\"\n                  v-model=\"stateVariable.value\" \n                  :key=\"key\"\n                  class=\"mt-2\"\n                  >\n                  <template v-slot:prepend>\n                    {{ stateVariable.symbol }} <sub v-if = \"stateVariable.subscript\">{{stateVariable.subscript}}</sub> :\n                  </template>\n                </v-slider>                \n              </v-card-text>\n            </v-card>\n\n            <v-btn \n              v-flex\n              variant=\"tonal\" \n              class = \"mt-auto flex-md-grow-0\"\n              @click=\"runSolver(\n                this.solverParameters.t0.value,\n                [this.computedState.theta, this.computedState.phi, this.computedState.psi, this.computedState.pTheta, this.computedState.pPhi, this.computedState.pPsi],\n                this.solverParameters.numSteps.value\n              )\"\n            >\n              START\n            </v-btn>\n            <v-btn\n              v-flex\n              class = \"mt-auto flex-md-grow-0\"\n              variant=\"tonal\" \n              @click=\"isSolving = false\"\n            >\n          STOP\n          </v-btn>\n          </v-col>\n\n          <v-col cols=\"8\">\n            <v-sheet rounded=\"lg\">\n              <gyroscopeSimulator :solution=\"solution\" :parameters=\"parameters\" :state=\"computedState\" :isSolving = \"isSolving\"></gyroscopeSimulator>\n            </v-sheet>\n          </v-col>\n        </v-row>\n      </v-container>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\n// import { pushScopeId } from 'vue'\nimport gyroscopeSimulator from './components/gyroscopeSimulator'\n// import _ from 'lodash'\n// import { popScopeId } from 'vue'\n// import { ref, onMounted } from 'vue'\n\n  export default {\n    name: 'app',\n    components: {\n      gyroscopeSimulator\n    },\n    data: () => ({\n      parameters : {\n        \"l\" : {value: 5, min: 1, max: 10, symbol: 'l'},\n        \"a\" : {value: 2, min: 1, max: 5, symbol: 'a'},\n        \"h\" : {value: 0.5, min: 0.1, max: 1, symbol: 'h'},\n        \"g\" : {value: 9.8, min: 0, max: 10, symbol : 'g'},\n      },\n      solverParameters : {\n          \"stepSize\" : {value: 1/240},\n          \"numSteps\" : {value: 240 * 5}, // total animation time in seconds is stepSize * numSteps\n          't0' : {value: 0}\n      },\n      animationParameters : {\n          \"rstride\" : 15,\n          \"cstride\" : 5,\n          \"nSample\" : 45,\n          \"dpi\" : 300,\n          \"transparency\" : 0.8\n      },\n      initialState : {\n          \"theta\" : {value: 0, min: 0, max: 6.28, symbol: '𝛉'},\n          \"phi\" : {value: 0.2, min: 0.01, max: 6.28, symbol: '𝜙'},\n          \"psi\" : {value: 0, min: 0, max: 6.28, symbol: '𝛙'},\n          \"thetaVel\": {value: 0, min: 0, max: 12, symbol: 'ω', subscript: '𝛉'},\n          \"phiVel\": {value: 0, min: 0, max: 12, symbol: 'ω', subscript: '𝜙'},\n          \"psiVel\": {value: 0, min: 0, max: 100, symbol: 'ω', subscript: '𝛙'}\n      },\n      solution: [],\n      isSolving : false, // boolean to track whether or not simulation is running.\n      lastSolverStep : null // saves last solver step for use in generating continuous solution\n    }),\n    computed : {\n      computedState() {\n        let state = {... this.initialState}\n        for(let key in state){\n          state[key] = state[key].value\n        }\n        Object.assign(state, this.getCartesian(state.theta, state.phi))\n        Object.assign(state, this.getGeneralizedMomenta())\n        return state\n      }\n    },\n    watch: {\n    solution: {\n      handler(newValue) {\n        //let throttleSolver = _.throttle(this.runSolver(this.lastSolverStep['t0'], this.lastSolverStep['state'], false), 1000)\n        if(newValue.length < this.solverParameters.numSteps.value / 2 && this.isSolving == true){\n          this.runSolver(this.lastSolverStep['t0'], this.lastSolverStep['state'], this.solverParameters.numSteps.value / 10, false)\n          console.log(\"RECOMPUTING\")\n          console.log(\"Len of array is : \" + newValue.length )\n        }\n      },\n      deep: true\n    }\n    },\n    methods : {\n      gyroscope(t, stateVector) { // returns dstateVector/dt\n          let [theta, phi, psi, pTheta, pPhi, pPsi] = stateVector\n\n          // DON'T ANGER THE LINTER\n          theta = psi\n          psi = theta\n          \n          let phiVel = pPhi / this.parameters.l.value**2 \n          let thetaVel = (pTheta - (pPsi * Math.cos(phi)))/(this.parameters.l.value**2 * Math.sin(phi)**2) \n          let psiVel = (pPsi/(this.parameters.a.value**2/4)) - thetaVel * Math.cos(phi) \n\n          let pThetaDot = 0 \n          let pPhiDot = (this.parameters.l.value**2 + (this.parameters.a.value**2/4))* Math.sin(phi) * Math.cos(phi) * thetaVel**2 + (this.parameters.g.value*this.parameters.l.value - (this.parameters.a.value**2/4) * psiVel * thetaVel) * Math.sin(phi)\n          let pPsiDot = 0\n\n          return [thetaVel, phiVel, psiVel, pThetaDot, pPhiDot, pPsiDot];\n      },\n      rungeKutta(engine, state, t0, stepSize, numSteps) {\n          // Helper functions for rungeKutta solver\n          function numericAdd(a, b) {\n            return a.map((ai, i) => ai + b[i]);\n          }\n          function numericMul(scalar, vector) {\n              return vector.map(vi => scalar * vi);\n          }\n\n          // Variable Instantiation\n          const result = [];\n          result.push({ t: t0, state: state });\n\n          // Solve\n          for (let i = 1; i <= numSteps; i++) {\n              const t = t0 + i * stepSize;\n              const k1 = numericMul(stepSize, engine(t0, state));\n              const k2 = numericMul(stepSize, engine(t0 + stepSize / 2, numericAdd(state, numericMul(0.5, k1))));\n              const k3 = numericMul(stepSize, engine(t0 + stepSize / 2, numericAdd(state, numericMul(0.5, k2))));\n              const k4 = numericMul(stepSize, engine(t0 + stepSize, numericAdd(state, k3)));\n\n              state = numericAdd(state, numericMul(1 / 6, numericAdd(k1, numericAdd(numericMul(2, k2), numericAdd(numericMul(2, k3), k4)))));\n              t0 = t;\n              result.push({ t, state: state });\n          }\n          return result;\n      },\n      updateSolution(solution){\n        for(let elem of solution){\n          let entry = {\n            theta : elem.state[0],\n            phi : elem.state[1],\n            psi : elem.state[2],\n            ... this.getCartesian(elem.state[0], elem.state[1])\n          }\n          this.solution.push(entry)\n        }\n      },\n      runSolver(t0, stateVector, numSteps, clearSolution = true){\n        if(clearSolution == true){\n          this.solution = []\n        }\n\n        this.isSolving = true\n        let solution = this.rungeKutta(\n          this.gyroscope,\n          stateVector,\n          t0,\n          this.solverParameters.stepSize.value,\n          numSteps\n        )\n\n        this.lastSolverStep = solution[solution.length - 1]\n        this.updateSolution(solution)\n      },\n      getCartesian(theta, phi){// return cartesian coordinates from theta, phi, and psi\n          let x = this.parameters.l.value * Math.cos(theta) * Math.sin(phi)\n          let y = this.parameters.l.value * Math.sin(theta) * Math.sin(phi)\n          let z = this.parameters.l.value * Math.cos(phi)\n\n          return {x:x, y:y, z:z}\n      },\n      getGeneralizedMomenta(){\n        let pTheta = (this.parameters.l.value**2 * Math.sin(this.initialState.phi.value)**2 + (this.parameters.a.value**2/4) * Math.cos(this.initialState.phi.value)**2)*this.initialState.thetaVel.value + (this.parameters.a.value**2/4) * this.initialState.psiVel.value * Math.cos(this.initialState.phi.value)\n        let pPhi = this.parameters.l.value**2 * this.initialState.phiVel.value\n        let pPsi = (this.parameters.a.value**2/4) * (this.initialState.thetaVel.value * Math.cos(this.initialState.phi.value) + this.initialState.psiVel.value)\n\n        return {pTheta:pTheta, pPhi:pPhi, pPsi:pPsi}\n      }\n    }\n  }\n</script>\n\n<style>\n#app{\n  width: 100%;\n  height: 100%;\n  font-family: NotoSansMath-Regular\n}\n\n@font-face {\n    font-family: NotoSansMath-Regular;\n    src: url('~@/assets/fonts/NotoSansMath-Regular.ttf');\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}