{"ast":null,"code":"import { createCamera } from './components/camera.js';\nimport { createCylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\nimport { createRod } from './components/rod.js';\nimport { createRenderer } from './systems/renderer.js';\nimport * as THREE from 'three';\n// import { create } from 'core-js/core/object';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters;\n    this.state = state;\n    this.solution = {};\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n    renderer = createRenderer();\n    renderer.setSize(container.clientWidth, container.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    container.append(renderer.domElement);\n\n    // Add elements\n    this.cylinder = createCylinder(parameters, state);\n    [this.verticies, this.line] = createRod(this.getCartesian());\n    this.axesHelper = new THREE.AxesHelper(3 / 2 * this.parameters.l.value);\n\n    // Adjust their positions, initialize oldPosition vector which we will need to perform rotations.\n    this.cylinder.position.set(0, 0, this.parameters.l.value);\n    this.oldPosition = new THREE.Vector3();\n    this.cylinder.getWorldPosition(this.oldPosition);\n\n    // Update cylinder position and orientation\n    this.updateCylinder();\n    scene.add(this.cylinder, this.line, this.axesHelper);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  render() {\n    // used to render a single frame\n    renderer.render(scene, camera);\n  }\n  updateSolution(solution) {\n    this.solution = solution;\n  }\n  updateParameters(parameters) {\n    this.parameters = parameters;\n    const geometry = new THREE.CylinderGeometry(this.parameters.a.value,\n    // top radius\n    this.parameters.a.value,\n    // bottom radius\n    this.parameters.h.value,\n    // height\n    32);\n    this.cylinder.geometry = geometry;\n    this.render();\n  }\n  updateState(state) {\n    this.state = state;\n    this.updateCylinder();\n    this.updateRod();\n    this.render();\n  }\n  getCartesian() {\n    // return cartesian coordinates from theta, phi, and psi\n    let x = this.parameters.l.value * Math.cos(this.state.theta.value) * Math.sin(this.state.phi.value);\n    let y = this.parameters.l.value * Math.sin(this.state.theta.value) * Math.sin(this.state.phi.value);\n    let z = this.parameters.l.value * Math.cos(this.state.phi.value);\n    return {\n      x: x,\n      y: y,\n      z: z\n    };\n  }\n  updateCylinder() {\n    let cartesian = this.getCartesian();\n    let currentPosition = new THREE.Vector3(cartesian['x'], cartesian['y'], cartesian['z']);\n    let angle = this.oldPosition.angleTo(currentPosition);\n    let difference = currentPosition.clone().sub(this.oldPosition);\n    let rotationVector = new THREE.Vector3().crossVectors(difference, this.oldPosition);\n    this.cylinder.position.set(cartesian['x'], cartesian['y'], cartesian['z']);\n    this.cylinder.rotateOnWorldAxis(rotationVector.normalize(), angle);\n    this.oldPosition = currentPosition.clone();\n  }\n  updateRod() {\n    let cartesian = this.getCartesian();\n    this.verticies[3] = cartesian['x'];\n    this.verticies[4] = cartesian['y'];\n    this.verticies[5] = cartesian['z'];\n    this.line.geometry.setAttribute('position', new THREE.BufferAttribute(this.verticies, 3));\n  }\n}\nexport { gyroscopeAnimation };","map":{"version":3,"names":["createCamera","createCylinder","createScene","createRod","createRenderer","THREE","camera","renderer","scene","gyroscopeAnimation","constructor","container","parameters","state","solution","setSize","clientWidth","clientHeight","setPixelRatio","window","devicePixelRatio","append","domElement","cylinder","verticies","line","getCartesian","axesHelper","AxesHelper","l","value","position","set","oldPosition","Vector3","getWorldPosition","updateCylinder","add","render","updateSolution","updateParameters","geometry","CylinderGeometry","a","h","updateState","updateRod","x","Math","cos","theta","sin","phi","y","z","cartesian","currentPosition","angle","angleTo","difference","clone","sub","rotationVector","crossVectors","rotateOnWorldAxis","normalize","setAttribute","BufferAttribute"],"sources":["/Users/cabrera/Documents/PortfolioWebiste/frontend/src/gyroscopeRenderer/gyroscopeAnimation.js"],"sourcesContent":["import { createCamera } from './components/camera.js';\nimport { createCylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\nimport { createRod } from './components/rod.js'\n\nimport { createRenderer } from './systems/renderer.js';\nimport * as THREE from 'three';\n// import { create } from 'core-js/core/object';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\n\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters\n    this.state = state\n    this.solution = {}\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n\n    renderer = createRenderer();\n    renderer.setSize(container.clientWidth, container.clientHeight)\n    renderer.setPixelRatio(window.devicePixelRatio)\n\n    container.append(renderer.domElement);\n\n    // Add elements\n    this.cylinder = createCylinder(parameters, state);\n    [this.verticies, this.line] = createRod(this.getCartesian())\n    this.axesHelper = new THREE.AxesHelper(3/2 * this.parameters.l.value)\n\n    // Adjust their positions, initialize oldPosition vector which we will need to perform rotations.\n    this.cylinder.position.set(0,0,this.parameters.l.value)\n    this.oldPosition = new THREE.Vector3()\n    this.cylinder.getWorldPosition(this.oldPosition)\n\n    // Update cylinder position and orientation\n    this.updateCylinder()\n    scene.add(this.cylinder, this.line, this.axesHelper);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  render() { // used to render a single frame\n    renderer.render(scene, camera);\n  }\n\n  updateSolution(solution){\n    this.solution = solution\n  }\n\n  updateParameters(parameters){\n    this.parameters = parameters\n    const geometry = new THREE.CylinderGeometry(\n      this.parameters.a.value, // top radius\n      this.parameters.a.value, // bottom radius\n      this.parameters.h.value, // height\n      32\n      ); \n\n    this.cylinder.geometry = geometry\n\n    this.render()\n  }\n\n  updateState(state){\n    this.state = state\n\n    this.updateCylinder()\n    this.updateRod()\n    this.render()\n  }\n\n  getCartesian(){ // return cartesian coordinates from theta, phi, and psi\n    let x = this.parameters.l.value * Math.cos(this.state.theta.value) * Math.sin(this.state.phi.value)\n    let y = this.parameters.l.value * Math.sin(this.state.theta.value) * Math.sin(this.state.phi.value)\n    let z = this.parameters.l.value * Math.cos(this.state.phi.value)\n\n    return {x:x, y:y, z:z}\n  }\n\n  updateCylinder(){\n    let cartesian = this.getCartesian()\n    let currentPosition = new THREE.Vector3(cartesian['x'], cartesian['y'], cartesian['z'])\n\n    let angle = this.oldPosition.angleTo(currentPosition)\n    let difference = currentPosition.clone().sub(this.oldPosition)\n    let rotationVector = new THREE.Vector3().crossVectors(difference, this.oldPosition)\n\n    this.cylinder.position.set(cartesian['x'], cartesian['y'], cartesian['z'])\n    this.cylinder.rotateOnWorldAxis(rotationVector.normalize(), angle)\n\n    this.oldPosition = currentPosition.clone()\n  }\n\n  updateRod(){\n    let cartesian = this.getCartesian()\n    this.verticies[3] = cartesian['x']\n    this.verticies[4] = cartesian['y']\n    this.verticies[5] = cartesian['z']\n    this.line.geometry.setAttribute('position', new THREE.BufferAttribute(this.verticies, 3))\n  }\n\n}\n\nexport { gyroscopeAnimation };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}