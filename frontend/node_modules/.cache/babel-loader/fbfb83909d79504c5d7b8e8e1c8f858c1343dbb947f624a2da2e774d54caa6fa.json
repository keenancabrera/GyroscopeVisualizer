{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-68d5cb0f\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"sceneContainer\",\n  class: \"scene-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["/Users/cabrera/Documents/PortfolioWebiste/frontend/src/components/gyroscopeSimulator.vue"],"sourcesContent":["<template>\n  <div ref=\"sceneContainer\" class=\"scene-container\"></div>\n</template>\n\n<script>\nimport * as THREE from '../../node_modules/three';\n\nexport default {\n  name: 'gyroscopeSimulator',\n  data() {\n    return {\n      L: 5,\n      a: 1,\n      h: 0.5,\n      theta: Math.PI/4,\n      phi: Math.PI/4,\n      psi: Math.PI/4,\n    }\n  },\n  methods(){\n\n  },\n  mounted() {\n    // console.log(this.props.gyroscope)\n    // Initialize the Three.js scene\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      this.$el.clientWidth / this.$el.clientHeight,\n      0.1,\n      1000\n    );\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    this.$refs.sceneContainer.appendChild(renderer.domElement);\n\n    // Axes Helper\n    // X RED | Y GREEN | Z BLUE |\n    const axesHelper = new THREE.AxesHelper(this.L*2)\n\n    // Cylinder to the scene\n    const geometryCylinder = new THREE.CylinderGeometry(this.a, this.a, this.h, 32 ); \n    const materialCylinder = new THREE.MeshBasicMaterial({ color: 0xffff00 });\n    const cylinder = new THREE.Mesh(geometryCylinder, materialCylinder);\n    cylinder.position.set(1,0,1) \n    // Rod to the scene\n    // const geometryRod = new THREE.CylinderGeometry(this.a/50, this.a/50, this.L, 32 ); \n    // const materialRod = new THREE.MeshBasicMaterial({ color: \"blue\" });\n    // const rod = new THREE.Mesh(geometryRod, materialRod);\n\n    scene.add(cylinder, axesHelper);\n\n\n    // const material = new THREE.MeshBasicMaterial( {color: 0xffff00} ); \n    // const cylinder = new THREE.Mesh( geometry, material ); \n    // scene.add(cylinder);\n\n    camera.position.x = this.L\n    camera.position.y = this.L\n    camera.position.z = this.L\n    camera.lookAt(0,0,0)\n    // Render loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  },\n};\n</script>\n\n<style scoped>\n.scene-container {\n  width: 100%;\n  height: 70vh;\n}\n</style>\n"],"mappings":";;;EACOA,GAAG,EAAC,gBAAgB;EAACC,KAAK,EAAC;;;uBAAhCC,mBAAA,CAAwD,OAAxDC,UAAwD"},"metadata":{},"sourceType":"module","externalDependencies":[]}