{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Box3, Color, DoubleSide, Frustum, Matrix3, Matrix4, Vector2, Vector3, Vector4 } from 'three';\nclass RenderableObject {\n  constructor() {\n    this.id = 0;\n    this.object = null;\n    this.z = 0;\n    this.renderOrder = 0;\n  }\n}\n\n//\n\nclass RenderableFace {\n  constructor() {\n    this.id = 0;\n    this.v1 = new RenderableVertex();\n    this.v2 = new RenderableVertex();\n    this.v3 = new RenderableVertex();\n    this.normalModel = new Vector3();\n    this.vertexNormalsModel = [new Vector3(), new Vector3(), new Vector3()];\n    this.vertexNormalsLength = 0;\n    this.color = new Color();\n    this.material = null;\n    this.uvs = [new Vector2(), new Vector2(), new Vector2()];\n    this.z = 0;\n    this.renderOrder = 0;\n  }\n}\n\n//\n\nclass RenderableVertex {\n  constructor() {\n    this.position = new Vector3();\n    this.positionWorld = new Vector3();\n    this.positionScreen = new Vector4();\n    this.visible = true;\n  }\n  copy(vertex) {\n    this.positionWorld.copy(vertex.positionWorld);\n    this.positionScreen.copy(vertex.positionScreen);\n  }\n}\n\n//\n\nclass RenderableLine {\n  constructor() {\n    this.id = 0;\n    this.v1 = new RenderableVertex();\n    this.v2 = new RenderableVertex();\n    this.vertexColors = [new Color(), new Color()];\n    this.material = null;\n    this.z = 0;\n    this.renderOrder = 0;\n  }\n}\n\n//\n\nclass RenderableSprite {\n  constructor() {\n    this.id = 0;\n    this.object = null;\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.rotation = 0;\n    this.scale = new Vector2();\n    this.material = null;\n    this.renderOrder = 0;\n  }\n}\n\n//\n\nclass Projector {\n  constructor() {\n    let _object,\n      _objectCount,\n      _objectPoolLength = 0,\n      _vertex,\n      _vertexCount,\n      _vertexPoolLength = 0,\n      _face,\n      _faceCount,\n      _facePoolLength = 0,\n      _line,\n      _lineCount,\n      _linePoolLength = 0,\n      _sprite,\n      _spriteCount,\n      _spritePoolLength = 0,\n      _modelMatrix;\n    const _renderData = {\n        objects: [],\n        lights: [],\n        elements: []\n      },\n      _vector3 = new Vector3(),\n      _vector4 = new Vector4(),\n      _clipBox = new Box3(new Vector3(-1, -1, -1), new Vector3(1, 1, 1)),\n      _boundingBox = new Box3(),\n      _points3 = new Array(3),\n      _viewMatrix = new Matrix4(),\n      _viewProjectionMatrix = new Matrix4(),\n      _modelViewProjectionMatrix = new Matrix4(),\n      _frustum = new Frustum(),\n      _objectPool = [],\n      _vertexPool = [],\n      _facePool = [],\n      _linePool = [],\n      _spritePool = [];\n\n    //\n\n    function RenderList() {\n      const normals = [];\n      const colors = [];\n      const uvs = [];\n      let object = null;\n      const normalMatrix = new Matrix3();\n      function setObject(value) {\n        object = value;\n        normalMatrix.getNormalMatrix(object.matrixWorld);\n        normals.length = 0;\n        colors.length = 0;\n        uvs.length = 0;\n      }\n      function projectVertex(vertex) {\n        const position = vertex.position;\n        const positionWorld = vertex.positionWorld;\n        const positionScreen = vertex.positionScreen;\n        positionWorld.copy(position).applyMatrix4(_modelMatrix);\n        positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n        const invW = 1 / positionScreen.w;\n        positionScreen.x *= invW;\n        positionScreen.y *= invW;\n        positionScreen.z *= invW;\n        vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n      }\n      function pushVertex(x, y, z) {\n        _vertex = getNextVertexInPool();\n        _vertex.position.set(x, y, z);\n        projectVertex(_vertex);\n      }\n      function pushNormal(x, y, z) {\n        normals.push(x, y, z);\n      }\n      function pushColor(r, g, b) {\n        colors.push(r, g, b);\n      }\n      function pushUv(x, y) {\n        uvs.push(x, y);\n      }\n      function checkTriangleVisibility(v1, v2, v3) {\n        if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n        _points3[0] = v1.positionScreen;\n        _points3[1] = v2.positionScreen;\n        _points3[2] = v3.positionScreen;\n        return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n      }\n      function checkBackfaceCulling(v1, v2, v3) {\n        return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n      }\n      function pushLine(a, b) {\n        const v1 = _vertexPool[a];\n        const v2 = _vertexPool[b];\n\n        // Clip\n\n        v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);\n        v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);\n        if (clipLine(v1.positionScreen, v2.positionScreen) === true) {\n          // Perform the perspective divide\n          v1.positionScreen.multiplyScalar(1 / v1.positionScreen.w);\n          v2.positionScreen.multiplyScalar(1 / v2.positionScreen.w);\n          _line = getNextLineInPool();\n          _line.id = object.id;\n          _line.v1.copy(v1);\n          _line.v2.copy(v2);\n          _line.z = Math.max(v1.positionScreen.z, v2.positionScreen.z);\n          _line.renderOrder = object.renderOrder;\n          _line.material = object.material;\n          if (object.material.vertexColors) {\n            _line.vertexColors[0].fromArray(colors, a * 3);\n            _line.vertexColors[1].fromArray(colors, b * 3);\n          }\n          _renderData.elements.push(_line);\n        }\n      }\n      function pushTriangle(a, b, c, material) {\n        const v1 = _vertexPool[a];\n        const v2 = _vertexPool[b];\n        const v3 = _vertexPool[c];\n        if (checkTriangleVisibility(v1, v2, v3) === false) return;\n        if (material.side === DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n          _face = getNextFaceInPool();\n          _face.id = object.id;\n          _face.v1.copy(v1);\n          _face.v2.copy(v2);\n          _face.v3.copy(v3);\n          _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n          _face.renderOrder = object.renderOrder;\n\n          // face normal\n          _vector3.subVectors(v3.position, v2.position);\n          _vector4.subVectors(v1.position, v2.position);\n          _vector3.cross(_vector4);\n          _face.normalModel.copy(_vector3);\n          _face.normalModel.applyMatrix3(normalMatrix).normalize();\n          for (let i = 0; i < 3; i++) {\n            const normal = _face.vertexNormalsModel[i];\n            normal.fromArray(normals, arguments[i] * 3);\n            normal.applyMatrix3(normalMatrix).normalize();\n            const uv = _face.uvs[i];\n            uv.fromArray(uvs, arguments[i] * 2);\n          }\n          _face.vertexNormalsLength = 3;\n          _face.material = material;\n          if (material.vertexColors) {\n            _face.color.fromArray(colors, a * 3);\n          }\n          _renderData.elements.push(_face);\n        }\n      }\n      return {\n        setObject: setObject,\n        projectVertex: projectVertex,\n        checkTriangleVisibility: checkTriangleVisibility,\n        checkBackfaceCulling: checkBackfaceCulling,\n        pushVertex: pushVertex,\n        pushNormal: pushNormal,\n        pushColor: pushColor,\n        pushUv: pushUv,\n        pushLine: pushLine,\n        pushTriangle: pushTriangle\n      };\n    }\n    const renderList = new RenderList();\n    function projectObject(object) {\n      if (object.visible === false) return;\n      if (object.isLight) {\n        _renderData.lights.push(object);\n      } else if (object.isMesh || object.isLine || object.isPoints) {\n        if (object.material.visible === false) return;\n        if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;\n        addObject(object);\n      } else if (object.isSprite) {\n        if (object.material.visible === false) return;\n        if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;\n        addObject(object);\n      }\n      const children = object.children;\n      for (let i = 0, l = children.length; i < l; i++) {\n        projectObject(children[i]);\n      }\n    }\n    function addObject(object) {\n      _object = getNextObjectInPool();\n      _object.id = object.id;\n      _object.object = object;\n      _vector3.setFromMatrixPosition(object.matrixWorld);\n      _vector3.applyMatrix4(_viewProjectionMatrix);\n      _object.z = _vector3.z;\n      _object.renderOrder = object.renderOrder;\n      _renderData.objects.push(_object);\n    }\n    this.projectScene = function (scene, camera, sortObjects, sortElements) {\n      _faceCount = 0;\n      _lineCount = 0;\n      _spriteCount = 0;\n      _renderData.elements.length = 0;\n      if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n      _viewMatrix.copy(camera.matrixWorldInverse);\n      _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n      _frustum.setFromProjectionMatrix(_viewProjectionMatrix);\n\n      //\n\n      _objectCount = 0;\n      _renderData.objects.length = 0;\n      _renderData.lights.length = 0;\n      projectObject(scene);\n      if (sortObjects === true) {\n        _renderData.objects.sort(painterSort);\n      }\n\n      //\n\n      const objects = _renderData.objects;\n      for (let o = 0, ol = objects.length; o < ol; o++) {\n        const object = objects[o].object;\n        const geometry = object.geometry;\n        renderList.setObject(object);\n        _modelMatrix = object.matrixWorld;\n        _vertexCount = 0;\n        if (object.isMesh) {\n          let material = object.material;\n          const isMultiMaterial = Array.isArray(material);\n          const attributes = geometry.attributes;\n          const groups = geometry.groups;\n          if (attributes.position === undefined) continue;\n          const positions = attributes.position.array;\n          for (let i = 0, l = positions.length; i < l; i += 3) {\n            let x = positions[i];\n            let y = positions[i + 1];\n            let z = positions[i + 2];\n            const morphTargets = geometry.morphAttributes.position;\n            if (morphTargets !== undefined) {\n              const morphTargetsRelative = geometry.morphTargetsRelative;\n              const morphInfluences = object.morphTargetInfluences;\n              for (let t = 0, tl = morphTargets.length; t < tl; t++) {\n                const influence = morphInfluences[t];\n                if (influence === 0) continue;\n                const target = morphTargets[t];\n                if (morphTargetsRelative) {\n                  x += target.getX(i / 3) * influence;\n                  y += target.getY(i / 3) * influence;\n                  z += target.getZ(i / 3) * influence;\n                } else {\n                  x += (target.getX(i / 3) - positions[i]) * influence;\n                  y += (target.getY(i / 3) - positions[i + 1]) * influence;\n                  z += (target.getZ(i / 3) - positions[i + 2]) * influence;\n                }\n              }\n            }\n            renderList.pushVertex(x, y, z);\n          }\n          if (attributes.normal !== undefined) {\n            const normals = attributes.normal.array;\n            for (let i = 0, l = normals.length; i < l; i += 3) {\n              renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n            }\n          }\n          if (attributes.color !== undefined) {\n            const colors = attributes.color.array;\n            for (let i = 0, l = colors.length; i < l; i += 3) {\n              renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n            }\n          }\n          if (attributes.uv !== undefined) {\n            const uvs = attributes.uv.array;\n            for (let i = 0, l = uvs.length; i < l; i += 2) {\n              renderList.pushUv(uvs[i], uvs[i + 1]);\n            }\n          }\n          if (geometry.index !== null) {\n            const indices = geometry.index.array;\n            if (groups.length > 0) {\n              for (let g = 0; g < groups.length; g++) {\n                const group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === undefined) continue;\n                for (let i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n                }\n              }\n            } else {\n              for (let i = 0, l = indices.length; i < l; i += 3) {\n                renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n              }\n            }\n          } else {\n            if (groups.length > 0) {\n              for (let g = 0; g < groups.length; g++) {\n                const group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === undefined) continue;\n                for (let i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(i, i + 1, i + 2, material);\n                }\n              }\n            } else {\n              for (let i = 0, l = positions.length / 3; i < l; i += 3) {\n                renderList.pushTriangle(i, i + 1, i + 2, material);\n              }\n            }\n          }\n        } else if (object.isLine) {\n          _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n          const attributes = geometry.attributes;\n          if (attributes.position !== undefined) {\n            const positions = attributes.position.array;\n            for (let i = 0, l = positions.length; i < l; i += 3) {\n              renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n            }\n            if (attributes.color !== undefined) {\n              const colors = attributes.color.array;\n              for (let i = 0, l = colors.length; i < l; i += 3) {\n                renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n              }\n            }\n            if (geometry.index !== null) {\n              const indices = geometry.index.array;\n              for (let i = 0, l = indices.length; i < l; i += 2) {\n                renderList.pushLine(indices[i], indices[i + 1]);\n              }\n            } else {\n              const step = object.isLineSegments ? 2 : 1;\n              for (let i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                renderList.pushLine(i, i + 1);\n              }\n            }\n          }\n        } else if (object.isPoints) {\n          _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n          const attributes = geometry.attributes;\n          if (attributes.position !== undefined) {\n            const positions = attributes.position.array;\n            for (let i = 0, l = positions.length; i < l; i += 3) {\n              _vector4.set(positions[i], positions[i + 1], positions[i + 2], 1);\n              _vector4.applyMatrix4(_modelViewProjectionMatrix);\n              pushPoint(_vector4, object, camera);\n            }\n          }\n        } else if (object.isSprite) {\n          object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n          _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n          _vector4.applyMatrix4(_viewProjectionMatrix);\n          pushPoint(_vector4, object, camera);\n        }\n      }\n      if (sortElements === true) {\n        _renderData.elements.sort(painterSort);\n      }\n      return _renderData;\n    };\n    function pushPoint(_vector4, object, camera) {\n      const invW = 1 / _vector4.w;\n      _vector4.z *= invW;\n      if (_vector4.z >= -1 && _vector4.z <= 1) {\n        _sprite = getNextSpriteInPool();\n        _sprite.id = object.id;\n        _sprite.x = _vector4.x * invW;\n        _sprite.y = _vector4.y * invW;\n        _sprite.z = _vector4.z;\n        _sprite.renderOrder = object.renderOrder;\n        _sprite.object = object;\n        _sprite.rotation = object.rotation;\n        _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n        _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n        _sprite.material = object.material;\n        _renderData.elements.push(_sprite);\n      }\n    }\n\n    // Pools\n\n    function getNextObjectInPool() {\n      if (_objectCount === _objectPoolLength) {\n        const object = new RenderableObject();\n        _objectPool.push(object);\n        _objectPoolLength++;\n        _objectCount++;\n        return object;\n      }\n      return _objectPool[_objectCount++];\n    }\n    function getNextVertexInPool() {\n      if (_vertexCount === _vertexPoolLength) {\n        const vertex = new RenderableVertex();\n        _vertexPool.push(vertex);\n        _vertexPoolLength++;\n        _vertexCount++;\n        return vertex;\n      }\n      return _vertexPool[_vertexCount++];\n    }\n    function getNextFaceInPool() {\n      if (_faceCount === _facePoolLength) {\n        const face = new RenderableFace();\n        _facePool.push(face);\n        _facePoolLength++;\n        _faceCount++;\n        return face;\n      }\n      return _facePool[_faceCount++];\n    }\n    function getNextLineInPool() {\n      if (_lineCount === _linePoolLength) {\n        const line = new RenderableLine();\n        _linePool.push(line);\n        _linePoolLength++;\n        _lineCount++;\n        return line;\n      }\n      return _linePool[_lineCount++];\n    }\n    function getNextSpriteInPool() {\n      if (_spriteCount === _spritePoolLength) {\n        const sprite = new RenderableSprite();\n        _spritePool.push(sprite);\n        _spritePoolLength++;\n        _spriteCount++;\n        return sprite;\n      }\n      return _spritePool[_spriteCount++];\n    }\n\n    //\n\n    function painterSort(a, b) {\n      if (a.renderOrder !== b.renderOrder) {\n        return a.renderOrder - b.renderOrder;\n      } else if (a.z !== b.z) {\n        return b.z - a.z;\n      } else if (a.id !== b.id) {\n        return a.id - b.id;\n      } else {\n        return 0;\n      }\n    }\n    function clipLine(s1, s2) {\n      let alpha1 = 0,\n        alpha2 = 1;\n\n      // Calculate the boundary coordinate of each vertex for the near and far clip planes,\n      // Z = -1 and Z = +1, respectively.\n\n      const bc1near = s1.z + s1.w,\n        bc2near = s2.z + s2.w,\n        bc1far = -s1.z + s1.w,\n        bc2far = -s2.z + s2.w;\n      if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n        // Both vertices lie entirely within all clip planes.\n        return true;\n      } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n        // Both vertices lie entirely outside one of the clip planes.\n        return false;\n      } else {\n        // The line segment spans at least one clip plane.\n\n        if (bc1near < 0) {\n          // v1 lies outside the near plane, v2 inside\n          alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n        } else if (bc2near < 0) {\n          // v2 lies outside the near plane, v1 inside\n          alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n        }\n        if (bc1far < 0) {\n          // v1 lies outside the far plane, v2 inside\n          alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n        } else if (bc2far < 0) {\n          // v2 lies outside the far plane, v2 inside\n          alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n        }\n        if (alpha2 < alpha1) {\n          // The line segment spans two boundaries, but is outside both of them.\n          // (This can't happen when we're only clipping against just near/far but good\n          //  to leave the check here for future usage if other clip planes are added.)\n          return false;\n        } else {\n          // Update the s1 and s2 vertices to match the clipped line segment.\n          s1.lerp(s2, alpha1);\n          s2.lerp(s1, 1 - alpha2);\n          return true;\n        }\n      }\n    }\n  }\n}\nexport { RenderableObject, RenderableFace, RenderableVertex, RenderableLine, RenderableSprite, Projector };","map":{"version":3,"names":["Box3","Color","DoubleSide","Frustum","Matrix3","Matrix4","Vector2","Vector3","Vector4","RenderableObject","constructor","id","object","z","renderOrder","RenderableFace","v1","RenderableVertex","v2","v3","normalModel","vertexNormalsModel","vertexNormalsLength","color","material","uvs","position","positionWorld","positionScreen","visible","copy","vertex","RenderableLine","vertexColors","RenderableSprite","x","y","rotation","scale","Projector","_object","_objectCount","_objectPoolLength","_vertex","_vertexCount","_vertexPoolLength","_face","_faceCount","_facePoolLength","_line","_lineCount","_linePoolLength","_sprite","_spriteCount","_spritePoolLength","_modelMatrix","_renderData","objects","lights","elements","_vector3","_vector4","_clipBox","_boundingBox","_points3","Array","_viewMatrix","_viewProjectionMatrix","_modelViewProjectionMatrix","_frustum","_objectPool","_vertexPool","_facePool","_linePool","_spritePool","RenderList","normals","colors","normalMatrix","setObject","value","getNormalMatrix","matrixWorld","length","projectVertex","applyMatrix4","invW","w","pushVertex","getNextVertexInPool","set","pushNormal","push","pushColor","r","g","b","pushUv","checkTriangleVisibility","intersectsBox","setFromPoints","checkBackfaceCulling","pushLine","a","clipLine","multiplyScalar","getNextLineInPool","Math","max","fromArray","pushTriangle","c","side","getNextFaceInPool","subVectors","cross","applyMatrix3","normalize","i","normal","arguments","uv","renderList","projectObject","isLight","isMesh","isLine","isPoints","frustumCulled","intersectsObject","addObject","isSprite","intersectsSprite","children","l","getNextObjectInPool","setFromMatrixPosition","projectScene","scene","camera","sortObjects","sortElements","matrixWorldAutoUpdate","updateMatrixWorld","parent","matrixWorldInverse","multiplyMatrices","projectionMatrix","setFromProjectionMatrix","sort","painterSort","o","ol","geometry","isMultiMaterial","isArray","attributes","groups","undefined","positions","array","morphTargets","morphAttributes","morphTargetsRelative","morphInfluences","morphTargetInfluences","t","tl","influence","target","getX","getY","getZ","index","indices","group","materialIndex","start","count","step","isLineSegments","pushPoint","modelViewMatrix","getNextSpriteInPool","abs","face","line","sprite","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","min","lerp"],"sources":["/Users/cabrera/Documents/GyroscopeVisualizer/frontend/node_modules/three/examples/jsm/renderers/Projector.js"],"sourcesContent":["import {\n\tBox3,\n\tColor,\n\tDoubleSide,\n\tFrustum,\n\tMatrix3,\n\tMatrix4,\n\tVector2,\n\tVector3,\n\tVector4\n} from 'three';\n\nclass RenderableObject {\n\n\tconstructor() {\n\n\t\tthis.id = 0;\n\n\t\tthis.object = null;\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\n\t}\n\n}\n\n//\n\nclass RenderableFace {\n\n\tconstructor() {\n\n\t\tthis.id = 0;\n\n\t\tthis.v1 = new RenderableVertex();\n\t\tthis.v2 = new RenderableVertex();\n\t\tthis.v3 = new RenderableVertex();\n\n\t\tthis.normalModel = new Vector3();\n\n\t\tthis.vertexNormalsModel = [ new Vector3(), new Vector3(), new Vector3() ];\n\t\tthis.vertexNormalsLength = 0;\n\n\t\tthis.color = new Color();\n\t\tthis.material = null;\n\t\tthis.uvs = [ new Vector2(), new Vector2(), new Vector2() ];\n\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\n\t}\n\n}\n\n//\n\nclass RenderableVertex {\n\n\tconstructor() {\n\n\t\tthis.position = new Vector3();\n\t\tthis.positionWorld = new Vector3();\n\t\tthis.positionScreen = new Vector4();\n\n\t\tthis.visible = true;\n\n\t}\n\n\tcopy( vertex ) {\n\n\t\tthis.positionWorld.copy( vertex.positionWorld );\n\t\tthis.positionScreen.copy( vertex.positionScreen );\n\n\t}\n\n}\n\n//\n\nclass RenderableLine {\n\n\tconstructor() {\n\n\t\tthis.id = 0;\n\n\t\tthis.v1 = new RenderableVertex();\n\t\tthis.v2 = new RenderableVertex();\n\n\t\tthis.vertexColors = [ new Color(), new Color() ];\n\t\tthis.material = null;\n\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\n\t}\n\n}\n\n//\n\nclass RenderableSprite {\n\n\tconstructor() {\n\n\t\tthis.id = 0;\n\n\t\tthis.object = null;\n\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t\tthis.z = 0;\n\n\t\tthis.rotation = 0;\n\t\tthis.scale = new Vector2();\n\n\t\tthis.material = null;\n\t\tthis.renderOrder = 0;\n\n\t}\n\n}\n\n//\n\nclass Projector {\n\n\tconstructor() {\n\n\t\tlet _object, _objectCount, _objectPoolLength = 0,\n\t\t\t_vertex, _vertexCount, _vertexPoolLength = 0,\n\t\t\t_face, _faceCount, _facePoolLength = 0,\n\t\t\t_line, _lineCount, _linePoolLength = 0,\n\t\t\t_sprite, _spriteCount, _spritePoolLength = 0,\n\t\t\t_modelMatrix;\n\n\t\tconst\n\n\t\t\t_renderData = { objects: [], lights: [], elements: [] },\n\n\t\t\t_vector3 = new Vector3(),\n\t\t\t_vector4 = new Vector4(),\n\n\t\t\t_clipBox = new Box3( new Vector3( - 1, - 1, - 1 ), new Vector3( 1, 1, 1 ) ),\n\t\t\t_boundingBox = new Box3(),\n\t\t\t_points3 = new Array( 3 ),\n\n\t\t\t_viewMatrix = new Matrix4(),\n\t\t\t_viewProjectionMatrix = new Matrix4(),\n\n\t\t\t_modelViewProjectionMatrix = new Matrix4(),\n\n\t\t\t_frustum = new Frustum(),\n\n\t\t\t_objectPool = [], _vertexPool = [], _facePool = [], _linePool = [], _spritePool = [];\n\n\t\t//\n\n\t\tfunction RenderList() {\n\n\t\t\tconst normals = [];\n\t\t\tconst colors = [];\n\t\t\tconst uvs = [];\n\n\t\t\tlet object = null;\n\n\t\t\tconst normalMatrix = new Matrix3();\n\n\t\t\tfunction setObject( value ) {\n\n\t\t\t\tobject = value;\n\n\t\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\n\n\t\t\t\tnormals.length = 0;\n\t\t\t\tcolors.length = 0;\n\t\t\t\tuvs.length = 0;\n\n\t\t\t}\n\n\t\t\tfunction projectVertex( vertex ) {\n\n\t\t\t\tconst position = vertex.position;\n\t\t\t\tconst positionWorld = vertex.positionWorld;\n\t\t\t\tconst positionScreen = vertex.positionScreen;\n\n\t\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\n\t\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\tconst invW = 1 / positionScreen.w;\n\n\t\t\t\tpositionScreen.x *= invW;\n\t\t\t\tpositionScreen.y *= invW;\n\t\t\t\tpositionScreen.z *= invW;\n\n\t\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\n\t\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\n\t\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\n\n\t\t\t}\n\n\t\t\tfunction pushVertex( x, y, z ) {\n\n\t\t\t\t_vertex = getNextVertexInPool();\n\t\t\t\t_vertex.position.set( x, y, z );\n\n\t\t\t\tprojectVertex( _vertex );\n\n\t\t\t}\n\n\t\t\tfunction pushNormal( x, y, z ) {\n\n\t\t\t\tnormals.push( x, y, z );\n\n\t\t\t}\n\n\t\t\tfunction pushColor( r, g, b ) {\n\n\t\t\t\tcolors.push( r, g, b );\n\n\t\t\t}\n\n\t\t\tfunction pushUv( x, y ) {\n\n\t\t\t\tuvs.push( x, y );\n\n\t\t\t}\n\n\t\t\tfunction checkTriangleVisibility( v1, v2, v3 ) {\n\n\t\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\n\n\t\t\t\t_points3[ 0 ] = v1.positionScreen;\n\t\t\t\t_points3[ 1 ] = v2.positionScreen;\n\t\t\t\t_points3[ 2 ] = v3.positionScreen;\n\n\t\t\t\treturn _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );\n\n\t\t\t}\n\n\t\t\tfunction checkBackfaceCulling( v1, v2, v3 ) {\n\n\t\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\n\t\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\n\t\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\n\t\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\n\n\t\t\t}\n\n\t\t\tfunction pushLine( a, b ) {\n\n\t\t\t\tconst v1 = _vertexPool[ a ];\n\t\t\t\tconst v2 = _vertexPool[ b ];\n\n\t\t\t\t// Clip\n\n\t\t\t\tv1.positionScreen.copy( v1.position ).applyMatrix4( _modelViewProjectionMatrix );\n\t\t\t\tv2.positionScreen.copy( v2.position ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\tif ( clipLine( v1.positionScreen, v2.positionScreen ) === true ) {\n\n\t\t\t\t\t// Perform the perspective divide\n\t\t\t\t\tv1.positionScreen.multiplyScalar( 1 / v1.positionScreen.w );\n\t\t\t\t\tv2.positionScreen.multiplyScalar( 1 / v2.positionScreen.w );\n\n\t\t\t\t\t_line = getNextLineInPool();\n\t\t\t\t\t_line.id = object.id;\n\t\t\t\t\t_line.v1.copy( v1 );\n\t\t\t\t\t_line.v2.copy( v2 );\n\t\t\t\t\t_line.z = Math.max( v1.positionScreen.z, v2.positionScreen.z );\n\t\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t\t_line.material = object.material;\n\n\t\t\t\t\tif ( object.material.vertexColors ) {\n\n\t\t\t\t\t\t_line.vertexColors[ 0 ].fromArray( colors, a * 3 );\n\t\t\t\t\t\t_line.vertexColors[ 1 ].fromArray( colors, b * 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction pushTriangle( a, b, c, material ) {\n\n\t\t\t\tconst v1 = _vertexPool[ a ];\n\t\t\t\tconst v2 = _vertexPool[ b ];\n\t\t\t\tconst v3 = _vertexPool[ c ];\n\n\t\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\n\n\t\t\t\tif ( material.side === DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\n\n\t\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t_face.v3.copy( v3 );\n\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t\t// face normal\n\t\t\t\t\t_vector3.subVectors( v3.position, v2.position );\n\t\t\t\t\t_vector4.subVectors( v1.position, v2.position );\n\t\t\t\t\t_vector3.cross( _vector4 );\n\t\t\t\t\t_face.normalModel.copy( _vector3 );\n\t\t\t\t\t_face.normalModel.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\tconst normal = _face.vertexNormalsModel[ i ];\n\t\t\t\t\t\tnormal.fromArray( normals, arguments[ i ] * 3 );\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t\tconst uv = _face.uvs[ i ];\n\t\t\t\t\t\tuv.fromArray( uvs, arguments[ i ] * 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_face.vertexNormalsLength = 3;\n\n\t\t\t\t\t_face.material = material;\n\n\t\t\t\t\tif ( material.vertexColors ) {\n\n\t\t\t\t\t\t_face.color.fromArray( colors, a * 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tsetObject: setObject,\n\t\t\t\tprojectVertex: projectVertex,\n\t\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\n\t\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\n\t\t\t\tpushVertex: pushVertex,\n\t\t\t\tpushNormal: pushNormal,\n\t\t\t\tpushColor: pushColor,\n\t\t\t\tpushUv: pushUv,\n\t\t\t\tpushLine: pushLine,\n\t\t\t\tpushTriangle: pushTriangle\n\t\t\t};\n\n\t\t}\n\n\t\tconst renderList = new RenderList();\n\n\t\tfunction projectObject( object ) {\n\n\t\t\tif ( object.visible === false ) return;\n\n\t\t\tif ( object.isLight ) {\n\n\t\t\t\t_renderData.lights.push( object );\n\n\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\tif ( object.material.visible === false ) return;\n\t\t\t\tif ( object.frustumCulled === true && _frustum.intersectsObject( object ) === false ) return;\n\n\t\t\t\taddObject( object );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\tif ( object.material.visible === false ) return;\n\t\t\t\tif ( object.frustumCulled === true && _frustum.intersectsSprite( object ) === false ) return;\n\n\t\t\t\taddObject( object );\n\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction addObject( object ) {\n\n\t\t\t_object = getNextObjectInPool();\n\t\t\t_object.id = object.id;\n\t\t\t_object.object = object;\n\n\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t_vector3.applyMatrix4( _viewProjectionMatrix );\n\t\t\t_object.z = _vector3.z;\n\t\t\t_object.renderOrder = object.renderOrder;\n\n\t\t\t_renderData.objects.push( _object );\n\n\t\t}\n\n\t\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\n\n\t\t\t_faceCount = 0;\n\t\t\t_lineCount = 0;\n\t\t\t_spriteCount = 0;\n\n\t\t\t_renderData.elements.length = 0;\n\n\t\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\t\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\t\t_viewMatrix.copy( camera.matrixWorldInverse );\n\t\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t\t_frustum.setFromProjectionMatrix( _viewProjectionMatrix );\n\n\t\t\t//\n\n\t\t\t_objectCount = 0;\n\n\t\t\t_renderData.objects.length = 0;\n\t\t\t_renderData.lights.length = 0;\n\n\t\t\tprojectObject( scene );\n\n\t\t\tif ( sortObjects === true ) {\n\n\t\t\t\t_renderData.objects.sort( painterSort );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst objects = _renderData.objects;\n\n\t\t\tfor ( let o = 0, ol = objects.length; o < ol; o ++ ) {\n\n\t\t\t\tconst object = objects[ o ].object;\n\t\t\t\tconst geometry = object.geometry;\n\n\t\t\t\trenderList.setObject( object );\n\n\t\t\t\t_modelMatrix = object.matrixWorld;\n\n\t\t\t\t_vertexCount = 0;\n\n\t\t\t\tif ( object.isMesh ) {\n\n\t\t\t\t\tlet material = object.material;\n\n\t\t\t\t\tconst isMultiMaterial = Array.isArray( material );\n\n\t\t\t\t\tconst attributes = geometry.attributes;\n\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\tif ( attributes.position === undefined ) continue;\n\n\t\t\t\t\tconst positions = attributes.position.array;\n\n\t\t\t\t\tfor ( let i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\tlet x = positions[ i ];\n\t\t\t\t\t\tlet y = positions[ i + 1 ];\n\t\t\t\t\t\tlet z = positions[ i + 2 ];\n\n\t\t\t\t\t\tconst morphTargets = geometry.morphAttributes.position;\n\n\t\t\t\t\t\tif ( morphTargets !== undefined ) {\n\n\t\t\t\t\t\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\t\t\t\tconst morphInfluences = object.morphTargetInfluences;\n\n\t\t\t\t\t\t\tfor ( let t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tconst influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tconst target = morphTargets[ t ];\n\n\t\t\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t\t\tx += target.getX( i / 3 ) * influence;\n\t\t\t\t\t\t\t\t\ty += target.getY( i / 3 ) * influence;\n\t\t\t\t\t\t\t\t\tz += target.getZ( i / 3 ) * influence;\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tx += ( target.getX( i / 3 ) - positions[ i ] ) * influence;\n\t\t\t\t\t\t\t\t\ty += ( target.getY( i / 3 ) - positions[ i + 1 ] ) * influence;\n\t\t\t\t\t\t\t\t\tz += ( target.getZ( i / 3 ) - positions[ i + 2 ] ) * influence;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trenderList.pushVertex( x, y, z );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.normal !== undefined ) {\n\n\t\t\t\t\t\tconst normals = attributes.normal.array;\n\n\t\t\t\t\t\tfor ( let i = 0, l = normals.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.color !== undefined ) {\n\n\t\t\t\t\t\tconst colors = attributes.color.array;\n\n\t\t\t\t\t\tfor ( let i = 0, l = colors.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushColor( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\t\tconst uvs = attributes.uv.array;\n\n\t\t\t\t\t\tfor ( let i = 0, l = uvs.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\tconst indices = geometry.index.array;\n\n\t\t\t\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\t\t\t\tfor ( let g = 0; g < groups.length; g ++ ) {\n\n\t\t\t\t\t\t\t\tconst group = groups[ g ];\n\n\t\t\t\t\t\t\t\tmaterial = isMultiMaterial === true\n\t\t\t\t\t\t\t\t\t ? object.material[ group.materialIndex ]\n\t\t\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\t\t\tfor ( let i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ], material );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ], material );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\t\t\t\tfor ( let g = 0; g < groups.length; g ++ ) {\n\n\t\t\t\t\t\t\t\tconst group = groups[ g ];\n\n\t\t\t\t\t\t\t\tmaterial = isMultiMaterial === true\n\t\t\t\t\t\t\t\t\t ? object.material[ group.materialIndex ]\n\t\t\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\t\t\tfor ( let i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2, material );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0, l = positions.length / 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2, material );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\t\tconst attributes = geometry.attributes;\n\n\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\tconst positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( let i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( attributes.color !== undefined ) {\n\n\t\t\t\t\t\t\tconst colors = attributes.color.array;\n\n\t\t\t\t\t\t\tfor ( let i = 0, l = colors.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushColor( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\t\tconst indices = geometry.index.array;\n\n\t\t\t\t\t\t\tfor ( let i = 0, l = indices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconst step = object.isLineSegments ? 2 : 1;\n\n\t\t\t\t\t\t\tfor ( let i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\t\tconst attributes = geometry.attributes;\n\n\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\tconst positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( let i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t_vector4.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ], 1 );\n\t\t\t\t\t\t\t_vector4.applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\n\t\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( sortElements === true ) {\n\n\t\t\t\t_renderData.elements.sort( painterSort );\n\n\t\t\t}\n\n\t\t\treturn _renderData;\n\n\t\t};\n\n\t\tfunction pushPoint( _vector4, object, camera ) {\n\n\t\t\tconst invW = 1 / _vector4.w;\n\n\t\t\t_vector4.z *= invW;\n\n\t\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\n\n\t\t\t\t_sprite = getNextSpriteInPool();\n\t\t\t\t_sprite.id = object.id;\n\t\t\t\t_sprite.x = _vector4.x * invW;\n\t\t\t\t_sprite.y = _vector4.y * invW;\n\t\t\t\t_sprite.z = _vector4.z;\n\t\t\t\t_sprite.renderOrder = object.renderOrder;\n\t\t\t\t_sprite.object = object;\n\n\t\t\t\t_sprite.rotation = object.rotation;\n\n\t\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\n\t\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\n\n\t\t\t\t_sprite.material = object.material;\n\n\t\t\t\t_renderData.elements.push( _sprite );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Pools\n\n\t\tfunction getNextObjectInPool() {\n\n\t\t\tif ( _objectCount === _objectPoolLength ) {\n\n\t\t\t\tconst object = new RenderableObject();\n\t\t\t\t_objectPool.push( object );\n\t\t\t\t_objectPoolLength ++;\n\t\t\t\t_objectCount ++;\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t\treturn _objectPool[ _objectCount ++ ];\n\n\t\t}\n\n\t\tfunction getNextVertexInPool() {\n\n\t\t\tif ( _vertexCount === _vertexPoolLength ) {\n\n\t\t\t\tconst vertex = new RenderableVertex();\n\t\t\t\t_vertexPool.push( vertex );\n\t\t\t\t_vertexPoolLength ++;\n\t\t\t\t_vertexCount ++;\n\t\t\t\treturn vertex;\n\n\t\t\t}\n\n\t\t\treturn _vertexPool[ _vertexCount ++ ];\n\n\t\t}\n\n\t\tfunction getNextFaceInPool() {\n\n\t\t\tif ( _faceCount === _facePoolLength ) {\n\n\t\t\t\tconst face = new RenderableFace();\n\t\t\t\t_facePool.push( face );\n\t\t\t\t_facePoolLength ++;\n\t\t\t\t_faceCount ++;\n\t\t\t\treturn face;\n\n\t\t\t}\n\n\t\t\treturn _facePool[ _faceCount ++ ];\n\n\n\t\t}\n\n\t\tfunction getNextLineInPool() {\n\n\t\t\tif ( _lineCount === _linePoolLength ) {\n\n\t\t\t\tconst line = new RenderableLine();\n\t\t\t\t_linePool.push( line );\n\t\t\t\t_linePoolLength ++;\n\t\t\t\t_lineCount ++;\n\t\t\t\treturn line;\n\n\t\t\t}\n\n\t\t\treturn _linePool[ _lineCount ++ ];\n\n\t\t}\n\n\t\tfunction getNextSpriteInPool() {\n\n\t\t\tif ( _spriteCount === _spritePoolLength ) {\n\n\t\t\t\tconst sprite = new RenderableSprite();\n\t\t\t\t_spritePool.push( sprite );\n\t\t\t\t_spritePoolLength ++;\n\t\t\t\t_spriteCount ++;\n\t\t\t\treturn sprite;\n\n\t\t\t}\n\n\t\t\treturn _spritePool[ _spriteCount ++ ];\n\n\t\t}\n\n\t\t//\n\n\t\tfunction painterSort( a, b ) {\n\n\t\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t\t} else if ( a.z !== b.z ) {\n\n\t\t\t\treturn b.z - a.z;\n\n\t\t\t} else if ( a.id !== b.id ) {\n\n\t\t\t\treturn a.id - b.id;\n\n\t\t\t} else {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction clipLine( s1, s2 ) {\n\n\t\t\tlet alpha1 = 0, alpha2 = 1;\n\n\t\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\n\t\t\t// Z = -1 and Z = +1, respectively.\n\n\t\t\tconst bc1near = s1.z + s1.w,\n\t\t\t\tbc2near = s2.z + s2.w,\n\t\t\t\tbc1far = - s1.z + s1.w,\n\t\t\t\tbc2far = - s2.z + s2.w;\n\n\t\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\n\n\t\t\t\t// Both vertices lie entirely within all clip planes.\n\t\t\t\treturn true;\n\n\t\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\n\n\t\t\t\t// Both vertices lie entirely outside one of the clip planes.\n\t\t\t\treturn false;\n\n\t\t\t} else {\n\n\t\t\t\t// The line segment spans at least one clip plane.\n\n\t\t\t\tif ( bc1near < 0 ) {\n\n\t\t\t\t\t// v1 lies outside the near plane, v2 inside\n\t\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t\t} else if ( bc2near < 0 ) {\n\n\t\t\t\t\t// v2 lies outside the near plane, v1 inside\n\t\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( bc1far < 0 ) {\n\n\t\t\t\t\t// v1 lies outside the far plane, v2 inside\n\t\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t\t} else if ( bc2far < 0 ) {\n\n\t\t\t\t\t// v2 lies outside the far plane, v2 inside\n\t\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( alpha2 < alpha1 ) {\n\n\t\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\n\t\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\n\t\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\n\t\t\t\t\treturn false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\n\t\t\t\t\ts1.lerp( s2, alpha1 );\n\t\t\t\t\ts2.lerp( s1, 1 - alpha2 );\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport { RenderableObject, RenderableFace, RenderableVertex, RenderableLine, RenderableSprite, Projector };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}