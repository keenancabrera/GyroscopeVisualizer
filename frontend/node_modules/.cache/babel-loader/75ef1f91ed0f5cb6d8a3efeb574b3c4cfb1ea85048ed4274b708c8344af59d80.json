{"ast":null,"code":"import { createCamera } from './components/camera.js';\nimport { Cylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\nimport { Rod } from './components/rod.js';\nimport { createRenderer } from './systems/renderer.js';\nimport * as THREE from 'three';\n// import { Loop } from './systems/Loop.js'\n// import { create } from 'core-js/core/object';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\n// let loop;\n\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters; // Affects parameters from parent component\n    this.state = state; // Affects initialState from parent component\n    this.solution = {};\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n    renderer = createRenderer();\n    renderer.setSize(container.clientWidth, container.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    // loop = new Loop(camera, scene, renderer)\n\n    container.append(renderer.domElement);\n\n    // Add elements\n    this.cylinder = new Cylinder(parameters, this.getCartesian());\n    this.rod = new Rod(this.getCartesian(), this.parameters);\n    // this.loop.push(this.cylinder)\n    // this.loop.push(this.rod)\n\n    this.axesHelper = new THREE.AxesHelper(3 / 2 * this.parameters.l.value);\n\n    // Update cylinder position and orientation\n    this.render();\n    scene.add(this.cylinder.object, this.rod.object, this.axesHelper);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  render() {\n    // used to render a single frame\n    renderer.render(scene, camera);\n  }\n  updateSolution(solution) {\n    this.solution = solution;\n    this.startAnimation();\n  }\n  updateParameters(parameters) {\n    this.parameters = parameters;\n    this.rod.tick(this.getCartesian(), this.parameters);\n    this.cylinder.changeParameters(this.parameters);\n    this.render();\n  }\n  updateState(state) {\n    console.log('state');\n    // this.stopAnimation()\n    this.state = state;\n    this.cylinder.tick(this.getCartesian());\n    this.rod.tick(this.getCartesian());\n    this.render();\n  }\n  getCartesian() {\n    // return cartesian coordinates from theta, phi, and psi\n    let x = this.parameters.l.value * Math.cos(this.state.theta.value) * Math.sin(this.state.phi.value);\n    let y = this.parameters.l.value * Math.sin(this.state.theta.value) * Math.sin(this.state.phi.value);\n    let z = this.parameters.l.value * Math.cos(this.state.phi.value);\n    return {\n      x: x,\n      y: y,\n      z: z\n    };\n  }\n  startAnimation() {\n    let i = 1;\n    let lenSolution = this.solution.theta.length;\n    console.log(lenSolution);\n    renderer.setAnimationLoop(() => {\n      if (i > lenSolution) {\n        this.stopAnimation();\n        return;\n      }\n      this.state.theta.value = this.solution.theta[i];\n      this.state.phi.value = this.solution.phi[i];\n      this.state.psi.value = this.solution.psi[i];\n      // this.state.thetaVel.value = this.solution.thetaVel[i]\n      // this.state.phiVel.value = this.solution.phiVel[i]\n      // this.state.psiVel.value = this.solution.psiVel[i]\n\n      this.cylinder.tick(this.getCartesian());\n      this.rod.tick(this.getCartesian(), this.parameters);\n      i = i + 1;\n      renderer.render(scene, camera);\n    });\n  }\n  stopAnimation() {\n    console.log(this.state);\n    renderer.setAnimationLoop(null);\n    renderer.render(scene, camera);\n  }\n}\nexport { gyroscopeAnimation };","map":{"version":3,"names":["createCamera","Cylinder","createScene","Rod","createRenderer","THREE","camera","renderer","scene","gyroscopeAnimation","constructor","container","parameters","state","solution","setSize","clientWidth","clientHeight","setPixelRatio","window","devicePixelRatio","append","domElement","cylinder","getCartesian","rod","axesHelper","AxesHelper","l","value","render","add","object","updateSolution","startAnimation","updateParameters","tick","changeParameters","updateState","console","log","x","Math","cos","theta","sin","phi","y","z","i","lenSolution","length","setAnimationLoop","stopAnimation","psi"],"sources":["/Users/cabrera/Documents/PortfolioWebiste/frontend/src/gyroscopeRenderer/gyroscopeAnimation.js"],"sourcesContent":["import { createCamera } from './components/camera.js';\nimport { Cylinder } from './components/cylinder.js';\nimport { createScene } from './components/scene.js';\nimport { Rod } from './components/rod.js'\n\nimport { createRenderer } from './systems/renderer.js';\nimport * as THREE from 'three';\n// import { Loop } from './systems/Loop.js'\n// import { create } from 'core-js/core/object';\n// import { Resizer } from './systems/Resizer.js';\n\n// These variables are module-scoped: we cannot access them\n// from outside the module\nlet camera;\nlet renderer;\nlet scene;\n// let loop;\n\nclass gyroscopeAnimation {\n  constructor(container, parameters, state) {\n    this.parameters = parameters // Affects parameters from parent component\n    this.state = state // Affects initialState from parent component\n    this.solution = {}\n\n    // Create necessary elements, set up renderer, add to container\n    camera = createCamera(container, this.parameters);\n    scene = createScene();\n    renderer = createRenderer();\n      renderer.setSize(container.clientWidth, container.clientHeight)\n      renderer.setPixelRatio(window.devicePixelRatio)\n    // loop = new Loop(camera, scene, renderer)\n\n    container.append(renderer.domElement);\n\n    // Add elements\n    this.cylinder = new Cylinder(parameters, this.getCartesian())\n    this.rod = new Rod(this.getCartesian(), this.parameters)\n    // this.loop.push(this.cylinder)\n    // this.loop.push(this.rod)\n\n    this.axesHelper = new THREE.AxesHelper(3/2 * this.parameters.l.value)\n\n    // Update cylinder position and orientation\n    this.render()\n    scene.add(this.cylinder.object, this.rod.object, this.axesHelper);\n\n    // const resizer = new Resizer(container, camera, renderer);\n  }\n\n  render() { // used to render a single frame\n    renderer.render(scene, camera);\n  }\n\n  updateSolution(solution){\n    this.solution = solution\n    this.startAnimation()\n  }\n\n  updateParameters(parameters){\n    this.parameters = parameters\n\n    this.rod.tick(this.getCartesian(), this.parameters)\n    this.cylinder.changeParameters(this.parameters)\n\n    this.render()\n  }\n\n  updateState(state){\n    console.log('state')\n    // this.stopAnimation()\n    this.state = state\n\n    this.cylinder.tick(this.getCartesian())\n    this.rod.tick(this.getCartesian())\n    this.render()\n  }\n\n  getCartesian(){ // return cartesian coordinates from theta, phi, and psi\n    let x = this.parameters.l.value * Math.cos(this.state.theta.value) * Math.sin(this.state.phi.value)\n    let y = this.parameters.l.value * Math.sin(this.state.theta.value) * Math.sin(this.state.phi.value)\n    let z = this.parameters.l.value * Math.cos(this.state.phi.value)\n\n    return {x:x, y:y, z:z}\n  }\n\n  startAnimation(){\n    let i = 1\n    let lenSolution = this.solution.theta.length\n    console.log(lenSolution)\n    renderer.setAnimationLoop(() => {\n      if (i > lenSolution){\n        this.stopAnimation() \n        return\n      }\n      this.state.theta.value = this.solution.theta[i]\n      this.state.phi.value = this.solution.phi[i]\n      this.state.psi.value = this.solution.psi[i]\n      // this.state.thetaVel.value = this.solution.thetaVel[i]\n      // this.state.phiVel.value = this.solution.phiVel[i]\n      // this.state.psiVel.value = this.solution.psiVel[i]\n\n      this.cylinder.tick(this.getCartesian())\n      this.rod.tick(this.getCartesian(), this.parameters)\n\n      i = i + 1\n      renderer.render(scene, camera)\n    })\n  }\n\n  stopAnimation(){\n    console.log(this.state)\n    renderer.setAnimationLoop(null)\n    renderer.render(scene, camera)\n  }\n\n}\n\nexport { gyroscopeAnimation };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}